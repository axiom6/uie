// Generated by CoffeeScript 1.12.2
(function() {
  var Action, BrowserWindow, electron,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  electron = require('electron');

  BrowserWindow = electron.BrowserWindow;

  Action = (function() {
    module.exports = Action;

    function Action(app, dirname) {
      this.app = app;
      this.dirname = dirname;
      this.closeView = bind(this.closeView, this);
      this.close = bind(this.close, this);
      this.views = {};
      this.current = 'Main';
      this.view(this.current, '/coffee/elec/ui/main.html', 240, 200);
    }

    Action.prototype.newf = function() {
      return this.log('Action Newf');
    };

    Action.prototype.open = function() {
      return this.log('Action Open');
    };

    Action.prototype.save = function() {
      return this.log('Action Save');
    };

    Action.prototype.pref = function() {
      return this.log('Action Pref');
    };

    Action.prototype.undo = function() {
      return this.log('Action Undo');
    };

    Action.prototype.redo = function() {
      return this.log('Action Redo');
    };

    Action.prototype.cut = function() {
      return this.log('Action Cut');
    };

    Action.prototype.copy = function() {
      return this.log('Action Copy');
    };

    Action.prototype.paste = function() {
      return this.log('Action Paste');
    };

    Action.prototype.selectAll = function() {
      return this.log('Action SelectAll');
    };

    Action.prototype.find = function() {
      return this.log('Action Find');
    };

    Action.prototype.replace = function() {
      return this.log('Action Replace');
    };

    Action.prototype.close = function() {
      var view;
      if ((this.current == null) || (this.views[this.current] == null) || this.current === 'Main') {
        return;
      }
      view = this.views[this.current];
      view.window.close();
    };

    Action.prototype.closeView = function(view) {
      if (view == null) {
        return;
      }
      view.window = null;
      delete this.views[this.current];
      this.current = 'Main';
    };

    Action.prototype.toggleDevTools = function() {
      var view;
      if (this.current == null) {
        return;
      }
      view = this.views[this.current];
      if (view.devTools) {
        view.window['webContents'].closeDevTools();
        view.devTools = false;
      } else {
        view.window['webContents'].openDevTools();
        view.devTools = true;
      }
    };

    Action.prototype.log = function(str) {
      console.log(str);
    };

    Action.prototype.createView = function() {
      return {
        window: {},
        hasFocus: false,
        devTools: false
      };
    };

    Action.prototype.view = function(name, htm, width, height) {
      var fontPrefs, options, url, viewn;
      if (width == null) {
        width = 1400;
      }
      if (height == null) {
        height = 1000;
      }
      url = 'file:///Users/ax/Documents/prj/ui';
      if (!this.views[name]) {
        fontPrefs = {
          defaultFontFamily: {
            standard: "FontAwesome",
            serif: "FontAwesome",
            sansSerif: "FontAwesome",
            monospace: "FontAwesome"
          }
        };
        options = {
          title: name,
          width: width,
          height: height,
          webPreferences: fontPrefs
        };
        if (name === 'Main') {
          options.x = 50;
          options.y = 50;
          options.frame = false;
        }
        viewn = this.createView();
        viewn.window = new BrowserWindow(options);
        this.views[name] = viewn;
        this.current = name;
        viewn.window.loadURL(url + htm);
        viewn.window.on('closed', (function(_this) {
          return function() {
            return _this.closeView(_this.views[name]);
          };
        })(this));
        viewn.focus = true;
        viewn.window['webContents'].on('did-finish-load', function() {
          return viewn.window['webContents'].send('init', name);
        });
      }
    };

    return Action;

  })();

}).call(this);
