// Generated by CoffeeScript 1.12.2
(function() {
  var $, Prac, Vis;

  $ = require('jquery');

  Vis = require('js/util/Vis');

  Prac = (function() {
    module.exports = Prac;

    Prac.Shapes = require('js/prac/Shapes');

    Prac.Embrace = require('js/prac/Embrace');

    Prac.Innovate = require('js/prac/Innovate');

    Prac.Encourage = require('js/prac/Encourage');

    Prac.Connect = require('js/prac/Connect');

    Prac.Tree = require('js/d3d/Tree');

    Prac.Radial = require('js/d3d/Radial');

    Prac.Cluster = require('js/d3d/Cluster');

    Prac.cos30 = 0.86602540378;

    Prac.cos15 = Vis.cos(15);

    Prac.cos = function(deg) {
      return Vis.cosSvg(deg);
    };

    Prac.sin = function(deg) {
      return Vis.sinSvg(deg);
    };

    function Prac(ui, stream, view) {
      this.ui = ui;
      this.stream = stream;
      this.view = view;
      this.practices = this.ui.build.getPractices(this.ui.plane.name);
      this.shapes = new Prac.Shapes(this.stream, this);
    }

    Prac.prototype.arrange = function(studies0) {
      var dir, i, len, ref, studies1;
      studies1 = {};
      ref = ['north', 'west', 'east', 'south'];
      for (i = 0, len = ref.length; i < len; i++) {
        dir = ref[i];
        studies1[this.key(studies0, dir)] = this.obj(studies0, dir);
      }
      return studies1;
    };

    Prac.prototype.key = function(studies, dir) {
      var key, study;
      for (key in studies) {
        study = studies[key];
        if (study.dir === dir) {
          return key;
        }
      }
      return '???';
    };

    Prac.prototype.obj = function(studies, dir) {
      var key, study;
      for (key in studies) {
        study = studies[key];
        if (study.dir === dir) {
          return study;
        }
      }
      return {};
    };

    Prac.prototype.createDraw = function(pane, content, g, w, h) {
      var spec;
      spec = pane.spec;
      if (content.name === 'Svg' && this.ui.plane.id !== 'Data') {
        switch (spec.column) {
          case 'Embrace':
            return new Prac.Embrace(this.ui, spec, this);
          case 'Innovate':
            return new Prac.Innovate(this.ui, spec, this);
          case 'Encourage':
            return new Prac.Encourage(this.ui, spec, this);
          default:
            return new Prac.Embrace(this.ui, spec, this);
        }
      } else if (content.name === 'Svg' && this.ui.plane.id === 'Data') {
        return new Prac.Innovate(this.ui, spec, this);
      } else if (content.name === 'Tree') {
        return new Prac.Tree(this.ui, spec, g, w, h);
      } else if (content.name === 'Radial' || content.name === 'Overview') {
        return new Prac.Radial(this.ui, spec, g, w, h);
      } else {
        Util.error('Prac.createDraw unknown content', content.draw);
        return null;
      }
    };

    Prac.prototype.htmlId = function(pracName, contentName) {
      return Util.getHtmlId(pracName, this.ui.plane.id, contentName);
    };

    Prac.prototype.toFill = function(studyPrac) {
      if ((studyPrac.hsv != null) && studyPrac.hsv.length === 3) {
        return Vis.toRgbHsvStr(studyPrac.hsv);
      } else if ((studyPrac.fill != null) && studyPrac.fill.length <= 5) {
        return Vis.Palettes.hex(studyPrac.fill);
      } else {
        Util.error('Prac.toFill() unknown fill code', studyPrac.name, studyPrac.fill);
        return '#888888';
      }
    };

    Prac.prototype.size = function(obj) {
      if (obj != null) {
        return Object.keys(obj).length;
      } else {
        return 0;
      }
    };

    Prac.prototype.saveSvg = function(htmlId, fileName) {
      var downloadLink, svgBlob, svgData, svgUrl;
      svgData = $('#' + htmlId)[0].outerHTML;
      svgBlob = new Blob([svgData], {
        type: "image/svg+xml;charset=utf-8"
      });
      svgUrl = URL.createObjectURL(svgBlob);
      downloadLink = document.createElement("a");
      downloadLink.href = svgUrl;
      downloadLink.download = fileName;
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    };

    Prac.prototype.saveHtml = function(htmlId, fileName) {
      var downloadLink, htmlBlob, htmlData, htmlUrl;
      htmlData = $('#' + htmlId)[0].outerHTML;
      htmlBlob = new Blob([htmlData], {
        type: "text/html;charset=utf-8"
      });
      htmlUrl = URL.createObjectURL(htmlBlob);
      downloadLink = document.createElement("a");
      downloadLink.href = htmlUrl;
      downloadLink.download = fileName;
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    };

    return Prac;

  })();

}).call(this);
