// Generated by CoffeeScript 1.12.2
(function() {
  var Encourage, Prac, Vis;

  Vis = require('js/util/Vis');

  Prac = require('js/prac/Prac');

  Encourage = (function() {
    module.exports = Encourage;

    Prac.Encourage = Encourage;

    function Encourage(ui, spec, prac) {
      this.ui = ui;
      this.spec = spec;
      this.prac = prac;
      this.hasSvg = true;
      this.studies = this.prac.arrange(this.spec.studies);
      this.innovs = this.ui.build.adjacentStudies(this.spec, 'west');
      this.shapes = this.prac.shapes;
    }

    Encourage.prototype.drawSvg = function(g, $g, geom, defs) {
      var a, a1, fill, h, i, key, lay, nodePadding, nodeWidth, r0, ref, ref1, ref2, ref3, study, w, wedgeId, x, xr, y, yl, yr, yt;
      lay = this.shapes.layout(geom, this.spec.column, this.prac.size(this.studies), this.prac.size(this.innovs));
      $g.hide();
      fill = this.prac.toFill(this.spec);
      this.shapes.keyHole(g, lay.xc, lay.yc, lay.xk, lay.yk, lay.ro, lay.hk, fill, lay.stroke);
      yl = lay.yl;
      a1 = lay.a1;
      xr = lay.xr + lay.wr;
      yr = lay.yr;
      ref = this.studies;
      for (key in ref) {
        study = ref[key];
        fill = this.prac.toFill(study);
        wedgeId = this.prac.htmlId(study.name, 'Wedge');
        this.shapes.wedge(g, lay.ro, lay.rs, a1, a1 - lay.da, lay.xc, lay.yc, fill, study.name, wedgeId);
        for (a = i = ref1 = a1 - lay.li, ref2 = a1 - lay.da, ref3 = -lay.ds; ref3 > 0 ? i < ref2 : i > ref2; a = i += ref3) {
          this.shapes.link(g, a, lay.ro, lay.ri, lay.xc, lay.yc, lay.xc, yl, xr, yl, fill, lay.thick);
          yl += lay.dl;
        }
        a1 -= lay.da;
        yr += lay.hr;
      }
      x = 0;
      r0 = lay.ri;
      y = geom.y0 - r0 / 2;
      w = lay.xr + lay.wr;
      h = r0;
      nodeWidth = 24;
      nodePadding = 0;
      yt = geom.y0 + geom.h * 0.5;
      this.shapes.conveySankey(false, defs, g, this.studies, this.innovs, x, y, w, h, nodeWidth, nodePadding, false);
      this.shapes.icon(g, geom.x0, geom.y0, this.spec.name, this.prac.htmlId(this.spec.name, 'IconSvg'), Vis.unicode(this.spec.icon));
      this.shapes.text(g, w - 12, yt, this.spec.name, this.prac.htmlId(this.spec.name, 'TextSvg'), 'black');
      this.shapes.practiceFlow(g, geom, this.spec);
      $g.show();
    };

    Encourage.prototype.innovateStudies = function(g, lay) {
      var fill, innov, key, ref, yi;
      yi = lay.yi;
      ref = this.innovs;
      for (key in ref) {
        innov = ref[key];
        fill = this.prac.toFill(innov);
        this.shapes.rect(g, lay.xi, yi, lay.wi, lay.hi, fill, lay.stroke);
        yi += lay.hi;
      }
    };

    return Encourage;

  })();

}).call(this);
