// Generated by CoffeeScript 1.12.1
(function() {
  var Build, Prac, Stream;

  window.xUtil.fixTestGlobals();

  Stream = require('js/util/Stream');

  Prac = require('js/prac/Prac');

  beforeAll(function() {
    var stream;
    stream = new Stream();
    return Util.noop(stream);
  });

  Stream = require('js/util/Stream');

  Build = require('js/prac/Build');

  beforeAll(function() {
    var build, buildArgs, stream;
    buildArgs = {
      name: 'Muse',
      plane: 'Information',
      op: ''
    };
    stream = new Stream();
    build = new Build(buildArgs, stream);
    return Util.noop(build);
  });

  describe("Build/Build.coffee", function() {
    it("constructor:() ->                                           ", function() {
      return expect(true).toBe(true);
    });
    it("core:( name ) ->                                            ", function() {
      return expect(true).toBe(true);
    });
    it("@logCore:( Core ) ->                                        ", function() {
      return expect(true).toBe(true);
    });
    it("toRows:( rows ) ->                                          ", function() {
      return expect(true).toBe(true);
    });
    it("toColumns:( cols ) ->                                       ", function() {
      return expect(true).toBe(true);
    });
    it("toGroups:( groups ) ->                                      ", function() {
      return expect(true).toBe(true);
    });
    it("toCells:( quels ) ->                                        ", function() {
      return expect(true).toBe(true);
    });
    it("notContext:( key ) ->                                       ", function() {
      return expect(true).toBe(true);
    });
    it("createPlanes:( SpecPractices, SpecStudies ) ->              ", function() {
      return expect(true).toBe(true);
    });
    it("createPractices:( keyPlane, SpecPractices, SpecStudies ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("createStudies:( keyPractice, SpecStudies ) ->               ", function() {
      return expect(true).toBe(true);
    });
    it("createTopics:( keyStudy ) ->                                ", function() {
      return expect(true).toBe(true);
    });
    it("createRoutes:() ->                                          ", function() {
      return expect(true).toBe(true);
    });
    it("queryPractiices:( filter ) ->                               ", function() {
      return expect(true).toBe(true);
    });
    it("queryStudies:( filter ) ->                                  ", function() {
      return expect(true).toBe(true);
    });
    it("practices:( ikw ) -> @Planes[ikw].practices                 ", function() {
      return expect(true).toBe(true);
    });
    it("studies:( ikw ) ->                                          ", function() {
      return expect(true).toBe(true);
    });
    it("practicesSwitch:( ikw ) ->                                  ", function() {
      return expect(true).toBe(true);
    });
    it("conveyTarget:( source ) ->                                  ", function() {
      return expect(true).toBe(true);
    });
    it("conduit:( practice ) ->                                     ", function() {
      return expect(true).toBe(true);
    });
    it("innovateStudies:( practice ) ->                             ", function() {
      return expect(true).toBe(true);
    });
    it("talkUrl:( talk ) ->                                         ", function() {
      return expect(true).toBe(true);
    });
    return it("logPlanes:( Planes ) ->                                     ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("prac/Prac.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("createDoc:( pane ) -> ", function() {
      return expect(true).toBe(true);
    });
    return it("createMuse:( pane ) -> ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("prac/Doc.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("ready:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("subscribe:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("selectContent:( object ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("chooseContent:( geom ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("chooseByName:( geom, name ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("chooseBySize:( geom ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("layout:( geom ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("loadSlide:( geom ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("contains:( str, tok ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("specHasTopic:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("getStudiesOrTopics:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("id:( name, ext ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("create$Center:( pane ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("createSvg:( pane ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("createCenter:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("createTopic:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("createSlide:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("htmlPracticeIcon:( css, icon ) -> ", function() {
      return expect(true).toBe(true);
    });
    return it("htmlTopicIcon:( css, icon ) -> ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("prac/Embrace.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("drawSvg:() -> ", function() {
      return expect(true).toBe(true);
    });
    return it("innovateStudies:() -> ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("prac/Encourage.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("drawSvg:() -> ", function() {
      return expect(true).toBe(true);
    });
    return it("innovateStudies:() -> ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("prac/Innovate.coffee", function() {
    it("constructor() ->                                 ", function() {
      return expect(true).toBe(true);
    });
    it("drawSvg:() ->                                    ", function() {
      return expect(true).toBe(true);
    });
    it("concept:( ) ->                                   ", function() {
      return expect(true).toBe(true);
    });
    it("technology:() ->                                 ", function() {
      return expect(true).toBe(true);
    });
    it("facilitate:() ->                                 ", function() {
      return expect(true).toBe(true);
    });
    it("westInovate:() ->                                ", function() {
      return expect(true).toBe(true);
    });
    it("eastInovate:() ->                                ", function() {
      return expect(true).toBe(true);
    });
    it("northInovate:( filter ) ->                       ", function() {
      return expect(true).toBe(true);
    });
    it("southInovate:( filter ) ->                       ", function() {
      return expect(true).toBe(true);
    });
    it("hexStudy:( study, hexId ) ->                     ", function() {
      return expect(true).toBe(true);
    });
    it("hexPos:( dimension ) ->                          ", function() {
      return expect(true).toBe(true);
    });
    it("hexPath:( fill, g, x0, y0, pathId ) ->           ", function() {
      return expect(true).toBe(true);
    });
    it("hexText:( text, g, x0, y0, textId ) ->           ", function() {
      return expect(true).toBe(true);
    });
    it("hexIcon:( icon, g, x0, y0, iconId ) ->           ", function() {
      return expect(true).toBe(true);
    });
    it("hexClick:( path, text, svgId ) ->                ", function() {
      return expect(true).toBe(true);
    });
    it("hexLoc:( id, j,i, r, fill, text=, icon= ) ->     ", function() {
      return expect(true).toBe(true);
    });
    return it("x0y0:( j, i, r, x0, y0 ) ->                      ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("prac/Shapes.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("constructor: ( @app, @prac ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("ready:() -> ", function() {
      return expect(true).toBe(true);
    });
    it("isWest:(pos) -> ", function() {
      return expect(true).toBe(true);
    });
    it("layout:( geom, pos, ns, ni ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("wedge:( g, r1, r2, a1, a2, x0, y0, fill, text, wedgeId ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("wedgeText:( g, r1, r2, a1, a2, x0, y0, fill, text, wedgeId ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("wedgeClick:( path, wedgeId ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("link:( g, a, ra, rb, xc, yc, xd, yd, xe, ye, stroke, thick ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("curve:( g, data, stroke, thick ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("keyHole:( g, xc, yc, xs, ys, ro, ri, fill, stroke='none', thick=0 ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("poly:( g, data, fill ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("rect:( g, x0, y0, w, h, fill, stroke, text='' ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("round:( g, x0, y0, w, h, rx, ry, fill, stroke ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("elipse:( g, cx, cy, rx, ry, fill, stroke ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("circle:( g, cx, cy, r, fill, stroke ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("pathPlot:( g, stroke, thick, d )-> ", function() {
      return expect(true).toBe(true);
    });
    it("rad:( deg ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("degSVG:( deg ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("radD3:( deg ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("degD3:( rad ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("cos:( deg ) -> ", function() {
      return expect(true).toBe(true);
    });
    it("sin:( deg ) -> ", function() {
      return expect(true).toBe(true);
    });
    return it("textFill:( fill, dark='#000000', light='#FFFFFF') -> ", function() {
      return expect(true).toBe(true);
    });
  });

}).call(this);
