// Generated by CoffeeScript 1.6.3
(function() {
  var $, UI, Viewer, Vis, d3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  d3 = require('d3');

  Vis = require('js/util/Vis');

  UI = require('js/ui/UI');

  Viewer = (function() {
    module.exports = Viewer;

    function Viewer(pane, page, prac) {
      this.pane = pane;
      this.page = page;
      this.prac = prac;
      this.slide = __bind(this.slide, this);
      this.mathbox = __bind(this.mathbox, this);
      this.plot = __bind(this.plot, this);
      this.pivot = __bind(this.pivot, this);
      this.oper = __bind(this.oper, this);
      this.inven = __bind(this.inven, this);
      this.connect = __bind(this.connect, this);
      this.study = __bind(this.study, this);
      this.studies = __bind(this.studies, this);
      this.radial = __bind(this.radial, this);
      this.overview = __bind(this.overview, this);
      this.tree = __bind(this.tree, this);
      this.svg = __bind(this.svg, this);
      this.center = __bind(this.center, this);
      this.centerNameIcon = __bind(this.centerNameIcon, this);
      this.connectLayout = __bind(this.connectLayout, this);
      this.studyLayout = __bind(this.studyLayout, this);
      this.studiesLayout = __bind(this.studiesLayout, this);
      this.radialLayout = __bind(this.radialLayout, this);
      this.overviewLayout = __bind(this.overviewLayout, this);
      this.treeLayout = __bind(this.treeLayout, this);
      this.svgLayout = __bind(this.svgLayout, this);
      this.slideLayout = __bind(this.slideLayout, this);
      this.mathboxLayout = __bind(this.mathboxLayout, this);
      this.plotLayout = __bind(this.plotLayout, this);
      this.pivotLayout = __bind(this.pivotLayout, this);
      this.operLayout = __bind(this.operLayout, this);
      this.invenLayout = __bind(this.invenLayout, this);
      this.centerLayout = __bind(this.centerLayout, this);
      this.layout = __bind(this.layout, this);
      this.spec = this.pane.spec;
      this.name = this.spec.name;
      this.contents = this.createContents(this.spec);
      this.$ = UI.$empty;
      this.css = "ikw-pane";
      this.build = this.pane.ui.build;
      this.ub = UI.Build;
      this.showArray = [this.ub.SelectRow, this.ub.SelectGroup, this.ub.SelectTopic, this.ub.SelectItems];
      this.studyName = 'None';
      this.toggleItems = false;
    }

    Viewer.prototype.createContents = function(spec) {
      return {
        center: {
          name: 'Center',
          has: true,
          layout: this.centerLayout,
          create: this.center,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        svg: {
          name: 'Svg',
          has: this.hasSvg(),
          layout: this.svgLayout,
          create: this.svg,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          defs: 0,
          svg: 0,
          g: 0,
          $g: UI.$empty,
          gId: this.htmlId('G'),
          draw: void 0
        },
        tree: {
          name: 'Tree',
          has: this.hasStudies(),
          layout: this.treeLayout,
          create: this.tree,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          defs: 0,
          svg: 0,
          g: 0,
          $g: UI.$empty,
          gId: this.htmlId('G'),
          draw: void 0
        },
        radial: {
          name: 'Radial',
          has: this.hasStudies(),
          layout: this.radialLayout,
          create: this.radial,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          defs: 0,
          svg: 0,
          g: 0,
          $g: UI.$empty,
          gId: this.htmlId('G'),
          draw: void 0
        },
        overview: {
          name: 'Overview',
          has: true,
          layout: this.overviewLayout,
          create: this.overview,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          defs: 0,
          svg: 0,
          g: 0,
          $g: UI.$empty,
          gId: this.htmlId('G'),
          draw: void 0
        },
        studies: {
          name: 'Studies',
          has: this.hasStudies(),
          layout: this.studiesLayout,
          create: this.studies,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          $topics: UI.$empty,
          $items: UI.$empty
        },
        study: {
          name: 'Study',
          has: this.hasStudies(),
          layout: this.studyLayout,
          create: this.study,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          $topics: UI.$empty,
          $items: UI.$empty
        },
        topic: {
          name: 'Topic',
          has: this.hasStudies(),
          layout: this.studyLayout,
          create: this.study,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          $topics: UI.$empty,
          $items: UI.$empty
        },
        items: {
          name: 'Items',
          has: this.hasStudies(),
          layout: this.studyLayout,
          create: this.study,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty,
          $topics: UI.$empty,
          $items: UI.$empty
        },
        inven: {
          name: 'Inven',
          has: true,
          layout: this.invenLayout,
          create: this.inven,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        oper: {
          name: 'Oper',
          has: true,
          layout: this.operLayout,
          create: this.oper,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        connect: {
          name: 'Connect',
          has: true,
          layout: this.connectLayout,
          create: this.connect,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        pivot: {
          name: 'Pivot',
          has: true,
          layout: this.pivotLayout,
          create: this.pivot,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        plot: {
          name: 'Plot',
          has: true,
          layout: this.plotLayout,
          create: this.plot,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        mathbox: {
          name: 'MathBox',
          has: true,
          layout: this.mathboxLayout,
          create: this.mathbox,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        },
        slide: {
          name: 'Slide',
          has: true,
          layout: this.slideLayout,
          create: this.slide,
          $: UI.$empty,
          $on: UI.$empty,
          studies: {},
          $btn: UI.$empty
        }
      };
    };

    Viewer.prototype.ready = function() {
      this.$ = this.pane.$;
      this.contents.svg.$.hide();
    };

    Viewer.prototype.getContent = function(contentName) {
      var ckey, content, _ref;
      _ref = this.contents;
      for (ckey in _ref) {
        if (!__hasProp.call(_ref, ckey)) continue;
        content = _ref[ckey];
        if (content.has) {
          if (content.name === contentName) {
            return content;
          }
        }
      }
      return this.contents.center;
    };

    Viewer.prototype.assignNames = function(msg) {
      if (msg.intent === this.ub.SelectStudy) {
        this.studyName = msg.name;
      }
    };

    Viewer.prototype.layout = function(geom, msg) {
      var boun, c, _ref;
      this.assignNames(msg);
      boun = this.generateBoun(geom, msg);
      c = this.getContent(msg.content);
      if (c.has && UI.isEmpty(c.$) || msg.content === 'Study' || msg.content === 'Topic' || msg.content === 'Items') {
        _ref = c.create(boun), c.$ = _ref[0], c.$on = _ref[1], c.studies = _ref[2];
        this.$.append(c.$);
        this.page.publish(c.$on);
        if (!Util.isObjEmpty(c.studies)) {
          this.page.publishJQueryObjects(c.studies, this.ub.SelectStudy);
        }
      }
      this.hideAll();
      c.layout(boun);
      c.$.show();
    };

    Viewer.prototype.generateBoun = function(geom, msg) {
      var b, pc;
      b = {};
      b.geom = geom;
      b.msg = msg;
      pc = 0.42;
      b.w = geom.w * pc / geom.s;
      b.h = geom.h * pc / geom.s;
      b.wp = geom.wp;
      b.hp = geom.hp;
      b.wg = geom.w;
      b.hg = geom.h;
      b.left = geom.x0 - b.w / 2;
      b.top = geom.y0 - b.h / 2;
      b.sf = geom.s;
      b.sx = geom.sx;
      b.sy = geom.sy;
      b.intent = msg.intent;
      b.iconSize = Math.min(b.w, b.h) * b.sf;
      b.fontSize = this.calcFontSize(b.intent, b.iconSize, b.msg);
      return this.adjustBoun(b, msg);
    };

    Viewer.prototype.adjustBoun = function(b, msg) {
      var isCol, isRow;
      isCol = Util.inArray(['Embrace', 'Innovate', 'Encourage'], msg.name);
      isRow = Util.inArray(['Learn', 'Do', 'Share'], msg.name);
      if (isCol) {
        b.wg = b.wg / 3;
        b.sx = b.sx / 3;
      }
      if (isRow) {
        b.hg = b.hg / 3;
        b.sy = b.sy / 3;
      }
      return b;
    };

    Viewer.prototype.calcFontSize = function(intent, iconSize, msg) {
      var s;
      s = (function() {
        switch (intent) {
          case this.ub.SelectRow:
            return 0.6;
          case this.ub.SelectGroup:
            return 0.4;
          case this.ub.SelectPractice:
            if (this.toggleItems) {
              return 0.3;
            } else {
              return 0.7;
            }
            break;
          case this.ub.SelectStudy:
            return 0.7;
          case this.ub.SelectTopic:
            return 0.5;
          case this.ub.SelectItems:
            return 0.5;
          default:
            return 0.6;
        }
      }).call(this);
      if (msg.content === 'Center') {
        s *= 1.35;
      }
      return s * Math.max(iconSize * 0.25, 13);
    };

    Viewer.prototype.centerLayout = function(boun) {
      return this.layoutCenter(this.contents.center, boun);
    };

    Viewer.prototype.invenLayout = function(boun) {
      return this.layoutCenter(this.contents.inven, boun);
    };

    Viewer.prototype.operLayout = function(boun) {
      return this.layoutCenter(this.contents.oper, boun);
    };

    Viewer.prototype.pivotLayout = function(boun) {
      return this.layoutCenter(this.contents.pivot, boun);
    };

    Viewer.prototype.plotLayout = function(boun) {
      return this.layoutCenter(this.contents.plot, boun);
    };

    Viewer.prototype.mathboxLayout = function(boun) {
      return this.layoutCenter(this.contents.mathbox, boun);
    };

    Viewer.prototype.slideLayout = function(boun) {
      return this.layoutCenter(this.contents.slide, boun);
    };

    Viewer.prototype.svgLayout = function(boun) {
      var c;
      c = this.contents.svg;
      c.svg.attr("width", boun.wg).attr("height", boun.hg);
      c.g.attr('transform', "scale(" + (boun.sx + ',' + boun.sy) + ")");
    };

    Viewer.prototype.treeLayout = function(boun) {
      var c;
      c = this.contents.tree;
      c.svg.attr("width", boun.wg).attr("height", boun.hg);
      c.g.attr('transform', "scale(" + boun.sx + "," + boun.sy + ")");
    };

    Viewer.prototype.overviewLayout = function(boun) {
      var c;
      c = this.contents.overview;
      c.svg.attr("width", boun.wg).attr("height", boun.hg);
      c.g.attr('transform', "scale(.75,.75) translate(" + ((boun.wg / 2 + 40) + ',' + (boun.hg / 2 + 90)) + ")");
    };

    Viewer.prototype.radialLayout = function(boun) {
      var c;
      c = this.contents.radial;
      c.svg.attr("width", boun.wg).attr("height", boun.hg);
      c.g.attr('transform', "scale(1,1) translate(" + ((boun.wg / 2 + 40) + ',' + (boun.hg / 2 + 90)) + ")");
    };

    Viewer.prototype.studiesLayout = function(boun) {
      var c;
      c = this.contents.studies;
      c.$.css({
        'font-size': boun.fontSize
      });
      this.showTopicItems(boun, c);
    };

    Viewer.prototype.studyLayout = function(boun) {
      var c;
      c = this.contents.study;
      c.$.css({
        fontSize: boun.fontSize
      });
      this.showTopicItems(boun, c);
    };

    Viewer.prototype.showTopicItems = function(boun, c) {
      var showItems, showTopics;
      showTopics = true;
      showItems = Util.inArray(this.showArray, boun.intent) || this.toggleItems;
      if (showTopics) {
        c.$topics.show();
      } else {
        c.$topics.hide();
      }
      if (showItems) {
        c.$items.show();
      } else {
        c.$items.hide();
      }
      if (boun.intent === this.ub.SelectPractice) {
        this.toggleItems = !this.toggleItems;
      }
    };

    Viewer.prototype.connectLayout = function(boun) {
      return Util.noop(boun);
    };

    Viewer.prototype.layoutCenter = function(c, b) {
      c.$.css({
        transform: "scale(" + b.s + ")"
      });
      c.$.find('.ikw-pane-center-div').css({
        fontSize: b.fontSize
      });
      c.$.find('.ikw-pane-icon').css({
        fontSize: b.iconSize,
        display: 'block'
      });
    };

    Viewer.prototype.hideAll = function() {
      var content, key, _ref;
      _ref = this.contents;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        content = _ref[key];
        if (content.has && UI.isElem(content.$)) {
          if (Util.isFunc(content.$.hide)) {
            content.$.hide();
          } else {
            Util.error('Viewer.hideAll()', content.name);
          }
        }
      }
    };

    Viewer.prototype.centerNameIcon = function(content, name, icon, fill, boun) {
      var $ht, htmlId, style;
      Util.noop(boun);
      htmlId = this.htmlId(content.name);
      style = "";
      if (content.name !== 'Center') {
        style = "style=\"background-color:" + fill + "; border-radius:12px; color:black;\" ";
      }
      $ht = $("<div   class=\"" + this.css + "-center\" id=\"" + htmlId + "\">\n     <div class=\"" + this.css + "-center-div\" " + style + ">\n       " + (this.pracIcon(icon)) + "\n     <div class=\"" + this.css + "-text\">" + (this.toName(name)) + "</div>\n   </div>\n</div>");
      return [$ht, $ht, {}];
    };

    Viewer.prototype.center = function(boun) {
      return this.centerNameIcon(this.contents.center, this.spec.name, this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.svg = function(boun) {
      var content, gId, svgId;
      content = this.contents.svg;
      svgId = this.htmlId('Svg');
      gId = this.htmlId('SvgG');
      content.svg = d3.select('#' + this.pane.htmlId).append("svg:svg").attr("id", svgId).attr("width", boun.wp).attr("height", boun.hp).attr("xmlns", "http://www.w3.org/2000/svg");
      content.defs = content.svg.append("svg:defs");
      content.g = content.svg.append("svg:g").attr("id", gId);
      content.$ = this.pane.$.find('#' + svgId);
      content.$g = this.pane.$.find('#' + gId);
      content.draw = this.prac.createDraw(this.pane, content, content.g, boun.wp, boun.hp);
      content.draw.drawSvg(content.g, content.$g, boun.geom, content.defs);
      content.htmlId = svgId;
      return [content.$, content.$, {}];
    };

    Viewer.prototype.tree = function(boun) {
      var content, gId, svgId;
      content = this.contents.tree;
      svgId = this.htmlId('Tree');
      gId = this.htmlId('TreeG');
      content.svg = d3.select('#' + this.pane.htmlId).append("svg:svg").attr("id", svgId).attr("width", boun.wp).attr("height", boun.hp).attr("xmlns", "http://www.w3.org/2000/svg");
      content.defs = content.svg.append("svg:defs");
      content.g = content.svg.append("svg:g").attr("id", gId);
      content.$ = this.pane.$.find('#' + svgId);
      content.$g = this.pane.$.find('#' + gId);
      content.draw = this.prac.createDraw(this.pane, content, content.g, boun.wp, boun.hp);
      return [content.$, content.$, {}];
    };

    Viewer.prototype.overview = function(boun) {
      var content, gId, svgId;
      content = this.contents.overview;
      svgId = this.htmlId('Overview');
      gId = this.htmlId('OverviewG');
      content.svg = d3.select('#' + this.pane.htmlId).append("svg:svg").attr("id", svgId).attr("width", boun.wp).attr("height", boun.hp).attr("xmlns", "http://www.w3.org/2000/svg");
      content.defs = content.svg.append("svg:defs");
      content.g = content.svg.append("svg:g").attr("id", gId);
      content.$ = this.pane.$.find('#' + svgId);
      content.$g = this.pane.$.find('#' + gId);
      content.draw = this.prac.createDraw(this.pane, content, content.g, boun.wp, boun.hp);
      return [content.$, content.$, {}];
    };

    Viewer.prototype.radial = function(boun) {
      var content, gId, svgId;
      content = this.contents.radial;
      svgId = this.htmlId('Radial');
      gId = this.htmlId('RadialG');
      content.svg = d3.select('#' + this.pane.htmlId).append("svg:svg").attr("id", svgId).attr("width", boun.wp).attr("height", boun.hp).attr("xmlns", "http://www.w3.org/2000/svg");
      content.defs = content.svg.append("svg:defs");
      content.g = content.svg.append("svg:g").attr("id", gId);
      content.$ = this.pane.$.find('#' + svgId);
      content.$g = this.pane.$.find('#' + gId);
      content.draw = this.prac.createDraw(this.pane, content, content.g, boun.wp, boun.hp);
      return [content.$, content.$, {}];
    };

    Viewer.prototype.studies = function(boun) {
      var $ht, $on, dir, dirs, id, key, studs;
      Util.noop(boun);
      id = this.htmlId('Studies');
      dirs = this.dirStudies();
      studs = {};
      $ht = $("<div class=\"" + this.css + "-studies\" id=\"" + id + "\" ></div>");
      $on = this.studyPrac(this.spec, id);
      $ht.append($on);
      for (key in dirs) {
        dir = dirs[key];
        if (dir.name !== 'None') {
          studs[dir.name] = this.studyDir(dir, id);
        }
        $ht.append(studs[dir.name]);
      }
      this.contents.studies.$topics = $ht.find('.' + this.css + '-topin-ul');
      this.contents.studies.$items = $ht.find('.' + this.css + '-item-ul');
      this.contents.studies.htmlId = id;
      return [$ht, $on, studs];
    };

    Viewer.prototype.study = function(boun) {
      var c, dir, id, study;
      if (this.studyName === 'None') {
        Util.log('Viewer.study None', boun.msg);
      }
      c = this.getContent(this.studyName);
      if (UI.isElem(c.$)) {
        c.$.remove();
      }
      id = this.htmlId('Study' + this.studyName);
      study = this.page.getStudy(this.studyName);
      dir = {
        name: this.studyName,
        fill: this.prac.toFill(study),
        icon: study.icon,
        dir: 'choice',
        purpose: study.purpose,
        study: study
      };
      c.$ = this.studyDir(dir, id);
      return [c.$, c.$, {}];
    };

    Viewer.prototype.studyPrac = function(spec, id) {
      var dir, tag, text, _ref;
      _ref = this.spec.learn != null ? ['pracd', 'span', this.toName(spec.name)] : ['prac', 'div', this.toName(spec.name)], dir = _ref[0], tag = _ref[1], text = _ref[2];
      return $("<div     class=\"" + this.css + "-study-" + dir + "\" id=\"" + (id + dir) + "\" >\n  <div   class=\"" + this.css + "-study-center\" style=\"background-color:" + (this.prac.toFill(this.spec)) + ";\" id=\"" + id + "\">" + (this.pracIcon(this.spec.icon)) + "\n    <" + tag + " class=\"" + this.css + "-text\" title=\"" + spec.purpose + "\">" + text + "</" + tag + ">\n  </div>\n</div>");
    };

    Viewer.prototype.studyDir = function(dir, id) {
      var align, html, name, txTag, _ref;
      name = Util.toName(dir.name);
      _ref = ['div', 'center'], txTag = _ref[0], align = _ref[1];
      html = "<div   class=\"" + this.css + "-study-" + dir.dir + "\"  id=\"" + (id + name) + "\" >";
      html += "  <div class=\"" + this.css + "-study-" + align + "\" style=\"background-color:" + dir.fill + ";\" id=\"" + (id + name + 'icon') + "\">\n" + (this.pracIcon(dir.icon)) + "<" + txTag + " class=\"" + this.css + "-text\" title=\"" + dir.purpose + "\">" + name + "</" + txTag + ">";
      html += this.studyTopics(dir.study, 1, 10);
      html += "  </div>";
      html += "</div>";
      return $(html);
    };

    Viewer.prototype.studyTopics = function(study, beg, end) {
      var html, i, tkey, topic, topicLi, _ref;
      i = 1;
      html = "<ul class=\"" + this.css + "-topin-ul\">";
      _ref = study.topics;
      for (tkey in _ref) {
        topic = _ref[tkey];
        topicLi = (topic != null ? topic.member : void 0) === 'ten' ? "-topin-lib" : "-topin-li";
        if (beg <= i && i <= end) {
          html += "<li   class=\"" + this.css + topicLi + "\" title=\"" + topic.purpose + "\">" + (this.htmlIcon(topic.icon)) + "\n<span class=\"" + this.css + "-topin-text\">" + (this.toName(topic.name)) + "</span>";
          if (this.hasItems(topic)) {
            html += this.topicItems(topic);
          }
          html += "</li>";
        }
        i++;
      }
      return html += "</ul>";
    };

    Viewer.prototype.topicItems = function(topic) {
      var html, item, itemLi, key, _ref;
      html = "<ul class=\"" + this.css + "-item-ul\">";
      _ref = topic.items;
      for (key in _ref) {
        item = _ref[key];
        itemLi = (item != null ? item.member : void 0) === 'ten' ? "-item-lib" : "-item-li";
        html += "<li class=\"" + this.css + itemLi + "\" title=\"" + item.purpose + "\">\n    " + (this.htmlIcon(item.icon)) + "\n    <span class=\"" + this.css + "-item-text\">" + (this.toName(item.name)) + "</span>\n</li>";
      }
      html += "</ul>";
      return html;
    };

    Viewer.prototype.connect = function(boun) {
      var $ht, $on, connectId;
      Util.noop(boun);
      connectId = this.htmlId('Connect');
      $ht = $("<div   class=\"" + this.css + "-connect\"           id=\"" + connectId + "\" >\n  <div class=\"" + this.css + "-connect-west\" ><ul id=\"" + connectId + "West\"  ></ul></div>\n  <div class=\"" + this.css + "-connect-east\" ><ul id=\"" + connectId + "East\"  ></ul></div>\n  <div class=\"" + this.css + "-connect-north\"><ul id=\"" + connectId + "North\" ></ul></div>\n  <div class=\"" + this.css + "-connect-south\"><ul id=\"" + connectId + "South\" ></ul></div>\n  <div class=\"" + this.css + "-connect-prev\" ><ul id=\"" + connectId + "Prev\"  ></ul></div>\n  <div class=\"" + this.css + "-connect-next\" ><ul id=\"" + connectId + "Next\"  ></ul></div>\n</div>");
      $on = $ht.find('#' + connectId);
      return [$ht, $on, {}];
    };

    Viewer.prototype.inven = function(boun) {
      return this.centerNameIcon(this.contents.inven, 'Inven', this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.oper = function(boun) {
      return this.centerNameIcon(this.contents.oper, 'Oper', this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.pivot = function(boun) {
      return this.centerNameIcon(this.contents.pivot, 'Pivot', this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.plot = function(boun) {
      return this.centerNameIcon(this.contents.plot, 'Plot', this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.mathbox = function(boun) {
      return this.centerNameIcon(this.contents.mathbox, 'MathBox', this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.slide = function(boun) {
      if (this.contents.slide.has && (this.spec.page != null)) {
        this.doSlide();
      }
      return this.centerNameIcon(this.contents.slide, 'Slide', this.spec.icon, this.prac.toFill(this.spec), boun);
    };

    Viewer.prototype.doSlide = function() {
      var book, host, name, url;
      host = 'http://localhost:63342/ui/';
      book = this.pane.ui.plane.spec.book;
      url = host + book + this.spec.page;
      name = this.toName(this.spec.name);
      Util.log('Viewer.doSlide()', url, name);
      window.open(url, name);
    };

    Viewer.prototype.htmlId = function(contentName) {
      return Util.getHtmlId(this.spec.name, this.spec.plane, contentName);
    };

    Viewer.prototype.contains = function(str, tok) {
      return (str != null) && str.indexOf(tok) !== -1;
    };

    Viewer.prototype.createTable = function() {
      var tableId;
      tableId = this.contents.table.htmlId;
      return "<div class=\"" + this.css + "-table\" id=\"" + tableId + "\"></div>";
    };

    Viewer.prototype.topicHtml = function(topic) {
      return "<li class=\"" + this.css + "-topic-li\">\n" + (this.htmlIcon(topic.icon)) + "\n<span class=\"" + this.css + "-topic-text\">" + (this.toName(topic.name)) + "</span>";
    };

    Viewer.prototype.studyHtml = function(study) {
      return "<li class=\"" + this.css + "-study-li\">\n" + (this.htmlIcon(study.icon)) + "\n<span class=\"" + this.css + "-topic-text\">" + (this.toName(study.name)) + "</span>";
    };

    Viewer.prototype.itemHtml = function(item) {
      return "<li class=\"" + this.css + "-item-li\">\n" + (this.htmlIcon(item.icon)) + "\n<span class=\"" + this.css + "-item-text\">" + (this.toName(item.name)) + "</span></li>";
    };

    Viewer.prototype.createSlide = function() {
      var slideId;
      slideId = this.contents.slide.htmlId;
      return "<div id=\"" + slideId + "\" class=\"" + this.css + "-slide reveal\"></div>";
    };

    Viewer.prototype.createGroup = function() {
      var groupId;
      groupId = this.contents.group.htmlId;
      return "<div     class=\"" + this.css + "-center\"     id=\"" + groupId + "\">\n   <div   class=\"" + this.css + "-center-div\">\n     " + (this.htmlPracticeIcon(this.css, this.icon, true)) + "\n     <div class=\"" + this.css + "-text\">" + (this.toName(this.name)) + "</div>\n  </div>\n</div>";
    };

    Viewer.prototype.pracIcon = function(icon, isGroup) {
      var id;
      if (isGroup == null) {
        isGroup = false;
      }
      if (!Util.isStr(icon)) {
        Util.error('Viewer.practIcon()', this.name);
      }
      id = isGroup ? this.htmlId(this.name, 'GroupIcon') : this.htmlId(this.name, 'Icon');
      if (this.contains(icon, 'fa')) {
        return "<i id=\"" + id + "\" class=\"" + this.css + "-icon fa " + icon + "\"></i>";
      } else if (this.contains(icon, '.png') || this.contains(icon, '.jpg') || this.contains(icon, '.svg')) {
        return "<img id=\"" + id + "\" src=\"img/icon/" + icon + "\" class=\"" + this.css + "-img\">";
      } else {
        return "<div id=\"" + id + "\" class=\"" + this.css + "\">" + icon + "</div>";
      }
    };

    Viewer.prototype.htmlIcon = function(icon) {
      if (this.contains(icon, 'fa')) {
        return "<i class=\"" + this.css + "-topic-icon fa " + icon + "\"></i>";
      } else {
        return "<i class=\"" + this.css + "-topic-icon fa fa-circle\"></i>";
      }
    };

    Viewer.prototype.studyIcon = function(icon) {
      if (this.contains(icon, 'fa')) {
        return "<i class=\"" + this.css + "-study-icon fa " + icon + "\"></i>";
      } else {
        return "<i class=\"" + this.css + "-study-icon fa fa-circle\"></i>";
      }
    };

    Viewer.prototype.isPractice = function() {
      return this.spec.column != null;
    };

    Viewer.prototype.dirStudies = function() {
      var dir, key, none, study, _ref;
      none = {
        name: 'None',
        fill: 'None',
        icon: 'None',
        hsv: 'None',
        dir: 'None',
        purpose: 'None',
        study: 'None'
      };
      dir = {
        prac: none,
        east: none,
        west: none,
        north: none,
        south: none,
        nw: none,
        ne: none,
        se: none,
        sw: none,
        pracd: none,
        eastd: none,
        westd: none,
        northd: none,
        southd: none,
        nwd: none,
        ned: none,
        sed: none,
        swd: none,
        choice: none
      };
      _ref = this.spec.studies;
      for (key in _ref) {
        study = _ref[key];
        dir[study.dir] = {
          name: study.name,
          fill: this.prac.toFill(study),
          icon: study.icon,
          dir: study.dir,
          purpose: study.purpose,
          study: study
        };
      }
      return dir;
    };

    Viewer.prototype.hasSvg = function() {
      return this.spec.plane !== 'Hues';
    };

    Viewer.prototype.hasStudies = function() {
      var key, study, _ref;
      _ref = this.spec.studies;
      for (key in _ref) {
        study = _ref[key];
        return true;
      }
      return false;
    };

    Viewer.prototype.anyTopics = function() {
      var skey, study, tkey, topic, _ref, _ref1;
      _ref = this.spec.studies;
      for (skey in _ref) {
        study = _ref[skey];
        _ref1 = study.topics;
        for (tkey in _ref1) {
          topic = _ref1[tkey];
          return true;
        }
        false;
      }
    };

    Viewer.prototype.hasTopics = function(study) {
      var tkey, topic, _ref;
      _ref = study.topics;
      for (tkey in _ref) {
        topic = _ref[tkey];
        return true;
      }
      return false;
    };

    Viewer.prototype.hasItems = function(topic) {
      var ikey, item, _ref;
      _ref = topic.items;
      for (ikey in _ref) {
        item = _ref[ikey];
        return true;
      }
      return false;
    };

    Viewer.prototype.toName = function(name) {
      return Util.toName(name);
    };

    return Viewer;

  })();

}).call(this);
