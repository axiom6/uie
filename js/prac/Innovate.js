// Generated by CoffeeScript 1.12.2
(function() {
  var Innovate, Prac, Vis, d3;

  d3 = require('d3');

  Vis = require('js/util/Vis');

  Prac = require('js/prac/Prac');

  Innovate = (function() {
    module.exports = Innovate;

    Prac.Innovate = Innovate;

    function Innovate(ui, spec, prac) {
      this.ui = ui;
      this.spec = spec;
      this.prac = prac;
      this.hasSvg = true;
      this.studies = this.spec.studies;
      this.shapes = this.prac.shapes;
      this.angs = [0, 60, 120, 180, 240, 300, 360];
      this.angs30 = [30, 90, 150, 210, 270, 330, 30];
      this.t = 24;
      this.xh = 0;
      this.yh = 0;
      this.r = 0;
      this.thick = 1;
      this.stroke = 'black';
    }

    Innovate.prototype.drawSvg = function(g, $g, geom, defs) {
      var key, ref, study, xt, yt;
      Util.noop(defs);
      this.lay = this.shapes.layout(geom, this.spec.column, this.prac.size(this.studies), this.prac.size(this.studies));
      this.colorRing = Vis.toRgbHsvStr([90, 55, 90]);
      this.colorBack = 'rgba(97, 56, 77, 1.0 )';
      $g.hide();
      switch (this.spec.row) {
        case 'Learn':
          this.concept(g, geom);
          break;
        case 'Do':
          this.technology(g, geom);
          break;
        case 'Share':
          this.facilitate(g, geom);
          break;
        default:
          this.technology(g, geom);
      }
      ref = this.studies;
      for (key in ref) {
        study = ref[key];
        this.hexStudy(g, geom, study);
      }
      xt = geom.x0 - 75;
      yt = geom.y0 + geom.h * 0.30;
      this.shapes.rect(g, xt, yt, 150, this.t, 'none', 'none', this.spec.name, 0.865);
      $g.show();
    };

    Innovate.prototype.concept = function(g, geom) {
      var ref, t, t1, t2, t3, t4;
      ref = [this.t, this.t, this.t * 2, this.t * 4, this.t * 2], t = ref[0], t1 = ref[1], t2 = ref[2], t3 = ref[3], t4 = ref[4];
      this.shapes.round(g, t, t1, geom.w - t * 2, geom.h - t4, t, t, this.colorRing, 'none');
      this.shapes.round(g, t * 2, t2, geom.w - t * 4, geom.h - t3, t, t, this.colorBack, 'none');
      this.eastInovate(g, geom);
      this.westInovate(g, geom);
      this.southInovate(g, geom, function(study) {
        return study.dir !== 'north';
      });
    };

    Innovate.prototype.technology = function(g, geom) {
      var ref, t, t1, t2, t3, t4, xt, yt;
      ref = [this.t, this.t, this.t * 2, this.t * 4, this.t * 2], t = ref[0], t1 = ref[1], t2 = ref[2], t3 = ref[3], t4 = ref[4];
      this.shapes.round(g, t, t1, geom.w - t * 2, geom.h - t4, t, t, this.colorRing, 'none');
      this.shapes.round(g, t * 2, t2, geom.w - t * 4, geom.h - t3, t, t, this.colorBack, 'none');
      this.eastInovate(g, geom);
      this.westInovate(g, geom);
      this.northInovate(g, geom, function(study) {
        return study.dir !== 'south';
      });
      this.southInovate(g, geom, function(study) {
        return study.dir !== 'north';
      });
      if (this.spec.name === 'OpenSource') {
        xt = geom.x0 - 65;
        yt = geom.y0 - geom.h * 0.455;
        this.shapes.rect(g, xt, yt, 150, this.t, 'none', 'none', "Architect Engineer Construct", 0.75);
      }
    };

    Innovate.prototype.facilitate = function(g, geom) {
      var ref, t, t1, t2, t3, t4;
      ref = [this.t, this.t, this.t * 2, this.t * 4, this.t * 2], t = ref[0], t1 = ref[1], t2 = ref[2], t3 = ref[3], t4 = ref[4];
      this.shapes.round(g, t, t1, geom.w - t * 2, geom.h - t4, t, t, this.colorRing, 'none');
      this.shapes.round(g, t * 2, t2, geom.w - t * 4, geom.h - t3, t, t, this.colorBack, 'none');
      this.eastInovate(g, geom);
      this.westInovate(g, geom);
      this.northInovate(g, geom, function(study) {
        return study.dir !== 'south';
      });
    };

    Innovate.prototype.westInovate = function(g, geom) {
      var fill, h, key, r0, ref, study, w, x0, y0;
      r0 = this.lay.ri;
      w = 24;
      h = r0 / this.prac.size(this.studies);
      x0 = geom.w - w;
      y0 = geom.y0 - r0 / 2;
      ref = this.studies;
      for (key in ref) {
        study = ref[key];
        fill = this.prac.toFill(study);
        this.shapes.rect(g, x0, y0, w, h, fill, 'none');
        y0 += h;
      }
    };

    Innovate.prototype.eastInovate = function(g, geom) {
      var fill, h, key, r0, ref, study, w, x0, y0;
      r0 = this.lay.ri;
      w = 24;
      h = r0 / this.prac.size(this.studies);
      x0 = 0;
      y0 = geom.y0 - r0 / 2;
      ref = this.studies;
      for (key in ref) {
        study = ref[key];
        fill = this.prac.toFill(study);
        this.shapes.rect(g, x0, y0, w, h, fill, 'none');
        y0 += h;
      }
    };

    Innovate.prototype.northInovate = function(g, geom, filter) {
      var dx, fill, h, key, ref, study, w, x0, y0;
      w = 18;
      h = 24;
      dx = geom.r * 1.5;
      x0 = geom.x0 - dx - w / 2;
      y0 = 0;
      ref = this.studies;
      for (key in ref) {
        study = ref[key];
        if (!(filter(study))) {
          continue;
        }
        fill = this.prac.toFill(study);
        this.shapes.rect(g, x0, y0, w, h, fill, 'none');
        x0 += dx;
      }
    };

    Innovate.prototype.southInovate = function(g, geom, filter) {
      var dx, fill, h, key, ref, study, w, x0, y0;
      w = 18;
      h = 24;
      dx = geom.r * 1.5;
      x0 = geom.x0 - dx - w / 2;
      y0 = geom.h - h;
      ref = this.studies;
      for (key in ref) {
        study = ref[key];
        if (!(filter(study))) {
          continue;
        }
        fill = this.prac.toFill(study);
        this.shapes.rect(g, x0, y0, w, h, fill, 'none');
        x0 += dx;
      }
    };

    Innovate.prototype.hexStudy = function(g, geom, study) {
      var dx, dy, fill, i, j, ref, uc, x, x0, y, y0, yh;
      this.r = geom.r;
      dx = this.r * 1.5;
      dy = this.r * 2.0 * Prac.cos30;
      x0 = geom.x0;
      y0 = geom.y0;
      ref = this.hexPos(study.dir), j = ref[0], i = ref[1];
      yh = j % 2 === 0 ? 0 : this.r * Prac.cos30;
      x = j * dx + x0;
      y = -i * dy + y0 + yh;
      fill = this.prac.toFill(study);
      uc = Vis.unicode(study.icon);
      this.hexPath(fill, g, x, y, this.prac.htmlId(study.name, 'HexPath'));
      this.hexText(study.name, g, x, y, this.prac.htmlId(study.name, 'HexText'));
      this.hexIcon(uc, g, x, y, this.prac.htmlId(study.name, 'HexIcon'));
    };

    Innovate.prototype.hexPos = function(dir) {
      var ref;
      if (this.ui.plane.id === 'Data' && ((ref = this.spec) != null ? ref.svg : void 0) === 'Data') {
        return this.hexPosData(dir);
      } else {
        return this.hexPosTier(dir);
      }
    };

    Innovate.prototype.hexPosTier = function(dir) {
      switch (dir) {
        case 'west':
        case 'westd':
          return [-1, 0.5];
        case 'north':
        case 'northd':
          return [0, 0.5];
        case 'east':
        case 'eastd':
          return [1, 0.5];
        case 'south':
        case 'southd':
          return [0, -0.5];
        case 'nw':
        case 'nwd':
          return [-1, 1.5];
        case 'ne':
        case 'ned':
          return [1, 1.5];
        case 'sw':
        case 'swd':
          return [-1, -0.5];
        case 'se':
        case 'sed':
          return [1, -0.5];
        default:
          Util.error('Prac.Innovate.hexPos() unknown dir', dir, 'returning [0, 0.5] for Service');
          return [0, 0.5];
      }
    };

    Innovate.prototype.hexPosData = function(dir) {
      switch (dir) {
        case 'west':
          return [-1, 0.0];
        case 'westd':
          return [-2, 0.0];
        case 'north':
        case 'northd':
          return [0, 0.0];
        case 'east':
          return [1, 0.0];
        case 'eastd':
          return [2, 0.0];
        case 'south':
        case 'southd':
          return [0, 0.0];
        case 'nw':
        case 'nwd':
          return [-1, 1.0];
        case 'ne':
        case 'ned':
          return [1, 1.0];
        case 'sw':
          return [-1, 0.0];
        case 'swd':
          return [-1, 0.0];
        case 'se':
          return [1, 0.0];
        case 'sed':
          return [1, 0.0];
        default:
          Util.error('Prac.Innovate.hexPos() unknown dir', dir, 'returning [0, 0.5] for Service');
          return [0, 0.5];
      }
    };

    Innovate.prototype.line = d3.line().x(function(ang) {
      return Innovate.r * Vis.cosSvg(ang) + Innovate.xh;
    }).y(function(ang) {
      return Innovate.r * Vis.sinSvg(ang) + Innovate.yh;
    });

    Innovate.prototype.hexPathV3 = function(fill, g, x0, y0, pathId) {
      this.xh = x0;
      this.yh = y0;
      g.append("svg:path").data(this.angs).attr("id", pathId).attr("d", this.line(this.angs)).attr("stroke-width", this.thick).attr("stroke", this.stroke).attr("fill", fill);
    };

    Innovate.prototype.hexPath = function(fill, g, x0, y0, pathId) {
      var ang, k, len, path, ref, xp, yp;
      xp = (function(_this) {
        return function(ang) {
          return _this.r * Vis.cosSvg(ang) + x0;
        };
      })(this);
      yp = (function(_this) {
        return function(ang) {
          return _this.r * Vis.sinSvg(ang) + y0;
        };
      })(this);
      path = d3.path();
      path.moveTo(xp(0), yp(0));
      ref = [60, 120, 180, 240, 300, 360];
      for (k = 0, len = ref.length; k < len; k++) {
        ang = ref[k];
        path.lineTo(xp(ang), yp(ang));
      }
      path.closePath();
      g.append("svg:path").attr("d", path).attr("id", pathId).attr("stroke-width", this.thick).attr("stroke", this.stroke).attr("fill", fill);
    };

    Innovate.prototype.hexText = function(text, g, x0, y0, textId) {
      var path;
      path = g.append("svg:text").text(text).attr("id", textId).attr("x", x0).attr("y", y0 + 16).attr("text-anchor", "middle").attr("font-size", "14px").attr("font-family", "FontAwesome");
      this.shapes.click(path, text);
    };

    Innovate.prototype.hexIcon = function(icon, g, x0, y0, iconId) {
      g.append("svg:text").text(icon).attr("x", x0).attr("y", y0 - 2).attr("id", iconId).attr("text-anchor", "middle").attr("font-size", "1.6em").attr("font-family", "FontAwesome");
    };

    Innovate.prototype.hexLoc = function(g, id, j, i, r, fill, text, icon) {
      var ref, x0, y0;
      if (text == null) {
        text = "";
      }
      if (icon == null) {
        icon = "";
      }
      ref = this.x0y0(j, i, this.r, this.x0, this.y0), x0 = ref[0], y0 = ref[1];
      this.hexPath(fill, g, x0, y0, id);
      if (Util.isStr(text)) {
        this.hexText(text, g, x0, y0, id);
      }
      if (Util.isStr(icon)) {
        this.hexIcon(icon, g, x0, y0, id);
      }
      return {
        x0: x0,
        y0: y0,
        r: r
      };
    };

    Innovate.prototype.x0y0 = function(j, i, r, x0, y0) {
      var cos30, dx, dy, x, y, yh;
      cos30 = Prac.cos30;
      dx = this.r * 1.5;
      dy = this.r * 2.0 * cos30;
      yh = j % 2 === 0 ? 0 : this.r * cos30;
      x = j * dx + x0;
      y = -i * dy + y0 + yh;
      return [x, y];
    };

    return Innovate;

  })();

}).call(this);
