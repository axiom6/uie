// Generated by CoffeeScript 1.12.2
(function() {
  var Add, Database, Del, Get, Muse, PouchDB, Put, Store, Stream;

  window.xUtil.fixTestGlobals();

  Stream = require('js/util/Stream');

  Store = require('js/store/Store');

  PouchDB = require('js/store/PouchDB');

  Database = require('js/store/Database');

  Muse = require('data/muse/Muse.json');

  Add = require('data/test/Add.json');

  Get = require('data/test/Get.json');

  Put = require('data/test/Put.json');

  Del = require('data/test/Del.json');

  beforeAll(function() {
    return this.stream = new Stream();
  });

  describe("store/PouchDB.coffee", function() {
    it("add:( table, id, object )", function() {
      var subjectAdd, subjectDel, subjectGet;
      subjectGet = this.pouchDB.toSubject('add', 'get', 'one');
      subjectDel = this.pouchDB.toSubject('add', 'del', 'one');
      subjectAdd = this.pouchDB.toSubject('add', 'add', 'one');
      this.stream.subscribe(subjectGet, (function(_this) {
        return function() {
          return _this.pouchDB.del('add', 'one');
        };
      })(this));
      this.stream.subscribe(subjectDel, (function(_this) {
        return function() {
          return _this.pouchDB.add('add', 'one', Add);
        };
      })(this));
      this.stream.subscribe(subjectAdd, (function(_this) {
        return function(obj) {
          return console.log('PouchDB Add', obj);
        };
      })(this));
      this.pouchDB.get('add', 'one');
      return expect('add filler').toBe('add filler');
    });
    it("get:( table, id )", function() {
      var subject;
      subject = this.pouchDB.toSubject('get', 'get', 'one');
      this.stream.subscribe(subject, (function(_this) {
        return function(data) {
          return console.log('PouchDB.get:( table, id ) Get =', data);
        };
      })(this));
      this.pouchDB.get('get', 'one');
      return expect('get filler').toBe('get filler');
    });
    it("put:( table, id, object )", function() {
      var subject;
      subject = this.pouchDB.toSubject('put', 'put', 'one');
      this.stream.subscribe(subject, (function(_this) {
        return function(data) {
          return console.log('PouchDB Put =', data);
        };
      })(this));
      Put.dir = 'xxxx';
      this.pouchDB.put('put', 'one', Put);
      return expect('put filler').toBe('put filler');
    });
    it("del:( table, id )", function() {
      var subject;
      subject = this.pouchDB.toSubject('del', 'del', 'one');
      this.stream.subscribe(subject, (function(_this) {
        return function(data) {
          return console.log('PouchDB.Del =', data);
        };
      })(this));
      this.pouchDB.del('del', 'one');
      return expect('del filler').toBe('del filler');
    });
    it("insert:( table, objects )", function() {
      var subject;
      subject = this.pouchDB.toSubject('columns', 'insert');
      this.stream.subscribe(subject, (function(_this) {
        return function(objects) {
          return console.log("PouchDB insert", objects);
        };
      })(this));
      this.pouchDB.insert('columns', Muse.Columns);
      return expect('insert filler').toBe('insert filler');
    });
    it("select:( table, where=Store.where   )", function() {
      var subject;
      subject = this.pouchDB.toSubject('columns', 'select');
      this.stream.subscribe(subject, (function(_this) {
        return function(objects) {
          return console.log("select Columns", objects);
        };
      })(this));
      this.pouchDB.select('columns');
      return expect('select filler').toBe('select filler');
    });
    it("update:( table, objects )", function() {
      var subjectSelect, subjectUpdate;
      subjectSelect = this.pouchDB.toSubject('columns', 'select');
      subjectUpdate = this.pouchDB.toSubject('columns', 'update');
      this.stream.subscribe(subjectSelect, (function(_this) {
        return function(objects) {
          var key, obj;
          for (key in objects) {
            obj = objects[key];
            obj.css = 'xxx-xxx';
          }
          return _this.pouchDB.update('columns', objects);
        };
      })(this));
      this.stream.subscribe(subjectUpdate, (function(_this) {
        return function(objects) {
          return console.log("PouchDB update", objects);
        };
      })(this));
      this.pouchDB.select('columns');
      return expect('update filler').toBe('update filler');
    });
    it("remove:( table, where=Store.where )", function() {
      var subjectRemove, subjectSelect;
      subjectSelect = this.pouchDB.toSubject('columns', 'select');
      subjectRemove = this.pouchDB.toSubject('columns', 'remove');
      this.stream.subscribe(subjectSelect, (function(_this) {
        return function(objects) {
          return _this.pouchDB.remove('columns', objects);
        };
      })(this));
      this.stream.subscribe(subjectRemove, (function(_this) {
        return function(objects) {
          return console.log("PouchDB remove", objects);
        };
      })(this));
      this.pouchDB.select('columns');
      return expect('remove filler').toBe('remove filler');
    });
    it("open:(      table, schema=Store.schema )", function() {
      return expect(true).toBe(true);
    });
    it("show:(      table=''                   )", function() {
      return expect(true).toBe(true);
    });
    it("make:(      table, alters=Store.alters )", function() {
      return expect(true).toBe(true);
    });
    it("drop:(      table                      )", function() {
      return expect(true).toBe(true);
    });
    it("onChange:(  table, id='' )              ", function() {
      return expect(true).toBe(true);
    });
    it("isNotEvt:(  evt )                       ", function() {
      return expect(true).toBe(true);
    });
    return it("auth:( tok )                            ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("store/Rest.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("add:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("get:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("put:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("del:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("insert:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("select:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("update:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("remove:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("n open:(    table, schema=Store.schema )", function() {
      return expect(true).toBe(true);
    });
    it("show:(      table=''                   )", function() {
      return expect(true).toBe(true);
    });
    it("make:(      table, alters=Store.alters )", function() {
      return expect(true).toBe(true);
    });
    it("drop:(      table                      )", function() {
      return expect(true).toBe(true);
    });
    it("onChange:(  table, id='' )              ", function() {
      return expect(true).toBe(true);
    });
    it("ajaxRest:(  op, table, id,    object=null  )", function() {
      return expect(true).toBe(true);
    });
    it("ajaxSql:(   op, table, where, objects=null )", function() {
      return expect(true).toBe(true);
    });
    it("ajaxTable:( op, table, options ) ->  ", function() {
      return expect(true).toBe(true);
    });
    it("url:(       op, table, id='' ) ->  ", function() {
      return expect(true).toBe(true);
    });
    it("urlRest:(   op, table, id='' ) ->  ", function() {
      return expect(true).toBe(true);
    });
    it("urlCouchDB:(op, table, id='' ) ->  ", function() {
      return expect(true).toBe(true);
    });
    it("restOp:( op ) ->  ", function() {
      return expect(true).toBe(true);
    });
    return it("toObject:( json ) ->  ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("store/IndexedDB.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("add:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("get:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("put:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("del:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("insert:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("select:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("update:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("remove:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("open:(      table, schema=Store.schema )", function() {
      return expect(true).toBe(true);
    });
    it("show:(      table=''                   )", function() {
      return expect(true).toBe(true);
    });
    it("make:(      table, alters=Store.alters )", function() {
      return expect(true).toBe(true);
    });
    it("drop:(      table                      )", function() {
      return expect(true).toBe(true);
    });
    it("onChange:(  table, id='' )              ", function() {
      return expect(true).toBe(true);
    });
    it("openDatabase:( database, dbVersion ) ->  ", function() {
      return expect(true).toBe(true);
    });
    it("close:() ->  ", function() {
      return expect(true).toBe(true);
    });
    it("txnTable:( t, mode, key=@key )", function() {
      return expect(true).toBe(true);
    });
    it("traverse:( op, subject, t, objects, where, toArray ) ->  ", function() {
      return expect(true).toBe(true);
    });
    return it("row:( op, txo, key, object, objects, where, toArray ) ->  ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("store/Memory.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("add:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("get:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("put:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("del:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("insert:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("select:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("update:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("remove:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("open:(      table, schema=Store.schema )", function() {
      return expect(true).toBe(true);
    });
    it("show:(      table=''                   )", function() {
      return expect(true).toBe(true);
    });
    it("make:(      table, alters=Store.alters )", function() {
      return expect(true).toBe(true);
    });
    it("drop:(      table                      )", function() {
      return expect(true).toBe(true);
    });
    it("onChange:(  table, id='' )              ", function() {
      return expect(true).toBe(true);
    });
    it("createSession:( prevSession ) ->            ", function() {
      return expect(true).toBe(true);
    });
    it("createDatabases:( session, database ) ->    ", function() {
      return expect(true).toBe(true);
    });
    it("createTables:( databases, database ) ->     ", function() {
      return expect(true).toBe(true);
    });
    it("createTable:( t  ) ->                       ", function() {
      return expect(true).toBe(true);
    });
    return it("table:( t ) ->                              ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("store/Firebase.coffee", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("add:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("get:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("put:(       table, id, object          )", function() {
      return expect(true).toBe(true);
    });
    it("del:(       table, id                  )", function() {
      return expect(true).toBe(true);
    });
    it("insert:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("select:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("update:(    table, objects             )", function() {
      return expect(true).toBe(true);
    });
    it("remove:(    table, where=Store.where   )", function() {
      return expect(true).toBe(true);
    });
    it("open:(      table, schema=Store.schema )", function() {
      return expect(true).toBe(true);
    });
    it("show:(      table=''                   )", function() {
      return expect(true).toBe(true);
    });
    it("make:(      table, alters=Store.alters )", function() {
      return expect(true).toBe(true);
    });
    it("drop:(      table                      )", function() {
      return expect(true).toBe(true);
    });
    it("onChange:(  table, id='' )              ", function() {
      return expect(true).toBe(true);
    });
    it("db:(t) ->                                   ", function() {
      return expect(true).toBe(true);
    });
    return it("revIds:( objects, bulk ) ->                 ", function() {
      return expect(true).toBe(true);
    });
  });

  describe("store/coffee Utils", function() {
    it("constructor", function() {
      return expect(true).toBe(true);
    });
    it("@isRestOp:(  op )", function() {
      return expect(true).toBe(true);
    });
    it("@isSqlOp:(   op )", function() {
      return expect(true).toBe(true);
    });
    return it("@isTableOp:( op )", function() {
      return expect(true).toBe(true);
    });
  });

  describe("store/Schema.coffee", function() {
    it("constructor:() ->                                ", function() {
      return expect(true).toBe(true);
    });
    it("@Prims                                          ", function() {
      return expect(true).toBe(true);
    });
    it("@Enums                                          ", function() {
      return expect(true).toBe(true);
    });
    it("@Specs                                          ", function() {
      return expect(true).toBe(true);
    });
    it("@isType                                         ", function() {
      return expect(true).toBe(true);
    });
    it("@isPrim                                         ", function() {
      return expect(true).toBe(true);
    });
    it("@isSpec                                         ", function() {
      return expect(true).toBe(true);
    });
    it("@toRdfType:(    dir, decl, cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@toSchemaType:( dir, decl, cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@toFoafType:(   dir, decl, cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@toXSDType:(    dir, decl, cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@toTypeType:(   decl, cardinality='1' ) ->      ", function() {
      return expect(true).toBe(true);
    });
    it("@toPrimType:(   decl, cardinality='1' ) ->      ", function() {
      return expect(true).toBe(true);
    });
    it("@toEnumType:(   decl, cardinality='1' ) ->      ", function() {
      return expect(true).toBe(true);
    });
    it("@toSpecType:(   prop, cardinality='1' ) ->      ", function() {
      return expect(true).toBe(true);
    });
    it("@toIdLD:(   uri, dir, prop                                )", function() {
      return expect(true).toBe(true);
    });
    it("@toTypeLD:( uri, dir, decl, cardinality='1'               )", function() {
      return expect(true).toBe(true);
    });
    it("@toPropLD:( prop, toId, toType                            )", function() {
      return expect(true).toBe(true);
    });
    it("@rdf:      ( prop, dir='', decl='string', cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@schemaOrg:( prop, dir='', decl='string', cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@foafOrg:(   prop, dir='', decl='string', cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@xmlSchema:( prop, dir='', decl='string', cardinality='1' )", function() {
      return expect(true).toBe(true);
    });
    it("@axiomType:( prop, cardinality='1', decl='string'         )", function() {
      return expect(true).toBe(true);
    });
    it("@axiomPrim:( prop, cardinality='1', decl='string'         )", function() {
      return expect(true).toBe(true);
    });
    it("@axiomEnum:( prop, cardinality='1', decl='string'         )", function() {
      return expect(true).toBe(true);
    });
    it("@axiomSpec:( prop, cardinality='1'                        )", function() {
      return expect(true).toBe(true);
    });
    it("@QuadRdf      ", function() {
      return expect(true).toBe(true);
    });
    it("@Quad         ", function() {
      return expect(true).toBe(true);
    });
    it("@Elem         ", function() {
      return expect(true).toBe(true);
    });
    it("@References   ", function() {
      return expect(true).toBe(true);
    });
    it("@Dimensions   ", function() {
      return expect(true).toBe(true);
    });
    it("@Perspectives ", function() {
      return expect(true).toBe(true);
    });
    it("@Planes       ", function() {
      return expect(true).toBe(true);
    });
    it("@Columns      ", function() {
      return expect(true).toBe(true);
    });
    it("@Rows         ", function() {
      return expect(true).toBe(true);
    });
    it("@Practices    ", function() {
      return expect(true).toBe(true);
    });
    it("@Studys       ", function() {
      return expect(true).toBe(true);
    });
    it("@NavbSpecs    ", function() {
      return expect(true).toBe(true);
    });
    return it("@NavbItems    ", function() {
      return expect(true).toBe(true);
    });
  });

}).call(this);
