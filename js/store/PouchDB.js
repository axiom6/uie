// Generated by CoffeeScript 1.12.1
(function() {
  var Pouch, PouchDB, Store,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Pouch = require('pouchdb');

  Store = require('js/store/Store');

  PouchDB = (function(superClass) {
    extend(PouchDB, superClass);

    module.exports = PouchDB;

    PouchDB.CouchDBHost = 'http://127.0.0.1:5984/';

    PouchDB.CouchDBLocal = 'http://localhost:5984/';

    function PouchDB(stream, uri) {
      if (uri == null) {
        uri = PouchDB.CouchDBHost;
      }
      PouchDB.__super__.constructor.call(this, stream, uri, 'PouchDB');
      this.key = '_id';
      this.dbs = {};
    }

    PouchDB.prototype.db = function(t, id, object) {
      if (id == null) {
        id = 'none';
      }
      if (object == null) {
        object = null;
      }
      if ((object != null) && Util.isStr(id) && id !== 'none') {
        object['_id'] = id;
      }
      if (this.dbs[t] == null) {
        this.dbs[t] = new Pouch(this.uri + t.toLowerCase());
      }
      return this.dbs[t];
    };

    PouchDB.prototype.add = function(t, id, object) {
      var db;
      db = this.db(t, id, object);
      db.post(object).then((function(_this) {
        return function(obj) {
          return _this.publish(t, id, 'add', object, obj);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, id, 'add', object, err);
        };
      })(this));
    };

    PouchDB.prototype.get = function(t, id) {
      var db;
      db = this.db(t, id);
      db.get(id).then((function(_this) {
        return function(obj) {
          return _this.publish(t, id, 'get', obj);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, id, 'get', {}, err);
        };
      })(this));
    };

    PouchDB.prototype.put = function(t, id, object) {
      var db;
      db = this.db(t, id);
      db.get(id).then((function(_this) {
        return function(obj) {
          object._id = id;
          object._rev = obj._rev;
          return db.put(object).then(function(res) {
            return _this.publish(t, id, 'del', object, res);
          })["catch"](function(err) {
            return _this.onerror(t, id, 'del', object, err);
          });
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, id, 'del', {
            msg: 'Unable to get doc'
          }, err);
        };
      })(this));
    };

    PouchDB.prototype.del = function(t, id) {
      var db;
      db = this.db(t, id);
      db.get(id).then((function(_this) {
        return function(obj) {
          obj['_deleted'] = true;
          console.log('PouchDB.del get obj', obj);
          return db.put(obj).then(function(res) {
            return _this.publish(t, id, 'del', obj, res);
          })["catch"](function(err) {
            return _this.onerror(t, id, 'del', obj, err);
          });
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, id, 'del', {
            msg: 'Unable to get doc'
          }, err);
        };
      })(this));
    };

    PouchDB.prototype.insert = function(t, objects) {
      var db, docs;
      db = this.db(t);
      docs = this.toArray(t, objects, Store.where);
      db.bulkDocs(docs).then((function(_this) {
        return function(res) {
          return _this.publish(t, 'none', 'insert', objects, res);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, 'none', 'insert', objects, err);
        };
      })(this));
    };

    PouchDB.prototype.select = function(t, where) {
      var db;
      if (where == null) {
        where = Store.where;
      }
      db = this.db(t);
      db.allDocs({
        include_docs: true
      }).then((function(_this) {
        return function(res) {
          var objects;
          objects = _this.toSelectObjects(t, res.rows, where);
          return _this.publish(t, 'none', 'select', objects);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, 'none', 'select', {}, err);
        };
      })(this));
    };

    PouchDB.prototype.update = function(t, objects) {
      var db, docs;
      db = this.db(t);
      docs = this.toArray(t, objects, Store.where);
      db.bulkDocs(docs).then((function(_this) {
        return function(res) {
          return _this.publish(t, 'none', 'update', objects, res);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, 'none', 'update', objects, err);
        };
      })(this));
    };

    PouchDB.prototype.remove = function(t, objects, where) {
      var db, docs;
      if (where == null) {
        where = Store.where;
      }
      db = this.db(t);
      docs = this.toArray(t, objects, where, true);
      db.bulkDocs(docs).then((function(_this) {
        return function(res) {
          return _this.publish(t, 'none', 'remove', objects, res);
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, 'none', 'remove', objects, err);
        };
      })(this));
    };

    PouchDB.prototype.open = function(t, schema) {
      var db;
      db = db(t);
      Util.noop(db);
      this.publish(t, 'none', 'open', {}, {
        schema: schema
      });
    };

    PouchDB.prototype.show = function(t) {
      var db;
      db = this.db(t);
      db.allDocs({
        include_docs: true
      }).then((function(_this) {
        return function(rows) {
          var array;
          array = _this.toArray(rows);
          return _this.publish(t, 'none', 'show', array, {
            rows: rows
          });
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          return _this.onerror(t, 'none', 'show', {}, err);
        };
      })(this));
    };

    PouchDB.prototype.make = function(t, alters) {
      var db;
      db = this.db(t);
      Util.noop(db);
      this.publish(t, 'none', 'open', {}, {
        alters: alters
      });
    };

    PouchDB.prototype.drop = function(t) {
      var db;
      db = this.db(t);
      this.dbs[t] = null;
      db.destroy(t).then((function(_this) {
        return function(info) {
          return _this.publish(t, 'none', 'drop', {}, {
            info: info
          });
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          return _this.onerror(t, 'none', 'drop', {}, error);
        };
      })(this));
    };

    PouchDB.prototype.onChange = function(t, id) {
      var db;
      if (id == null) {
        id = 'none';
      }
      db = this.db(t, id);
      db.changes({
        include_docs: true
      }).on('change', (function(_this) {
        return function(changes) {
          return _this.publish(t, 'none', 'onChange', {}, changes);
        };
      })(this)).on('error', (function(_this) {
        return function(error) {
          return _this.onerror(t, 'none', 'onChange', {}, {
            error: error
          });
        };
      })(this));
    };

    PouchDB.prototype.toArray = function(t, objects, whereIn, del) {
      var array, i, key, len, object, where;
      if (whereIn == null) {
        whereIn = null;
      }
      if (del == null) {
        del = false;
      }
      where = whereIn != null ? whereIn : function() {
        return true;
      };
      array = [];
      if (Util.isArray(objects)) {
        for (i = 0, len = array.length; i < len; i++) {
          object = array[i];
          if (!(where(object))) {
            continue;
          }
          if (object['id']) {
            object['_id'] = object['id'];
          }
          if (del) {
            object['_deleted'] = true;
          }
          array.push(object);
        }
      } else {
        for (key in objects) {
          if (!hasProp.call(objects, key)) continue;
          object = objects[key];
          if (!(where(object))) {
            continue;
          }
          object['_id'] = key;
          if (del) {
            object['_deleted'] = true;
          }
          array.push(object);
        }
      }
      return array;
    };

    PouchDB.prototype.toSelectObjects = function(t, rows, whereIn, del) {
      var i, key, len, objects, row, where;
      if (del == null) {
        del = false;
      }
      where = whereIn != null ? whereIn : function() {
        return true;
      };
      objects = {};
      if (Util.isArray(rows)) {
        for (i = 0, len = rows.length; i < len; i++) {
          row = rows[i];
          if (!(where(row.doc))) {
            continue;
          }
          if (del) {
            row['_deleted'] = true;
          }
          objects[row.doc['id']] = row.doc;
        }
      } else {
        for (key in rows) {
          row = rows[key];
          if (!(where(row))) {
            continue;
          }
          if (del) {
            row['_deleted'] = true;
          }
          objects[key] = row;
        }
      }
      return objects;
    };

    return PouchDB;

  })(Store);

}).call(this);
