// Generated by CoffeeScript 1.10.0
(function() {
  var ExpressDB, express;

  express = require('express');

  ExpressDB = (function() {
    module["export"] = ExpressDB;

    function ExpressDB(uri, db) {
      this.uri = uri;
      this.db = db;
      this.app = express();
      this.nano = require('nano')(this.uri);
      this.use = this.nano.db.use(this.db);
    }

    ExpressDB.prototype.routes = function() {
      this.app.post(this.db, function(req, res) {
        return this.post(req, res);
      });
      this.app.get(this.db, function(req, res) {
        return this.get(req, res);
      });
      this.app.put(this.db, function(req, res) {
        return this.put(req, res);
      });
      return this.app["delete"](this.db, function(req, res) {
        return this.del(req, res);
      });
    };

    ExpressDB.prototype.post = function(req, res) {
      this.use.insert(req.data, req.table, function(err, body) {
        if (!err) {
          return res.status(200).send(body);
        } else {
          return res.status(500).send(err);
        }
      });
    };

    ExpressDB.prototype.get = function(req, res) {
      var rev;
      rev = {
        revs_info: true
      };
      this.use.get(req.table, rev, function(err, body) {
        if (!err) {
          return res.status(200).send(body);
        } else {
          return res.status(500).send(err);
        }
      });
    };

    ExpressDB.prototype.put = function(req, res) {
      var rev;
      rev = {
        revs_info: true
      };
      this.use.insert(req.data, rev, function(err, body) {
        if (!err) {
          return res.status(200).send(body);
        } else {
          return res.status(500).send(err);
        }
      });
    };

    ExpressDB.prototype.del = function(req, res) {
      this.use.destroy(req.table, req.rev, function(err, body) {
        if (!err) {
          return res.status(200).send(body);
        } else {
          return res.status(500).send(err);
        }
      });
    };

    return ExpressDB;

  })();


  /*
  res.download() 	Prompt a file to be downloaded.
  res.end() 	End the response process.
  res.json() 	Send a JSON response.
  res.jsonp() 	Send a JSON response with JSONP support.
  res.redirect() 	Redirect a request.
  res.render() 	Render a view template.
  res.send() 	Send a response of various types.
  res.sendFile() 	Send a file as an octet stream.
  res.sendStatus() 	Set the response status code and send its string representation as the response body.
   */

}).call(this);
