// Generated by CoffeeScript 1.11.0
(function() {
  var Radial, Vis, d3,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  d3 = require('d3');

  Vis = require('js/util/Vis');

  Radial = (function() {
    module.exports = Radial;

    function Radial(ui, spec, g1, w, h) {
      this.ui = ui;
      this.spec = spec;
      this.g = g1;
      this.w = w;
      this.h = h;
      this.moveTo = bind(this.moveTo, this);
      this.r = Math.min(this.w / 2, this.h / 2) * 0.9;
      this.tree = d3.tree();
      this.tree.size([this.r, this.r]);
      this.tree.separation(function(a, b) {
        return (a.parent === b.parent ? 1 : 2) / a.depth;
      });
      this.root = d3.hierarchy(this.spec);
      this.tree(this.root);
      this.doRadial(this.root, this.g);
    }

    Radial.prototype.doRadial = function(root, g) {
      var link, node;
      link = this.doLinks(root, g);
      node = this.doNodes(root, g);
      this.textNode(node);
      Util.noop(link);
    };

    Radial.prototype.doLinks = function(root, g) {
      return g.selectAll(".link").data(root.descendants().slice(1)).enter().append("svg:path").attr("class", "link").attr("stroke", 'blue').attr("fill", "none").attr("d", (function(_this) {
        return function(d) {
          return _this.moveTo(d);
        };
      })(this));
    };

    Radial.prototype.doNodes = function(root, g) {
      return g.selectAll("g.node").data(root.descendants()).enter().append("svg:g").attr("class", (function(_this) {
        return function(d) {
          return _this.nodeClass(d);
        };
      })(this)).attr("transform", (function(_this) {
        return function(d) {
          return "translate(" + _this.project(d.x, d.y) + ")";
        };
      })(this));
    };

    Radial.prototype.moveTo = function(d) {
      var p;
      p = d.parent;
      return "M" + (this.project(d.x, d.y)) + "C" + (this.project(d.x, (d.y + p.y) / 2)) + " " + (this.project(p.x, (d.y + p.y) / 2)) + " " + (this.project(p.x, p.y));
    };

    Radial.prototype.project = function(x, y) {
      var angle, radius;
      angle = (x - 90) / 180 * Math.PI;
      radius = y;
      return [radius * Math.cos(angle), radius * Math.sin(angle)];
    };

    Radial.prototype.nodeClass = function(d) {
      if (d.children != null) {
        return "node--internal";
      } else {
        return "node--leaf";
      }
    };

    Radial.prototype.iconNode = function(node) {
      node.append("svg:text").attr("dy", 4).attr("stroke", 'black').attr("font-size", "1.4em").attr("font-family", "FontAwesome").attr("text-anchor", "middle").text((function(_this) {
        return function(d) {
          return _this.iconUnicode(d);
        };
      })(this));
    };

    Radial.prototype.textNode = function(node) {
      node.append("svg:text").attr("dy", ".31em").attr("y", 2).attr("x", (function(_this) {
        return function(d) {
          if (_this.isEnd180(d)) {
            return 6;
          } else {
            return -6;
          }
        };
      })(this)).attr("text-anchor", (function(_this) {
        return function(d) {
          if (_this.isEnd180(d)) {
            return "end";
          } else {
            return "start";
          }
        };
      })(this)).attr("transform", (function(_this) {
        return function(d) {
          return "rotate(" + (d.x < 180 ? d.x - 90 : d.x + 90) + ")";
        };
      })(this)).attr("stroke", 'black').attr("font-family", "FontAwesome").text(function(d) {
        return d.data.name;
      });
    };

    Radial.prototype.isEnd180 = function(d) {
      return d.x > 180;
    };

    Radial.prototype.isEnd = function(d) {
      return !((d.children != null) && d.children.length > 0);
    };

    Radial.prototype.iconUnicode = function(d) {
      var icon;
      icon = d.data.icon != null ? d.data.icon : 'fa-circle';
      return Vis.unicode(icon);
    };

    return Radial;

  })();

}).call(this);
