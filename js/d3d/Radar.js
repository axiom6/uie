// Generated by CoffeeScript 1.10.0
(function() {
  var Radar, Vis, d3,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  d3 = require('d3');

  Vis = require('js/util/Vis');

  Radar = (function() {
    module.exports = Radar;

    function Radar(g1, isRadar, width, height) {
      this.g = g1;
      this.isRadar = isRadar != null ? isRadar : true;
      this.width = width != null ? width : 1200;
      this.height = height != null ? height : 800;
      this.doTechs = bind(this.doTechs, this);
      this.doQuads = bind(this.doQuads, this);
      this.x0 = this.width / 2;
      this.y0 = this.height / 2;
      this.inner = 0;
      this.outer = (Math.min(this.width, this.height) - 100) / 2;
      this.r04 = this.outer * 0.04;
      this.r08 = this.outer * 0.08;
      this.r16 = this.outer * 0.16;
      this.r10 = this.outer * 0.1;
      this.r20 = this.outer * 0.2;
      this.r30 = this.outer * 0.3;
      this.r40 = this.outer * 0.4;
      this.r50 = this.outer * 0.5;
      this.r60 = this.outer * 0.6;
      this.r80 = this.outer * 0.8;
      this.r90 = this.outer * 0.9;
      this.r100 = this.outer * 1.0;
      this.s2 = Math.sin(this.rad(60));
      this.r2 = this.s2 * this.s2 * 60.0;
      this.p60 = -Math.sin(this.rad(60));
      this.attrG(this.g);
      this.criterias = [
        {
          name: "Adopt",
          radius: this.r40
        }, {
          name: "Trial",
          radius: this.r60
        }, {
          name: "Access",
          radius: this.r80
        }, {
          name: "Hold",
          radius: this.r100
        }
      ];
    }

    Radar.prototype.doQuads = function(quadrants) {
      this.quads(Util.toArray(quadrants), this.r08, this.r100);
      this.circles(this.criterias);
    };

    Radar.prototype.doTechs = function(techs) {
      this.pts(Util.toArray(techs));
    };

    Radar.prototype.attrG = function(g) {
      return g.attr("style", "background" + (d3.rgb(250, 240, 200)) + "; overflow:visible;");
    };

    Radar.prototype.prompt = function() {
      return this.g.append("svg:text").text("Drag and drop the blue dots to target technologies as Adopt Trial Access or Hold").attr("x", 20).attr("y", 20).attr("font-family", "Arial").attr("font-size", "14px");
    };

    Radar.prototype.grid = function(da, dr, ba, ea, br, er) {
      var ang, cos, j, k, l, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, sin;
      if (ba == null) {
        ba = 0;
      }
      if (ea == null) {
        ea = 360;
      }
      if (br == null) {
        br = this.r40;
      }
      if (er == null) {
        er = this.r100;
      }
      for (ang = j = ref = ba, ref1 = ea, ref2 = da; ref2 > 0 ? j < ref1 : j > ref1; ang = j += ref2) {
        cos = Math.cos(this.rad(ang));
        sin = Math.sin(this.rad(ang));
        this.quadLine(this.r16 * cos, this.r16 * sin, this.r100 * cos, this.r100 * sin, "#CCCCCC");
      }
      for (r = k = ref3 = br, ref4 = er, ref5 = dr; ref5 > 0 ? k < ref4 : k > ref4; r = k += ref5) {
        this.circle(r);
      }
      for (r = l = ref6 = this.r08, ref7 = this.r40, ref8 = this.r08; ref8 > 0 ? l < ref7 : l > ref7; r = l += ref8) {
        this.circle(r);
      }
    };

    Radar.prototype.circle = function(r) {
      this.g.append("svg:circle").attr("cx", this.x0).attr("cy", this.y0).attr("fill", "none").attr("stroke", "#CCCCCC").attr("stroke-width", 1).attr("r", r);
    };

    Radar.prototype.circles = function(criterias) {
      var g;
      g = this.g.selectAll("g").data(criterias).enter().append("svg:g");
      g.append("svg:circle").attr("cx", this.x0).attr("cy", this.y0).attr("fill", "none").attr("stroke", "gray").attr("stroke-width", 1).attr("r", function(criteria) {
        return criteria.radius;
      });
      if (this.isRadar) {
        g.append("svg:text").attr("x", this.x0).attr("y", (function(_this) {
          return function(criteria) {
            return _this.y0 - criteria.radius;
          };
        })(this)).text((function(_this) {
          return function(criteria) {
            return criteria.name;
          };
        })(this)).attr("text-anchor", "middle").attr("dy", "1.2em").attr("font-size", "18pt").attr("font-family", "Arial");
      }
    };

    Radar.prototype.quads = function(quadrants, r1, r2) {
      var ang, beg, cos, dif, i, j, k, n, name1, name2s, ref, ref1, sin;
      this.wedges(quadrants, this.inner, r2);
      n = quadrants.length * 2;
      dif = 360 / n;
      ang = 0;
      cos = 0;
      sin = 0;
      name2s = null;
      for (i = j = 0, ref = n; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        ang = i * dif;
        cos = Math.cos(this.rad(ang));
        sin = Math.sin(this.rad(ang));
        this.quadLine(r1 * cos, r1 * sin, r2 * cos, r2 * sin, "rgba(180,180,180,1.0)");
        name2s = quadrants[Math.floor(i / 2)].name2s;
        if ((name2s != null) && name2s.length === 2) {
          this.quadName(this.r100 + 12, ang + dif / 2, name2s[i % 2]);
        }
      }
      n = quadrants.length;
      dif = 360 / n;
      beg = this.isRadar ? dif / 2 : 0;
      for (i = k = 0, ref1 = n; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
        name1 = quadrants[i].name1;
        if ((name1 != null) && name1.length > 0) {
          this.quadName(this.r100 + 12, beg + dif * i, name1);
        }
      }
    };

    Radar.prototype.quadName = function(r, ang, name) {
      var cx, cy, dy, rot;
      cx = this.x0 + r * Math.cos(this.rad(ang));
      cy = this.y0 + r * Math.sin(this.rad(ang));
      rot = "rotate(" + (this.angleQuad(ang)) + "," + cx + "," + cy + ")";
      dy = 0 <= ang && ang <= 180 ? ".15em" : ".5em";
      this.g.append("svg:text").attr("x", cx).attr("y", cy).text(name).attr("transform", rot).attr("text-anchor", "middle").attr("dy", dy).attr("font-size", "18pt").attr("font-family", "Arial");
    };

    Radar.prototype.degName = function(r, ang) {
      var cx, cy, rotate;
      cx = this.x0 + r * Math.cos(this.rad(ang));
      cy = this.y0 + r * Math.sin(this.rad(ang));
      rotate = "rotate(" + (this.angleQuad(ang)) + "," + cx + "," + cy + ")";
      this.g.append("svg:text").attr("x", cx).attr("y", cy).text(ang).attr("transform", rotate).attr("text-anchor", "middle").attr("dy", ".35em").attr("font-size", "12pt").attr("font-family", "Arial");
    };

    Radar.prototype.wedge = function(fill, g, r1, r2, a1, a2) {
      var arc;
      arc = d3.arc().innerRadius(r1).outerRadius(r2).startAngle(this.radD3(a1)).endAngle(this.radD3(a2));
      g.append("svg:path").attr("d", arc).attr("fill", fill).attr("stroke", "none").attr("transform", "translate(" + this.x0 + "," + this.y0 + ")");
    };

    Radar.prototype.wedges = function(quadrants, r1, r2) {
      var wedge;
      wedge = d3.arc().innerRadius(r1).outerRadius(r2).startAngle((function(_this) {
        return function(d) {
          return _this.radD3(d.beg);
        };
      })(this)).endAngle((function(_this) {
        return function(d) {
          return _this.radD3(d.end);
        };
      })(this));
      this.g.selectAll("path").data(quadrants).enter().append("svg:path").attr("d", wedge).attr("transform", "translate(" + this.x0 + "," + this.y0 + ")").attr("fill", (function(_this) {
        return function(d) {
          return d.color;
        };
      })(this)).attr("stroke", "none");
    };

    Radar.prototype.symType = function(tech) {
      if ((tech.changed != null) && tech.changed === '+') {
        return "triangle-up";
      } else {
        return "circle";
      }
    };

    Radar.prototype.pts = function(techs) {
      var dot, g;
      g = this.g.selectAll("g").data(techs).enter().append("svg:g");
      dot = g.append("svg:circle").attr("id", (function(_this) {
        return function(tech) {
          return _this.techId(tech);
        };
      })(this)).attr("class", "dot").attr("cx", (function(_this) {
        return function(tech) {
          return _this.x(tech);
        };
      })(this)).attr("cy", (function(_this) {
        return function(tech) {
          return _this.y(tech);
        };
      })(this)).attr("title", (function(_this) {
        return function(tech) {
          return _this.techTitle(tech);
        };
      })(this)).attr("r", 6).attr("fill", "orange").attr("stroke", "orange").attr("stroke-width", 1);
      dot.call(function(tech) {
        return tech.dot = dot;
      });
      dot.call(d3.behavior.drag().on("dragstart", (function(_this) {
        return function(tech) {
          return _this.doDragStart(tech);
        };
      })(this)).on("drag", (function(_this) {
        return function(tech) {
          return _this.doDrag(tech);
        };
      })(this)).on("dragend", (function(_this) {
        return function(tech) {
          return _this.doDragEnd(tech);
        };
      })(this)));
      g.append("svg:text").text((function(_this) {
        return function(tech) {
          return (tech.i ? tech.i + ' ' : '') + tech.name;
        };
      })(this)).attr("id", (function(_this) {
        return function(tech) {
          return _this.techTx(tech);
        };
      })(this)).attr("text-anchor", (function(_this) {
        return function(tech) {
          if (_this.leftQuads(tech)) {
            return "end";
          } else {
            return "start";
          }
        };
      })(this)).attr("x", (function(_this) {
        return function(tech) {
          if (_this.leftQuads(tech)) {
            return _this.x(tech) - 10;
          } else {
            return _this.x(tech) + 10;
          }
        };
      })(this)).attr("y", (function(_this) {
        return function(tech) {
          return _this.y(tech);
        };
      })(this)).attr("dy", ".35em").attr("font-family", "Arial").attr("font-size", "10px");
    };

    Radar.prototype.doDragStart = function(tech) {
      d3.select("circle#" + this.techId(tech)).attr("fill", "yellow");
    };

    Radar.prototype.doDrag = function(tech) {
      var x, y;
      if (d3.event == null) {
        return;
      }
      x = d3.event.x - this.x0;
      y = this.y0 - d3.event.y;
      tech.angle = this.angle(x, y);
      tech.grade = this.grade(x, y);
      window.status = this.techTitle(tech);
      d3.select('circle#' + this.techId(tech)).attr("cx", this.x(tech)).attr("cy", this.y(tech));
    };

    Radar.prototype.doDragEnd = function(tech) {
      d3.select("circle#" + this.techId(tech)).attr("fill", "blue").attr("title", this.techTitle(tech));
      d3.select("text#" + this.techTx(tech)).attr("x", (function(_this) {
        return function(tech) {
          if (_this.leftQuads(tech)) {
            return _this.x(tech) - 10;
          } else {
            return _this.x(tech) + 10;
          }
        };
      })(this)).attr("y", (function(_this) {
        return function(tech) {
          return _this.y(tech);
        };
      })(this));
      this.updateModel(tech);
    };

    Radar.prototype.updateModel = function(tech) {
      var id, model;
      if (!Util.hasGlobal('backbone', false)) {
        return;
      }
      id = this.collection.toId(tech.name);
      model = this.collection.get(id);
      if (model != null) {
        model.set({
          grade: tech.grade,
          angle: tech.angle
        });
      } else {
        Util.error('Radar.updateModel(tech) model not found for tech name id', tech.name, id);
      }
    };

    Radar.prototype.leftQuads = function(tech) {
      return 90 <= tech.angle && tech.angle < 270;
    };

    Radar.prototype.rad = function(deg) {
      return (360 - deg) * Math.PI / 180.0;
    };

    Radar.prototype.degSVG = function(deg) {
      return 360 - deg;
    };

    Radar.prototype.radD3 = function(deg) {
      return (450 - deg) * Math.PI / 180.0;
    };

    Radar.prototype.degD3 = function(rad) {
      return -rad * 180.0 / Math.PI;
    };

    Radar.prototype.x = function(tech) {
      return this.x0 + this.r(tech) * Math.cos(this.rad(tech.angle));
    };

    Radar.prototype.y = function(tech) {
      return this.y0 + this.r(tech) * Math.sin(this.rad(tech.angle));
    };

    Radar.prototype.r = function(tech) {
      var g;
      g = tech.grade;
      if (g > 90) {
        return (100 - g) / 10.0 * this.r40;
      } else {
        return this.r40 + (90 - g) / 30.0 * this.r60;
      }
    };

    Radar.prototype.angle = function(x, y) {
      var ang;
      ang = Math.atan2(y, x) * 180.0 / Math.PI;
      ang = ang < 0 ? 360 + ang : ang;
      return Math.round(ang);
    };

    Radar.prototype.grade = function(x, y) {
      var r;
      r = Math.sqrt(x * x + y * y);
      r = r < this.r40 ? 100 - r * 10 / this.r40 : 90 + (this.r40 - r) * 30.0 / this.r60;
      return Math.round(r);
    };

    Radar.prototype.techTitle = function(tech) {
      return tech.name + " " + Math.round(tech.grade) + "% " + Math.round(tech.angle) + " Deg  " + tech.title;
    };

    Radar.prototype.techId = function(tech) {
      var ptn;
      ptn = /[ .#>:~\^\=\+\*\(\)\[\]]/g;
      return "_" + tech.name.replace(ptn, '_');
    };

    Radar.prototype.techTx = function(tech) {
      return this.techId(tech) + "_tx";
    };

    Radar.prototype.angleQuad = function(ang) {
      if (Vis.within(0, ang, 180)) {
        return -ang + 90;
      } else {
        return -ang - 90;
      }
    };

    Radar.prototype.quadLine = function(x1, y1, x2, y2, stroke) {
      this.g.append("svg:line").attr("x1", x1 + this.x0).attr("y1", y1 + this.y0).attr("x2", x2 + this.x0).attr("y2", y2 + this.y0).attr("stroke", stroke).attr("stroke-width", "1");
    };

    return Radar;

  })();

}).call(this);
