// Generated by CoffeeScript 1.12.2
(function() {
  var Axes, Vis, d3;

  d3 = require('d3');

  Vis = require('js/util/Vis');

  Axes = (function() {
    module.exports = Axes;

    function Axes(g1, w, h, xObj1, yObj1, margin) {
      this.g = g1;
      this.w = w;
      this.h = h;
      this.xObj = xObj1;
      this.yObj = yObj1;
      this.margin = margin != null ? margin : {
        left: 40,
        top: 40,
        right: 40,
        bottom: 40
      };
      this.width = this.w - this.margin.left - this.margin.right;
      this.height = this.h - this.margin.top - this.margin.bottom;
      this.xScale = this.createXScale(this.xObj, this.width);
      this.yScale = this.createYScale(this.yObj, this.height);
      this.xAxis = this.createXAxis(this.xObj, this.width, this.xScale);
      this.yAxis = this.createYAxis(this.yObj, this.height, this.yScale);
      this.attrG(this.g);
      this.bAxis = this.createBAxis(this.g, this.xAxis);
      this.tAxis = this.createTAxis(this.g, this.xAxis);
      this.lAxis = this.createLAxis(this.g, this.yAxis);
      this.rAxis = this.createRAxis(this.g, this.yAxis);
      this.grid(this.g, this.xObj, this.yObj);
      $('path.domain').hide();
    }

    Axes.prototype.createXScale = function(xObj, width) {
      return d3.scale.linear().domain([xObj.x1, xObj.x2]).range([0, width]).clamp(true);
    };

    Axes.prototype.createYScale = function(yObj, height) {
      return d3.scale.linear().domain([yObj.y1, yObj.y2]).range([height, 0]).clamp(true);
    };

    Axes.prototype.createXAxis = function(xObj, width, xScale) {
      var ntick1, ntick2, xtick1;
      xtick1 = xObj.xtick1 != null ? xObj.xtick1 : (this.x2 - this.x1) / 10;
      ntick1 = (xObj.x2 - xObj.x1) / xObj.xtick1;
      ntick2 = xObj.xtick2 != null ? xtick1 / xObj.xtick2 : 0;
      Util.noop(ntick2);
      return d3.axis().scale(xScale).ticks(ntick1).tickSize(12);
    };

    Axes.prototype.createYAxis = function(yObj, height, yScale) {
      var ntick1, ntick2, ytick1;
      ytick1 = yObj.ytick1 != null ? yObj.ytick1 : (this.y2 - this.y1) / 10;
      ntick1 = (yObj.y2 - yObj.y1) / yObj.ytick1;
      ntick2 = yObj.ytick2 != null ? ytick1 / yObj.ytick2 : 0;
      Util.noop(ntick2);
      return d3.axis().scale(yScale).ticks(ntick1).tickSize(12);
    };

    Axes.prototype.attrG = function(g) {
      return g.attr("style", "overflow:visible;").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")").attr("style", "overflow:visible;");
    };

    Axes.prototype.createBAxis = function(s, xAxis) {
      return s.append("svg:g").attr("class", "axis-bottom axis").attr("stroke", '#FFFFFF').attr("transform", "translate(0," + this.height + ")").call(xAxis.orient("bottom"));
    };

    Axes.prototype.createTAxis = function(g, xAxis) {
      return g.append("svg:g").attr("class", "axis-top axis").attr("stroke", '#FFFFFF').call(xAxis.orient("top"));
    };

    Axes.prototype.createLAxis = function(g, yAxis) {
      return g.append("svg:g").attr("class", "axis-left axis").attr("stroke", '#FFFFFF').call(yAxis.orient("left"));
    };

    Axes.prototype.createRAxis = function(g, yAxis) {
      return g.append("svg:g").attr("class", "axis-right axis").attr("stroke", '#FFFFFF').attr("transform", "translate(" + this.width + ",0)").call(yAxis.orient("right"));
    };

    Axes.prototype.grid = function(g, xObj, yObj) {
      var elem;
      elem = g.append("g:g");
      this.xLines(elem, xObj.x1, xObj.x2, xObj.xtick2, yObj.y1, yObj.y2, '#000000', 1);
      this.yLines(elem, yObj.y1, yObj.y2, yObj.ytick2, xObj.x1, xObj.x2, '#000000', 1);
      this.xLines(elem, xObj.x1, xObj.x2, xObj.xtick1, yObj.y1, yObj.y2, '#FFFFFF', 1);
      return this.yLines(elem, yObj.y1, yObj.y2, yObj.ytick1, xObj.x1, xObj.x2, '#FFFFFF', 1);
    };

    Axes.prototype.line = function(elem, x1, y1, x2, y2, stroke, thick, xScale, yScale) {
      if (stroke == null) {
        stroke = "black";
      }
      if (thick == null) {
        thick = 1;
      }
      if (xScale == null) {
        xScale = this.xScale;
      }
      if (yScale == null) {
        yScale = this.yScale;
      }
      return elem.append("svg:line").attr("x1", xScale(x1)).attr("y1", yScale(y1)).attr("x2", xScale(x2)).attr("y2", yScale(y2)).attr("stroke", stroke).attr("stroke-width", thick);
    };

    Axes.prototype.xLines = function(elem, xb, xe, dx, y1, y2, stroke, thick) {
      var i, results, x, x1, x2;
      i = 1;
      x1 = Vis.floor(xb, dx);
      x2 = Vis.ceil(xe, dx);
      x = x1;
      results = [];
      while (x <= x2) {
        this.line(elem, x, y1, x, y2, stroke, thick);
        results.push(x = x1 + dx * i++);
      }
      return results;
    };

    Axes.prototype.yLines = function(elem, yb, ye, dy, x1, x2, stroke, thick) {
      var i, results, y, y1, y2;
      i = 1;
      y1 = Vis.floor(yb, dy);
      y2 = Vis.ceil(ye, dy);
      y = y1;
      results = [];
      while (y <= y2) {
        this.line(elem, x1, y, x2, y, stroke, thick);
        results.push(y = y1 + dy * i++);
      }
      return results;
    };

    return Axes;

  })();

}).call(this);
