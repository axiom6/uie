// Generated by CoffeeScript 1.11.0
(function() {
  var Tree, Vis, d3,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  d3 = require('d3');

  Vis = require('js/util/Vis');

  Tree = (function() {
    module.exports = Tree;

    function Tree(ui, spec, g1, w, h) {
      this.ui = ui;
      this.spec = spec;
      this.g = g1;
      this.w = w;
      this.h = h;
      this.linkTo = bind(this.linkTo, this);
      this.nodeTo = bind(this.nodeTo, this);
      this.margin = 0.05;
      this.sizepc = 1 - this.margin * 2;
      this.tree = d3.tree();
      this.tree.size([this.h * this.sizepc, this.w * this.sizepc]);
      this.root = d3.hierarchy(this.spec);
      this.tree(this.root);
      this.doTree(this.root, this.g);
    }

    Tree.prototype.doTree = function(root, g) {
      var link, node;
      link = this.doLinks(root, g);
      node = this.doNodes(root, g);
      this.iconNode(node);
      this.textNode(node);
      Util.noop(link);
    };

    Tree.prototype.doNodes = function(root, g) {
      return g.selectAll("g.node").data(root.descendants()).enter().append("svg:g").attr("class", "node").attr("transform", (function(_this) {
        return function(d) {
          return _this.nodeTo(d);
        };
      })(this));
    };

    Tree.prototype.doLinks = function(root, g) {
      return g.selectAll("g.link").data(root.descendants().slice(1)).enter().append("svg:path").attr("class", 'link').attr("stroke", 'blue').attr("fill", "none").attr("d", (function(_this) {
        return function(d) {
          return _this.linkTo(d);
        };
      })(this));
    };

    Tree.prototype.dydx = function(d) {
      return [d.y + this.h * this.margin, d.x + this.w * this.margin];
    };

    Tree.prototype.nodeTo = function(d) {
      var dx, dy, ref;
      ref = this.dydx(d), dy = ref[0], dx = ref[1];
      return "translate(" + dy + "," + dx + ")";
    };

    Tree.prototype.linkTo = function(d) {
      var dx, dy, px, py, ref, ref1;
      ref = this.dydx(d), dy = ref[0], dx = ref[1];
      ref1 = this.dydx(d.parent), py = ref1[0], px = ref1[1];
      return "M" + dy + "," + dx + "C" + (py + 50) + "," + dx + " " + (py + 50) + "," + px + " " + py + "," + px;
    };

    Tree.prototype.isEnd = function(d) {
      return d.depth === 0 || d.depth > 2;
    };

    Tree.prototype.textNode = function(node) {
      node.append("svg:text").attr("dy", 1).attr("x", (function(_this) {
        return function(d) {
          if (_this.isEnd(d)) {
            return 8;
          } else {
            return -10;
          }
        };
      })(this)).attr("y", 2).attr("stroke", 'black').attr("font-size", "1.4em").attr("font-family", "FontAwesome").attr("text-anchor", (function(_this) {
        return function(d) {
          if (_this.isEnd(d)) {
            return "start";
          } else {
            return "end";
          }
        };
      })(this)).text(function(d) {
        return d.data.name;
      });
    };

    Tree.prototype.iconNode = function(node) {
      node.append("svg:text").attr("dy", 4).attr("stroke", 'black').attr("font-size", "1.4em").attr("font-family", "FontAwesome").attr("text-anchor", "middle").text((function(_this) {
        return function(d) {
          return _this.iconUnicode(d);
        };
      })(this));
    };

    Tree.prototype.iconUnicode = function(d) {
      var icon;
      icon = d.data.icon != null ? d.data.icon : 'fa-circle';
      return Vis.unicode(icon);
    };

    return Tree;

  })();

}).call(this);
