// Generated by CoffeeScript 1.10.0
(function() {
  var Pres;

  Pres = (function() {
    module.exports = Pres;

    function Pres(build, stream, view) {
      this.build = build;
      this.stream = stream;
      this.view = view;
      this.Page = require('js/ui/UI/Page');
      this.Database = require('js/store/Database');
      this.Rest = require('js/store/Rest');
      this.Shows = {
        Tree: {},
        Radial: {},
        Links: {},
        Axes: {},
        Radar: {},
        Wheel: {},
        Sankey: {},
        Brewer: {},
        Chord: {},
        Table: {},
        Schema: {},
        Pivot: {},
        Classify: {}
      };
      this.stream.subscribe('Select', (function(_this) {
        return function(select) {
          return _this.onSelect(select);
        };
      })(this));
      this.stream.subscribe('Layout', (function(_this) {
        return function(layout) {
          return _this.onLayout(layout);
        };
      })(this));
    }

    Pres.prototype.onSelect = function(select) {
      var name, selected;
      name = select.name;
      selected = this.Shows[name];
      if (selected != null) {
        if (this.Shows[name].d3d == null) {
          selected.d3d = this.createD3D(name);
        }
        return selected.page.selected = name === 'Table' ? 'Topic' : 'Svg';
      }
    };

    Pres.prototype.onLayout = function(layout) {
      var selected;
      selected = this.Shows[layout.select];
      if (selected != null) {
        if (layout.select === 'Table' && layout.content === 'Table') {
          return selected.visual.resize();
        }
      }
    };

    Pres.prototype.createShow = function(pane) {
      var page;
      page = new this.Page(this.build, this.stream, this.view, pane, 'Center');
      if (this.Shows[pane.name] != null) {
        this.Shows[pane.name].pane = pane;
        this.Shows[pane.name].page = page;
      } else {
        Util.error('Pres.createShow() unknown show', pane.name);
      }
      return page;
    };

    Pres.prototype.createD3D = function(select) {
      var d3d, pane;
      pane = this.Shows[select].pane;
      d3d = (function() {
        switch (select) {
          case 'Tree':
            return this.instanciateTree(pane);
          case 'Radial':
            return this.instanciateRadial(pane);
          case 'Links':
            return this.instanciateLinks(pane);
          case 'Axes':
            return this.instanciateAxes(pane);
          case 'Radar':
            return this.instanciateRadar(pane);
          case 'Wheel':
            return this.instanciateWheel(pane);
          case 'Sankey':
            return this.instanciateSankey(pane);
          case 'Brewer':
            return this.instanciateBrewer(pane);
          case 'Chord':
            return this.instanciateChord(pane);
          case 'Table':
            return this.instanciateTable(pane);
          case 'Schema':
            return this.instanciateSchema(pane);
          case 'Pivot':
            return this.instanciatePivot(pane);
          case 'Classify':
            return this.instanciateClassify(pane);
          default:
            Util.error('d3d/Pres.instanciate() unknown select', select);
            return null;
        }
      }).call(this);
      return d3d;
    };

    Pres.prototype.svgGeom = function(pane) {
      if (pane.page == null) {
        Util.error('Pres.svgGeom() missing page', pane.name);
      }
      return [pane.page.contents.svg, pane.geom()];
    };

    Pres.prototype.transform = function(pane, x, y, s) {
      var cs;
      cs = pane.page.contents.svg;
      cs.$.hide();
      cs.$g.attr('transform', "translate(" + x + "," + y + ") scale(" + s + "," + s + ")");
      cs.$.show();
    };

    Pres.prototype.restData = function(dbName, fileJson, doData) {
      var onNext, rest;
      rest = new this.Rest(this.stream, this.Database.Databases[dbName].uriLoc);
      if (dbName === 'radar') {
        rest.key = 'name';
      }
      rest.remember();
      rest.select(fileJson);
      onNext = (function(_this) {
        return function(data) {
          return doData(data);
        };
      })(this);
      return rest.subscribe(Util.firstTok(fileJson, '.'), 'none', 'select', onNext);
    };

    Pres.prototype.instanciateTree = function(pane) {
      var Tree, geom, ref, svg, tree;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Tree = require('js/d3d/Tree');
      tree = new Tree(svg.g, geom.wv, geom.hv, false);
      this.restData('radar', 'polyglot-principles.json', (function(_this) {
        return function(data) {
          return tree.doTree(data);
        };
      })(this));
      return tree;
    };

    Pres.prototype.instanciateRadial = function(pane) {
      var Radial, geom, radial, ref, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Radial = require('js/d3d/Radial');
      radial = new Radial(svg.g, geom.wv, geom.hv);
      this.restData('radar', 'polyglot-principles.json', (function(_this) {
        return function(data) {
          return radial.doRadial(data);
        };
      })(this));
      return radial;
    };

    Pres.prototype.instanciateTable = function(pane) {
      var Table, columns, table;
      columns = [
        {
          n: '1st',
          w: 0,
          t: 'null'
        }, {
          n: 'i',
          w: 2,
          t: 'Int'
        }, {
          n: 'Name',
          w: 15,
          t: 'Id'
        }, {
          n: 'Grade',
          w: 5,
          t: 'Float'
        }, {
          n: 'Angle',
          w: 5,
          t: 'Float'
        }, {
          n: 'Title',
          w: 0,
          t: 'string'
        }
      ];
      Table = require('js/table/Table');
      table = new Table('axiom-table', pane.page.contents.table.htmlId, columns);
      this.restData('radar', 'axiom-table.json', (function(_this) {
        return function(techs) {
          return table.doData(techs);
        };
      })(this));
      return table;
    };

    Pres.prototype.instanciateSchema = function(pane) {
      var Schema, Type;
      Type = require('js/util/Type');
      Schema = require('js/build/Schema');
      this.restData('geo', 'errorLarimerGeo.json', (function(_this) {
        return function(model) {
          return Type.checkStart(model, Schema.GeoJSON, 'errorLarimer');
        };
      })(this));
      return this.instanciateLinks(pane);
    };

    Pres.prototype.instanciatePivot = function(pane) {
      var Pivot, pivot;
      Pivot = require('js/table/Pivot');
      pivot = new Pivot(this.build, this.stream);
      this.restData('pivot', 'mps.json', (function(_this) {
        return function(mps) {
          return pivot.doMps(mps, pane.page.contents.table.htmlId);
        };
      })(this));
      return pivot;
    };

    Pres.prototype.instanciateClassify = function(pane) {
      var Pivot, pivot;
      Pivot = require('js/table/Pivot');
      pivot = new Pivot(this.build, this.stream);
      this.restData('muse', 'Practices.json', (function(_this) {
        return function(practices) {
          return pivot.doPractices(practices, pane.page.contents.table.htmlId);
        };
      })(this));
      return pivot;
    };

    Pres.prototype.instanciateSankey = function(pane) {
      var Sankey, geom, ref, sankey, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Sankey = require('js/d3d/Sankey');
      sankey = new Sankey(svg.defs, svg.g, 0, 0, geom.wv, geom.hv, 36, 6, true);
      this.restData('sankey', 'plot.json', (function(_this) {
        return function(data) {
          return sankey.doData(data);
        };
      })(this));
      return sankey;
    };

    Pres.prototype.instanciateRadar = function(pane) {
      var Radar, geom, radar, ref, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Radar = require('js/d3d/Radar');
      radar = new Radar(svg.g, true, geom.wv, geom.hv);
      this.restData('radar', 'axiom-quads.json', (function(_this) {
        return function(quads) {
          return radar.doQuads(quads);
        };
      })(this));
      this.restData('radar', 'axiom-techs.json', (function(_this) {
        return function(techs) {
          return radar.doTechs(techs);
        };
      })(this));
      return radar;
    };

    Pres.prototype.instanciateWheel = function(pane) {
      var Wheel, geom, ref, svg, wheel;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Wheel = require('js/d3d/Wheel');
      wheel = new Wheel(svg.g, geom.wv, geom.hv);
      return wheel;
    };

    Pres.prototype.instanciateBrewer = function(pane) {
      var Color, brewer, geom, ref, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Color = require('js/d3d/Color');
      brewer = new Color.Brewer(pane, geom.wv, geom.hv);
      return brewer;
    };

    Pres.prototype.instanciateAxes = function(pane) {
      var Axes, axes, geom, ref, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Axes = require('js/d3d/Axes');
      axes = new Axes(svg.g, geom.wv, geom.hv, {
        x1: 0,
        x2: 100,
        xtick1: 10,
        xtick2: 1
      }, {
        y1: 0,
        y2: 100,
        ytick1: 10,
        ytick2: 1
      });
      this.transform(pane, 40, 40, 1.0);
      return axes;
    };

    Pres.prototype.instanciateChord = function(pane) {
      var Chord, chord, geom, ref, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Chord = require('js/d3d/Chord');
      chord = new Chord(svg.g, geom.wv, geom.hv);
      this.transform(pane, geom.wv / 2, geom.hv / 2, geom.s);
      return chord;
    };

    Pres.prototype.instanciateLinks = function(pane) {
      var Link, geom, link, ref, svg;
      ref = this.svgGeom(pane), svg = ref[0], geom = ref[1];
      Link = require('js/d3d/Link');
      link = new Link(svg.g, geom.wv, geom.hv);
      link.ornament(150);
      return link;
    };

    return Pres;

  })();

}).call(this);
