// Generated by CoffeeScript 1.6.3
(function() {
  var Build, IKW, Vis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  Vis = require('js/util/Vis');

  Build = require('js/prac/Build');

  IKW = (function() {
    var MBox;

    module.exports = IKW;

    MBox = require('js/mbox/MBox');

    MBox.IKW = IKW;

    function IKW(mbox, coord, color, width, height, depth) {
      this.mbox = mbox;
      this.coord = coord;
      this.color = color;
      this.width = width;
      this.height = height;
      this.depth = depth;
      this.viewPlanes = __bind(this.viewPlanes, this);
      this.viewXyzsRgbs = __bind(this.viewXyzsRgbs, this);
      this.flotExpr = __bind(this.flotExpr, this);
      this.mathbox = this.mbox.mathbox;
      this.build = this.createBuild();
      this.ni = 0;
      this.nt = 4;
    }

    IKW.prototype.createBuild = function() {
      var args, build;
      args = {
        name: 'Muse',
        plane: 'Information',
        op: ''
      };
      build = new Build(args);
      return build;
    };

    IKW.prototype.canvasContext = function() {
      var canvas, ctx;
      canvas = document.querySelector('canvas');
      ctx = canvas.getContext('2d');
      if (ctx == null) {
        ctx = canvas.getContext('webgl');
      }
      if (ctx == null) {
        Util.log('MBox.IKW.canvasContext() null');
      }
      return ctx;
    };

    IKW.prototype.canvasText = function(icon, x, y) {
      var ctx, uc;
      uc = Vis.unicode(icon);
      ctx = this.canvasContext();
      ctx.font = 'bold 24px FontAwesome';
      ctx.fillText(uc, x, y);
    };

    IKW.prototype.contextFont = function(fontSpec) {
      var ctx;
      if (fontSpec == null) {
        fontSpec = '36px FontAwesome';
      }
      ctx = this.canvasContext();
      ctx.font = fontSpec;
      Util.log('MBox.IKW.contextFont()', fontSpec);
    };

    IKW.prototype.logContextFont = function(msg) {
      var ctx;
      ctx = this.canvasContext();
      Util.log('MBox.IKW().logContextFont', msg, ctx.font);
    };

    IKW.prototype.museCartesian = function(range, scale, divide) {
      var view;
      if (range == null) {
        range = [[0, 120], [0, 120], [0, 120]];
      }
      if (scale == null) {
        scale = [2, 2, 2];
      }
      if (divide == null) {
        divide = [12, 12];
      }
      this.mathbox.camera({
        position: [3, 3, 3],
        proxy: true
      });
      view = this.mathbox.cartesian({
        range: range,
        scale: scale
      });
      this.coord.axesXYZ(view, 8, 0xFFFFFF);
      this.coord.gridXYZ(view, 4, 0xFFFFFF, divide[1], 0.7, '10');
      this.coord.tickXYZ(view, 64, 0xFFFFFF, divide[2], 2);
      return view;
    };

    IKW.prototype.createArrays = function() {
      var c, col, con, conb, conc, cone, conp, conv, cubc, cubp, flo, flob, floc, floe, flop, flow, h, hexc, hexi, hexp, hexq, hext, i, key, pipb, pipc, pipe, pipp, pipv, pla, plane, practice, prci, prcp, prct, row, sprac, studies, study, v, x, xyzs, y, z, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      xyzs = [];
      cubp = [];
      cubc = [];
      hexp = [];
      hexc = [];
      hexq = [];
      hext = [];
      hexi = [];
      prcp = [];
      prct = [];
      prci = [];
      conv = [];
      conc = [];
      conb = [];
      cone = [];
      conp = [];
      flow = [];
      floc = [];
      flob = [];
      floe = [];
      flop = [];
      pipv = [];
      pipc = [];
      pipb = [];
      pipe = [];
      pipp = [];
      sprac = 10;
      _ref = [
        {
          name: 'Information',
          z: 105
        }, {
          name: 'Augment',
          z: 75
        }, {
          name: 'Knowledge',
          z: 45
        }, {
          name: 'Wisdom',
          z: 15
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        plane = _ref[_i];
        _ref1 = [
          {
            name: 'Learn',
            y: 100
          }, {
            name: 'Do',
            y: 60
          }, {
            name: 'Share',
            y: 20
          }
        ];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          row = _ref1[_j];
          _ref2 = [
            {
              name: 'Embrace',
              x: 20
            }, {
              name: 'Innovate',
              x: 60
            }, {
              name: 'Encourage',
              x: 100
            }
          ];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            col = _ref2[_k];
            x = col.x;
            y = row.y;
            z = plane.z;
            xyzs.push([x, y, z, 1]);
            this.cubeFaces(x, y, z, sprac, cubp);
            practice = this.build.getPractice(plane.name, row.name, col.name);
            studies = this.build.getStudies(plane.name, practice.name);
            for (key in studies) {
              study = studies[key];
              this.fourTier(x, y, z, 4, study, hexp, hexc, hexq, hext, hexi);
            }
            _ref3 = practice.hsv, h = _ref3[0], c = _ref3[1], v = _ref3[2];
            for (i = _l = 0; _l < 6; i = ++_l) {
              cubc.push(Vis.toRgbHsv(h, c, v, true));
            }
            prcp.push([x, y - sprac + 2, z, 1]);
            prct.push(practice.name);
            prci.push("" + (Vis.unicode(practice.icon)));
          }
          _ref4 = [
            {
              name: 'west',
              x: 40,
              hsv: {
                h: 90,
                s: 60,
                v: 90
              },
              colName: 'Embrace'
            }, {
              name: 'east',
              x: 80,
              hsv: {
                h: 0,
                s: 60,
                v: 90
              },
              colName: 'Innovate'
            }
          ];
          for (_m = 0, _len3 = _ref4.length; _m < _len3; _m++) {
            con = _ref4[_m];
            practice = this.build.getPractice(plane.name, row.name, con.colName);
            this.convey(practice, 'east', con.x, row.y, plane.z, sprac, practice.hsv, conv, conc, conb, cone, conp);
          }
        }
        _ref5 = [
          {
            name: 'north',
            y: 80,
            rowName: 'Learn'
          }, {
            name: 'south',
            y: 40,
            rowName: 'Do'
          }
        ];
        for (_n = 0, _len4 = _ref5.length; _n < _len4; _n++) {
          flo = _ref5[_n];
          _ref6 = [
            {
              name: 'Embrace',
              x: 20,
              hsv: {
                h: 210,
                s: 60,
                v: 90
              }
            }, {
              name: 'Innovate',
              x: 60,
              hsv: {
                h: 60,
                s: 60,
                v: 90
              }
            }, {
              name: 'Encourage',
              x: 100,
              hsv: {
                h: 255,
                s: 60,
                v: 90
              }
            }
          ];
          for (_o = 0, _len5 = _ref6.length; _o < _len5; _o++) {
            col = _ref6[_o];
            practice = this.build.getPractice(plane.name, flo.rowName, col.name);
            this.flow(practice, 'south', col.x, flo.y, plane.z, sprac, practice.hsv, flow, floc, flob, floe, flop);
          }
        }
      }
      _ref7 = [
        {
          name: 'Information',
          z: 90
        }, {
          name: 'Augment',
          z: 60
        }, {
          name: 'Knowledge',
          z: 30
        }
      ];
      for (_p = 0, _len6 = _ref7.length; _p < _len6; _p++) {
        pla = _ref7[_p];
        _ref8 = [
          {
            name: 'Learn',
            y: 100
          }, {
            name: 'Do',
            y: 60
          }, {
            name: 'Share',
            y: 20
          }
        ];
        for (_q = 0, _len7 = _ref8.length; _q < _len7; _q++) {
          row = _ref8[_q];
          _ref9 = [
            {
              name: 'Embrace',
              x: 20
            }, {
              name: 'Innovate',
              x: 60
            }, {
              name: 'Encourage',
              x: 100
            }
          ];
          for (_r = 0, _len8 = _ref9.length; _r < _len8; _r++) {
            col = _ref9[_r];
            practice = this.build.getPractice(pla.name, row.name, col.name);
            this.conduit(practice, 'next', col.x, row.y, pla.z, sprac, practice.hsv, pipv, pipc, pipb, pipe, pipp);
          }
        }
      }
      return [xyzs, cubp, cubc, hexp, hexc, hexq, hext, hexi, prcp, prct, prci, conv, conc, conb, cone, conp, flow, floc, flob, floe, flop, pipv, pipc, pipb, pipe, pipp];
    };

    IKW.prototype.cubePlanes = function(build) {
      var col, colKey, conduit, convey, flow, h, i, pln, plnKey, prac, practice, row, rowKey, s, sprac, studies, study, studyKey, tier, v, x, y, z, _i, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      sprac = 10;
      _ref = build.Planes;
      for (plnKey in _ref) {
        if (!__hasProp.call(_ref, plnKey)) continue;
        pln = _ref[plnKey];
        if (plnKey !== 'Hues') {
          _ref1 = build.Rows;
          for (rowKey in _ref1) {
            if (!__hasProp.call(_ref1, rowKey)) continue;
            row = _ref1[rowKey];
            _ref2 = build.Columns;
            for (colKey in _ref2) {
              if (!__hasProp.call(_ref2, colKey)) continue;
              col = _ref2[colKey];
              x = col.cube.x;
              y = row.cube.y;
              z = pln.cube.z;
              practice = this.build.getPractice(pln.name, row.name, col.name);
              studies = this.build.getStudies(pln.name, practice.name);
              prac = pln.prac;
              tier = pln.tier;
              _ref3 = practice.hsv, h = _ref3[0], s = _ref3[1], v = _ref3[2];
              this.cubeFaces(x, y, z, sprac, prac.faces);
              for (i = _i = 0; _i < 6; i = ++_i) {
                prac.rgbs.push(Vis.toRgbHsv(h, s, v, true));
              }
              prac.centers.push([x, y - sprac + 2, z, 1]);
              prac.pracs.push(practice.name);
              prac.icons.push("" + (Vis.unicode(practice.icon)));
              for (studyKey in studies) {
                study = studies[studyKey];
                this.fourTier(x, y, z, 4, study, tier.hexes, tier.rgbs, tier.centers, tier.studies, tier.icons);
              }
            }
          }
        }
      }
      _ref4 = build.Planes;
      for (plnKey in _ref4) {
        if (!__hasProp.call(_ref4, plnKey)) continue;
        pln = _ref4[plnKey];
        if (this.inIAKW(plnKey)) {
          _ref5 = build.Rows;
          for (rowKey in _ref5) {
            if (!__hasProp.call(_ref5, rowKey)) continue;
            row = _ref5[rowKey];
            _ref6 = build.Columns;
            for (colKey in _ref6) {
              if (!__hasProp.call(_ref6, colKey)) continue;
              col = _ref6[colKey];
              if (!(colKey !== 'Encourage')) {
                continue;
              }
              practice = this.build.getPractice(pln.name, row.name, col.name);
              convey = pln.convey;
              this.convey(practice, 'east', col.cube.xc, row.cube.y, pln.cube.z, sprac, practice.hsv, convey.rects, convey.rgbs, convey.begs, convey.ends, convey.centers);
            }
          }
        }
      }
      _ref7 = build.Planes;
      for (plnKey in _ref7) {
        if (!__hasProp.call(_ref7, plnKey)) continue;
        pln = _ref7[plnKey];
        if (this.inIAKW(plnKey)) {
          _ref8 = build.Rows;
          for (rowKey in _ref8) {
            if (!__hasProp.call(_ref8, rowKey)) continue;
            row = _ref8[rowKey];
            if (rowKey !== 'Share') {
              _ref9 = build.Columns;
              for (colKey in _ref9) {
                if (!__hasProp.call(_ref9, colKey)) continue;
                col = _ref9[colKey];
                practice = this.build.getPractice(pln.name, row.name, col.name);
                flow = pln.flow;
                this.flow(practice, 'south', col.cube.x, row.cube.yc, pln.cube.z, sprac, practice.hsv, flow.rects, flow.rgbs, flow.begs, flow.ends, flow.centers);
              }
            }
          }
        }
      }
      _ref10 = build.Planes;
      for (plnKey in _ref10) {
        if (!__hasProp.call(_ref10, plnKey)) continue;
        pln = _ref10[plnKey];
        if (this.inIAK(plnKey)) {
          _ref11 = build.Rows;
          for (rowKey in _ref11) {
            if (!__hasProp.call(_ref11, rowKey)) continue;
            row = _ref11[rowKey];
            _ref12 = build.Columns;
            for (colKey in _ref12) {
              if (!__hasProp.call(_ref12, colKey)) continue;
              col = _ref12[colKey];
              practice = this.build.getPractice(pln.name, row.name, col.name);
              conduit = pln.conduit;
              this.conduit(practice, 'next', col.x, row.y, pln.z, sprac, practice.hsv, conduit.rects, conduit.rgbs, conduit.begs, conduit.ends, conduit.centers);
            }
          }
        }
      }
      return build.Planes;
    };

    IKW.prototype.inIAKW = function(plane) {
      var array;
      array = ['Information', 'Augment', 'Knowledge', 'Wisdom'];
      return Util.inArray(array, plane);
    };

    IKW.prototype.inIAK = function(plane) {
      var array;
      array = ['Information', 'Augment', 'Knowledge'];
      return Util.inArray(array, plane);
    };

    IKW.prototype.cubeFaces = function(x, y, z, s, cubp) {
      cubp.push([[x - s, y - s, z - s], [x - s, y + s, z - s], [x - s, y + s, z + s], [x - s, y - s, z + s]]);
      cubp.push([[x + s, y - s, z - s], [x + s, y + s, z - s], [x + s, y + s, z + s], [x + s, y - s, z + s]]);
      cubp.push([[x - s, y - s, z - s], [x + s, y - s, z - s], [x + s, y - s, z + s], [x - s, y - s, z + s]]);
      cubp.push([[x - s, y + s, z - s], [x + s, y + s, z - s], [x + s, y + s, z + s], [x - s, y + s, z + s]]);
      cubp.push([[x - s, y - s, z - s], [x + s, y - s, z - s], [x + s, y + s, z - s], [x - s, y + s, z - s]]);
      cubp.push([[x - s, y - s, z + s], [x + s, y - s, z + s], [x + s, y + s, z + s], [x - s, y + s, z + s]]);
    };

    IKW.prototype.convey = function(practice, dir, x, y, z, s, hsv, conv, conc, conb, cone, conp) {
      var beg, end, q, _ref;
      q = s / 2;
      _ref = this.build.connectName(practice, dir), beg = _ref[0], end = _ref[1];
      conv.push([[x - s, y - q, z], [x - s, y + q, z], [x + s, y + q, z], [x + s, y - q, z]]);
      conc.push(Vis.toRgbHsv(hsv[0], hsv[1], hsv[2], true));
      conb.push(beg);
      cone.push(end);
      conp.push([x, y, z]);
    };

    IKW.prototype.flow = function(practice, dir, x, y, z, s, hsv, flow, floc, flob, floe, flop) {
      var beg, end, q, _ref;
      q = s / 2;
      _ref = this.build.connectName(practice, dir), beg = _ref[0], end = _ref[1];
      flow.push([[x - q, y - s, z], [x - q, y + s, z], [x + q, y + s, z], [x + q, y - s, z]]);
      floc.push(Vis.toRgbHsv(hsv[0], hsv[1], hsv[2], true));
      flob.push(beg);
      floe.push(end);
      flop.push([x, y, z]);
    };

    IKW.prototype.conduit = function(practice, dir, x, y, z, s, hsv, pipv, pipc, pipb, pipe, pipp) {
      var beg, end, q, _ref;
      q = s / 2;
      _ref = this.build.connectName(practice, dir), beg = _ref[0], end = _ref[1];
      pipv.push([[x - q, y, z - q], [x + q, y, z - q], [x + q, y, z + q], [x - q, y, z + q]]);
      pipc.push(Vis.toRgbHsv(hsv[0], hsv[1], hsv[2], true));
      pipb.push(beg);
      pipe.push(end);
      pipp.push([x, y, z]);
    };

    IKW.prototype.fourTier = function(x, y, z, s, study, hexp, hexc, hexq, hext, hexi) {
      var cos30s, cos30y;
      cos30s = Vis.cos(30) * s;
      cos30y = cos30s * 2;
      switch (study.dir) {
        case 'north':
        case 'northd':
          hexp.push(this.hex(x, y + cos30s, z, s, hexq));
          break;
        case 'west':
        case 'westd':
          hexp.push(this.hex(x - 1.5 * s, y, z, s, hexq));
          break;
        case 'east':
        case 'eastd':
          hexp.push(this.hex(x + 1.5 * s, y, z, s, hexq));
          break;
        case 'south':
        case 'southd':
          hexp.push(this.hex(x, y - cos30s, z, s, hexq));
          break;
        case 'nw':
        case 'nwd':
          hexp.push(this.hex(x - 1.5 * s, y + cos30y, z, s, hexq));
          break;
        case 'ne':
        case 'ned':
          hexp.push(this.hex(x + 1.5 * s, y + cos30y, z, s, hexq));
          break;
        case 'sw':
        case 'swd':
          hexp.push(this.hex(x - 1.5 * s, y - cos30y, z, s, hexq));
          break;
        case 'se':
        case 'sed':
          hexp.push(this.hex(x + 1.5 * s, y - cos30y, z, s, hexq));
          break;
        default:
          hexp.push(this.hex(x, y + cos30s, z, s, hexq));
      }
      hexc.push(Vis.toRgba(study));
      hext.push(study.name);
      hexi.push(Vis.unicode(study.icon));
    };

    IKW.prototype.hex = function(x, y, z, s, hexq) {
      var ang, pts, _i, _len, _ref;
      hexq.push([x, y, z]);
      pts = [];
      _ref = [0, 60, 120, 180, 240, 300];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ang = _ref[_i];
        pts.push([x + s * Vis.cos(ang), y + s * Vis.sin(ang), z]);
      }
      return pts;
    };

    IKW.prototype.studySlots = function(x, y, z, sprac, subs) {
      var s, t, u, _i, _j, _len, _len1, _ref, _ref1;
      s = sprac / 3;
      _ref = [s, s * 3, s * 5];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _ref1 = [s, s * 3, s * 5];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          u = _ref1[_j];
          this.cubeFaces(x + t - sprac, y + u - sprac, z - s * 2, s, subs);
        }
      }
    };

    IKW.prototype.flotExpr = function(emit, el) {
      return emit(el('div', {}, 'Practice'));
    };

    IKW.prototype.viewXyzsRgbs = function(view) {
      var conb, conc, cone, conp, cont, conv, cubc, cubp, flob, floc, floe, flop, flow, hexc, hexi, hexp, hexq, hext, i, len, pipb, pipc, pipe, pipp, pipv, prci, prcp, prct, xyzs, _i, _ref;
      _ref = this.createArrays(), xyzs = _ref[0], cubp = _ref[1], cubc = _ref[2], hexp = _ref[3], hexc = _ref[4], hexq = _ref[5], hext = _ref[6], hexi = _ref[7], prcp = _ref[8], prct = _ref[9], prci = _ref[10], conv = _ref[11], conc = _ref[12], conb = _ref[13], cone = _ref[14], conp = _ref[15], flow = _ref[16], floc = _ref[17], flob = _ref[18], floe = _ref[19], flop = _ref[20], pipv = _ref[21], pipc = _ref[22], pipb = _ref[23], pipe = _ref[24], pipp = _ref[25];
      cont = [];
      len = conb.length;
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        cont.push(conb[i] + ' ' + cone[i]);
      }
      view.array({
        data: xyzs,
        id: "xyzs",
        items: 1,
        channels: 4,
        live: false,
        width: xyzs.length
      });
      view.array({
        data: cubp,
        id: "cubp",
        items: 4,
        channels: 3,
        live: false,
        width: cubp.length
      });
      view.array({
        data: cubc,
        id: "cubc",
        items: 1,
        channels: 4,
        live: false,
        width: cubc.length
      });
      view.array({
        data: hexp,
        id: "hexp",
        items: 6,
        channels: 3,
        live: false,
        width: hexp.length
      });
      view.array({
        data: hexc,
        id: "hexc",
        items: 1,
        channels: 4,
        live: false,
        width: hexc.length
      });
      view.array({
        data: hexq,
        id: "hexq",
        items: 1,
        channels: 3,
        live: false,
        width: hexq.length
      });
      view.array({
        data: prcp,
        id: "prcp",
        items: 1,
        channels: 4,
        live: false,
        width: prcp.length
      });
      view.array({
        data: conv,
        id: "conv",
        items: 4,
        channels: 3,
        live: false,
        width: conv.length
      });
      view.array({
        data: conc,
        id: "conc",
        items: 1,
        channels: 4,
        live: false,
        width: conc.length
      });
      view.array({
        data: conp,
        id: "conp",
        items: 1,
        channels: 3,
        live: false,
        width: conp.length
      });
      view.array({
        data: flow,
        id: "flow",
        items: 4,
        channels: 3,
        live: false,
        width: flow.length
      });
      view.array({
        data: floc,
        id: "floc",
        items: 1,
        channels: 4,
        live: false,
        width: floc.length
      });
      view.array({
        data: flop,
        id: "flop",
        items: 1,
        channels: 3,
        live: false,
        width: flop.length
      });
      view.array({
        data: pipv,
        id: "pipv",
        items: 4,
        channels: 3,
        live: false,
        width: pipv.length
      });
      view.array({
        data: pipc,
        id: "pipc",
        items: 1,
        channels: 4,
        live: false,
        width: pipc.length
      });
      view.array({
        data: pipp,
        id: "pipp",
        items: 1,
        channels: 3,
        live: false,
        width: pipp.length
      });
      view.face({
        points: "#cubp",
        colors: "#cubc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 1,
        opacity: 0.3
      });
      view.face({
        points: "#hexp",
        colors: "#hexc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 2,
        opacity: 1.0
      });
      view.face({
        points: "#conv",
        colors: "#conc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 3,
        opacity: 0.5
      });
      view.face({
        points: "#flow",
        colors: "#floc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 3,
        opacity: 0.5
      });
      view.face({
        points: "#pipv",
        colors: "#pipc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 3,
        opacity: 0.5
      });
      view.text({
        data: prct,
        font: 'Font Awesome',
        width: prct.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#prcp",
        color: '#ffffff',
        snap: false,
        size: 24,
        offset: [0, -72],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: prci,
        font: 'FontAwesome',
        width: prci.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#prcp",
        color: '#ffffff',
        snap: false,
        size: 72,
        offset: [0, -6],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: hext,
        font: 'Font Awesome',
        width: hext.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#hexq",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, -15],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: hexi,
        font: 'FontAwesome',
        width: hexi.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#hexq",
        color: '#000000',
        snap: false,
        size: 36,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: cont,
        font: 'FontAwesome',
        width: cont.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#conp",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: flob,
        font: 'FontAwesome',
        width: flob.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#flop",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: floe,
        font: 'FontAwesome',
        width: floe.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#flop",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, -15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: pipb,
        font: 'FontAwesome',
        width: pipb.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#pipp",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, -15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: pipe,
        font: 'FontAwesome',
        width: pipe.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#pipp",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
    };

    IKW.prototype.doInfo = function() {
      return Util.log('IKW plane', 'Info');
    };

    IKW.prototype.doData = function() {
      return Util.log('IKW plane', 'Augm');
    };

    IKW.prototype.doData = function() {
      return Util.log('IKW plane', 'Data');
    };

    IKW.prototype.doKnow = function() {
      return Util.log('IKW plane', 'Know');
    };

    IKW.prototype.doWise = function() {
      return Util.log('IKW plane', 'Wise');
    };

    IKW.prototype.viewPlanes = function(view) {
      var cond, conv, flow, i, len, p, planes, pln, plnKey, prac, q, tier, _i;
      planes = this.cubePlanes(this.build);
      for (plnKey in planes) {
        if (!__hasProp.call(planes, plnKey)) continue;
        pln = planes[plnKey];
        p = plnKey.charAt(0);
        q = '#' + p;
        prac = pln.prac;
        tier = pln.tier;
        conv = pln.convey;
        flow = pln.flow;
        cond = pln.conduit;
        conv.pairs = [];
        len = conv.begs.length;
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          conv.pairs.push(conv.begs[i] + ' ' + conv.ends[i]);
        }
        view.array({
          data: prac.faces,
          id: p + "faces",
          items: 4,
          channels: 3,
          live: false,
          width: prac.faces.length
        });
        view.array({
          data: prac.rgbs,
          id: p + "frgbs",
          items: 1,
          channels: 4,
          live: false,
          width: prac.rgbs.length
        });
        view.array({
          data: prac.centers,
          id: p + "pcens",
          items: 1,
          channels: 4,
          live: false,
          width: prac.centers.length
        });
        view.array({
          data: tier.hexes,
          id: p + "hexes",
          items: 6,
          channels: 3,
          live: false,
          width: tier.hexes.length
        });
        view.array({
          data: tier.rgbs,
          id: p + "hrgbs",
          items: 1,
          channels: 4,
          live: false,
          width: tier.rgbs.length
        });
        view.array({
          data: tier.centers,
          id: p + "hcens",
          items: 1,
          channels: 3,
          live: false,
          width: tier.centers.length
        });
        view.array({
          data: conv.rects,
          id: p + "crecs",
          items: 4,
          channels: 3,
          live: false,
          width: conv.rects.length
        });
        view.array({
          data: conv.rgbs,
          id: p + "crgbs",
          items: 1,
          channels: 4,
          live: false,
          width: conv.rgbs.length
        });
        view.array({
          data: conv.centers,
          id: p + "ccens",
          items: 1,
          channels: 3,
          live: false,
          width: conv.centers.length
        });
        view.array({
          data: flow.rects,
          id: p + "frecs",
          items: 4,
          channels: 3,
          live: false,
          width: flow.rects.length
        });
        view.array({
          data: flow.rgbs,
          id: p + "frgbx",
          items: 1,
          channels: 4,
          live: false,
          width: flow.rgbs.length
        });
        view.array({
          data: flow.centers,
          id: p + "fcens",
          items: 1,
          channels: 3,
          live: false,
          width: flow.centers.length
        });
        view.array({
          data: cond.rects,
          id: p + "precs",
          items: 4,
          channels: 3,
          live: false,
          width: cond.rects.length
        });
        view.array({
          data: cond.rgbs,
          id: p + "prgbs",
          items: 1,
          channels: 4,
          live: false,
          width: cond.rgbs.length
        });
        view.array({
          data: cond.centers,
          id: p + "pcenx",
          items: 1,
          channels: 3,
          live: false,
          width: cond.centers.length
        });
        view.face({
          points: q + "faces",
          colors: q + "frgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 1,
          opacity: 0.3
        });
        view.face({
          points: q + "hexes",
          colors: q + "hrgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 2,
          opacity: 1.0
        });
        view.face({
          points: q + "crecs",
          colors: q + "crgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 3,
          opacity: 0.5
        });
        view.face({
          points: q + "frecs",
          colors: q + "frgbx",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 3,
          opacity: 0.5
        });
        view.face({
          points: q + "precs",
          colors: q + "prgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 3,
          opacity: 0.5
        });
        view.text({
          data: prac.pracs,
          font: 'Font Awesome',
          width: prac.pracs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcens",
          color: '#ffffff',
          snap: false,
          size: 24,
          offset: [0, -72],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: prac.icons,
          font: 'FontAwesome',
          width: prac.icons.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcens",
          color: '#ffffff',
          snap: false,
          size: 72,
          offset: [0, -6],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: tier.studies,
          font: 'Font Awesome',
          width: tier.studies.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "hcens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, -15],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: tier.icons,
          font: 'FontAwesome',
          width: tier.icons.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "hcens",
          color: '#000000',
          snap: false,
          size: 36,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: conv.pairs,
          font: 'FontAwesome',
          width: conv.pairs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "ccens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: flow.begs,
          font: 'FontAwesome',
          width: flow.begs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "fcens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: flow.ends,
          font: 'FontAwesome',
          width: flow.ends.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "fcens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, -15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: cond.begs,
          font: 'FontAwesome',
          width: cond.begs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcenx",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, -15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: cond.ends,
          font: 'FontAwesome',
          width: cond.ends.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcenx",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
      }
    };

    IKW.prototype.toRgbHexxFaces = function(len) {
      var prac, rgba, rgbh, _i, _j, _len, _ref;
      rgbh = [];
      for (prac = _i = 0; 0 <= len ? _i < len : _i > len; prac = 0 <= len ? ++_i : --_i) {
        _ref = [[180, 50, 90], [60, 50, 90], [90, 50, 90], [30, 50, 90]];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          rgba = _ref[_j];
          rgbh.push(Vis.toRgbHsv(rgba[0], rgba[1], rgba[2], true));
        }
      }
      return rgbh;
    };

    IKW.prototype.musePoints = function() {
      var obj,
        _this = this;
      obj = {
        id: 'musePoints',
        width: this.width,
        height: this.height,
        depth: this.depth,
        items: 1,
        channels: 4
      };
      obj.expr = function(emit, x, y, z) {
        return emit(_this.center(x), _this.center(y), _this.center(z), 1);
      };
      return obj;
    };

    IKW.prototype.center = function(u) {
      var v;
      v = u;
      if (0 <= u && u < 40) {
        v = 20;
      }
      if (80 <= u && u < 80) {
        v = 60;
      }
      if (80 <= u && u <= 120) {
        v = 100;
      }
      return v;
    };

    IKW.prototype.museColors = function() {
      var obj,
        _this = this;
      obj = {
        id: 'museColors',
        width: this.width,
        height: this.height,
        depth: this.depth,
        channels: 4
      };
      obj.expr = function(emit, x, y, z) {
        var a, b, g, r, _ref;
        _ref = _this.practiceColor(x, y, z, i, j, k), r = _ref[0], g = _ref[1], b = _ref[2], a = _ref[3];
        return emit(r, g, b, a);
      };
      return obj;
    };

    IKW.prototype.musePoint = function() {
      var obj;
      obj = {
        id: "musePoint",
        points: "#musePoints",
        colors: "#museColors",
        shape: "square",
        color: 0xffffff,
        size: 600
      };
      return obj;
    };

    IKW.prototype.museText = function() {
      var obj, str,
        _this = this;
      str = function(n) {
        return Util.toStr(n);
      };
      obj = {
        font: 'Helvetica',
        style: 'bold',
        width: 16,
        height: 5,
        depth: 2
      };
      obj.expr = function(emit, i, j, k, time) {
        Util.noop(time);
        if (_this.ni < _this.nt) {
          _this.ni = _this.ni + 1;
        }
        return emit("Hi " + (str(i)) + " " + (str(j)) + " " + (str(k)));
      };
      return obj;
    };

    IKW.prototype.museLabel = function() {
      return {
        points: "#musePoints",
        color: '#000000',
        snap: false,
        outline: 2,
        size: 24,
        depth: .5,
        zIndex: 5
      };
    };

    IKW.prototype.museCube = function(view) {
      view.volume(this.musePoints());
      view.volume(this.museColors());
      return view.point(this.musePoint()).text(this.museText()).label(this.museLabel());
    };

    IKW.prototype.practiceColor = function(x, y, z) {
      var c, hue, v;
      if (0 <= x && x < 40) {
        hue = 210;
      } else if (40 <= x && x < 80) {
        hue = 60;
      } else if (80 <= x && x <= 120) {
        hue = 300;
      }
      if (0 <= y && y < 40) {
        c = 40;
      } else if (40 <= y && y < 80) {
        c = 60;
      } else if (80 <= y && y <= 120) {
        c = 80;
      }
      if (0 <= z && z < 40) {
        v = 40;
      } else if (40 <= z && z < 80) {
        v = 60;
      } else if (80 <= z && z <= 120) {
        v = 80;
      }
      return Vis.toRgbHsv(hue, c, v, true);
    };

    /*
    
    #iew.html(  { width:1, height:1, depth:1, expr:@flotExpr } )
    #iew.html(  { data:flot, width:flot.length, height:1, depth:1 } )
    #iew.dom(   { points:"#flop", color:'#000000', snap:false, size:16, offset:[0, 15], depth:0.5, zIndex:4, outline:0 } )
    
    fontFace:( name, uri ) ->
      fontFace = new FontFace( name, uri ) # "url(x)"
      fontFace.load()
    
    docFonts:( fontSpec='36px FontAwesome' ) ->
      document.fonts.load( fontSpec )
        .then( Util.log( 'MBox.IKW().docFonts loaded', fontSpec), Util.error('MBox.IKW.docFonts()' ) )
      return
    */


    return IKW;

  })();

}).call(this);
