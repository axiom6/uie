// Generated by CoffeeScript 1.10.0
(function() {
  var Names, Vis, chroma;

  chroma = require('chroma-js');

  Vis = require('js/util/Vis');

  Names = (function() {
    var MBox;

    module.exports = Names;

    MBox = require('js/mbox/MBox');

    MBox.Names = Names;

    function Names(mbox) {
      this.mbox = mbox;
      this.colors = prepareColorsData(GLOBAL_COLOR_LIST, GLOBAL_WIKI_COLOR_LIST);
    }

    Names.prototype.names = function(find, colors) {
      var a, b, g, hex, hue, i, name, r, ref, results;
      results = [];
      for (hue = i = 0; i <= 360; hue = ++i) {
        ref = Vis.toRgbHsv(hue, 100, 100), r = ref[0], g = ref[1], b = ref[2], a = ref[3];
        hex = chroma.rgb(r * 255, g * 255, b * 255).hex();
        name = find(hex, colors);
        results.push(Util.log({
          name: name.name,
          hue: hue,
          rgb: name.rgb,
          hex: name.hex
        }));
      }
      return results;
    };

    Names.prototype.namesAll = function(find, colors) {
      var a, b, c, g, hex, hue, i, name, r, results, v;
      results = [];
      for (hue = i = 0; i <= 360; hue = ++i) {
        results.push((function() {
          var j, results1;
          results1 = [];
          for (c = j = 0; j < 100; c = j += 10) {
            results1.push((function() {
              var k, ref, results2;
              results2 = [];
              for (v = k = 0; k < 100; v = k += 10) {
                ref = Vis.toRgbHsv(hue, c, v), r = ref[0], g = ref[1], b = ref[2], a = ref[3];
                hex = chroma.rgb(r * 255, g * 255, b * 255).hex();
                name = find(hex, colors);
                results2.push(Util.log({
                  name: name.name,
                  hue: hue,
                  rgb: name.rgb,
                  hex: name.hex,
                  sat: Util.toInt(rad * 100),
                  lum: Util.toInt(v * 100)
                }));
              }
              return results2;
            })());
          }
          return results1;
        })());
      }
      return results;
    };

    Names.prototype.namesLch = function(find, colors) {
      var b, g, hex, hue, i, lch, lum, name, r, results, sat;
      results = [];
      for (hue = i = 0; i <= 360; hue = i += 30) {
        results.push((function() {
          var j, results1;
          results1 = [];
          for (sat = j = 0; j < 100; sat = j += 10) {
            results1.push((function() {
              var k, ref, results2;
              results2 = [];
              for (lum = k = 0; k < 100; lum = k += 10) {
                ref = Vis.toRgbLch(lum, sat, hue), r = ref[0], g = ref[1], b = ref[2];
                hex = chroma.rgb(r * 255, g * 255, b * 255).hex();
                lch = chroma.rgb(r * 255, g * 255, b * 255).lch();
                name = find(hex, colors);
                results2.push(Util.log({
                  name: name.name,
                  hue: hue,
                  rgb: name.rgb,
                  hex: name.hex,
                  sat: sat,
                  lum: lum,
                  lch: lch
                }));
              }
              return results2;
            })());
          }
          return results1;
        })());
      }
      return results;
    };

    Names.prototype.namesRgb = function(find, colors) {
      var b, g, hex, i, name, r, results;
      results = [];
      for (r = i = 0; i <= 255; r = i += 5) {
        results.push((function() {
          var j, results1;
          results1 = [];
          for (g = j = 0; j <= 255; g = j += 5) {
            results1.push((function() {
              var k, results2;
              results2 = [];
              for (b = k = 0; k <= 255; b = k += 5) {
                hex = chroma.rgb(r, g, b).hex();
                name = find(hex, colors);
                results2.push(Util.log({
                  name: name.name,
                  rgb1: [r, g, b],
                  rgb2: name.rgb,
                  hex: name.hex
                }));
              }
              return results2;
            })());
          }
          return results1;
        })());
      }
      return results;
    };

    return Names;

  })();

}).call(this);
