// Generated by CoffeeScript 1.12.2
(function() {
  var $, UI, View,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  UI = require('js/ui/UI');

  View = (function() {
    module.exports = View;

    function View(ui, stream) {
      var ref;
      this.ui = ui;
      this.stream = stream;
      this.resize = bind(this.resize, this);
      this.speed = 400;
      this.$view = UI.$empty;
      this.plane = this.ui.plane;
      this.build = this.ui.build;
      this.margin = this.build.margin;
      this.ncol = this.plane.spec.ncol;
      this.nrow = this.plane.spec.nrow;
      ref = this.percents(this.nrow, this.ncol, this.margin), this.wpane = ref[0], this.hpane = ref[1], this.wview = ref[2], this.hview = ref[3], this.wscale = ref[4], this.hscale = ref[5];
      this.panes = this.createPanes();
      this.groups = this.createGroups(this.build, this.plane);
      this.overview = null;
      this.assignPanesToGroups(this.panes, this.groups);
      this.sizeCallback = null;
      this.paneCallback = null;
      this.lastPaneName = '';
      this.lastStudyName = '';
      this.lastTopicName = '';
      this.lastItemsName = '';
      this.emptyPane = new UI.Pane(this.ui, this.stream, this, this.build.None);
      this.allCells = [1, this.ncol, 1, this.nrow];
      this.select = {
        name: this.plane.name,
        intent: UI.Build.SelectPlane
      };
    }

    View.prototype.ready = function() {
      var group, html, htmlId, k, l, len, len1, pane, parent, ref, ref1;
      parent = $('#' + Util.getHtmlId('View', 'App'));
      htmlId = this.ui.htmlId('View');
      html = $("<div id=\"" + htmlId + "\" class=\"ikw-view-plane\"></div>");
      parent.append(html);
      this.$view = parent.find('#' + htmlId);
      ref = this.panes;
      for (k = 0, len = ref.length; k < len; k++) {
        pane = ref[k];
        pane.ready();
      }
      ref1 = this.groups;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        group = ref1[l];
        group.ready();
      }
      this.overview.ready();
      this.overview.hide();
      this.$view.append(this.$allIcon());
      this.subscribe();
    };

    View.prototype.subscribe = function() {
      return this.stream.subscribe('Select', (function(_this) {
        return function(select) {
          return _this.onSelect(select);
        };
      })(this));
    };

    View.prototype.percents = function(nrow, ncol, margin) {
      var hpane, hscale, hview, wpane, wscale, wview;
      wpane = 100 / ncol;
      hpane = 100 / nrow;
      wview = 1.0 - (margin.west + margin.east) / 100;
      hview = 1.0 - (margin.north + margin.south) / 100;
      wscale = 1.0 - (margin.west + (ncol - 1) * margin.width + margin.east) / 100;
      hscale = 1.0 - (margin.north + (nrow - 1) * margin.height + margin.south) / 100;
      return [wpane, hpane, wview, hview, wscale, hscale];
    };

    View.prototype.pc = function(v) {
      return v.toString() + (v !== 0 ? '%' : '');
    };

    View.prototype.xs = function(x) {
      return this.pc(x * this.wscale);
    };

    View.prototype.ys = function(y) {
      return this.pc(y * this.hscale);
    };

    View.prototype.left = function(j) {
      return j * this.wpane;
    };

    View.prototype.top = function(i) {
      return i * this.hpane;
    };

    View.prototype.width = function(m) {
      return m * this.wpane + (m - 1) * this.margin.width / this.wscale;
    };

    View.prototype.height = function(n) {
      return n * this.hpane + (n - 1) * this.margin.height / this.hscale;
    };

    View.prototype.widthpx = function() {
      return this.$view.innerWidth();
    };

    View.prototype.heightpx = function() {
      return this.$view.innerHeight();
    };

    View.prototype.wPanes = function() {
      return this.wview * this.widthpx();
    };

    View.prototype.hPanes = function() {
      return this.hview * this.heightpx();
    };

    View.prototype.north = function(top, height, h, scale, dy) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dy == null) {
        dy = 0;
      }
      return scale * (top - h + dy / this.hscale);
    };

    View.prototype.south = function(top, height, h, scale, dy) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dy == null) {
        dy = 0;
      }
      return scale * (top + height + dy / this.hscale);
    };

    View.prototype.east = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left + width + dx / this.wscale);
    };

    View.prototype.west = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left - w + dx / this.wscale);
    };

    View.prototype.isRow = function(specPaneGroup) {
      return specPaneGroup.css === 'ikw-row';
    };

    View.prototype.isCol = function(specPaneGroup) {
      return specPaneGroup.css === 'ikw-col';
    };

    View.prototype.jmin = function(cells) {
      return UI.jmin(cells);
    };

    View.prototype.positionUnionPane = function(unionCells, paneCells, spec, xscale, yscale) {
      var ip, iu, jp, ju, mp, mu, np, nu, ref, ref1;
      if (xscale == null) {
        xscale = 1.0;
      }
      if (yscale == null) {
        yscale = 1.0;
      }
      ref = UI.jmin(unionCells), ju = ref[0], mu = ref[1], iu = ref[2], nu = ref[3];
      ref1 = UI.jmin(paneCells), jp = ref1[0], mp = ref1[1], ip = ref1[2], np = ref1[3];
      return this.position((jp - ju) * this.ncol / mu, mp * this.ncol / mu, (ip - iu) * this.nrow / nu, np * this.nrow / nu, spec, xscale, yscale);
    };

    View.prototype.positionGroup = function(groupCells, spec, xscale, yscale) {
      var i, j, m, n, ref;
      if (xscale == null) {
        xscale = 1.0;
      }
      if (yscale == null) {
        yscale = 1.0;
      }
      ref = UI.jmin(groupCells), j = ref[0], m = ref[1], i = ref[2], n = ref[3];
      return this.position(j, m, i, n, spec, xscale, yscale);
    };

    View.prototype.position = function(j, m, i, n, spec, xscale, yscale) {
      var hStudy, height, left, top, wStudy, width;
      if (xscale == null) {
        xscale = 1.0;
      }
      if (yscale == null) {
        yscale = 1.0;
      }
      wStudy = spec.practice != null ? this.margin.wStudy : 0;
      hStudy = spec.practice != null ? this.margin.hStudy : 0;
      left = xscale * (this.left(j) + (wStudy + this.margin.west + j * this.margin.width) / this.wscale);
      top = yscale * (this.top(i) + (hStudy + this.margin.north + i * this.margin.height) / this.hscale);
      width = xscale * (this.width(m) - wStudy * 2 / this.wscale);
      height = yscale * (this.height(n) - hStudy * 2 / this.hscale);
      return [left, top, width, height];
    };

    View.prototype.positionpx = function(j, m, i, n, spec) {
      var height, left, ref, top, width;
      ref = this.position(j, m, i, n, spec, this.wscale, this.hscale), left = ref[0], top = ref[1], width = ref[2], height = ref[3];
      return [width * this.widthpx() / 100, height * this.heightpx() / 100];
    };

    View.prototype.reset = function(select) {
      var group, k, l, len, len1, pane, ref, ref1;
      this.select.name = select.name;
      this.select.intent = select.intent;
      ref = this.panes;
      for (k = 0, len = ref.length; k < len; k++) {
        pane = ref[k];
        pane.reset(this.select);
      }
      ref1 = this.groups;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        group = ref1[l];
        group.reset(this.select);
      }
    };

    View.prototype.resize = function() {
      var saveId;
      saveId = this.lastPaneName;
      this.lastPaneName = '';
      this.onSelect(UI.Build.select(saveId, 'View', UI.Build.SelectPractice));
      this.lastPaneName = saveId;
    };

    View.prototype.hide = function() {
      this.$view.hide();
    };

    View.prototype.show = function() {
      if (this.inPlane()) {
        this.$view.show();
      }
    };

    View.prototype.hideAll = function() {
      var group, k, l, len, len1, pane, ref, ref1;
      ref = this.panes;
      for (k = 0, len = ref.length; k < len; k++) {
        pane = ref[k];
        pane.hide();
      }
      ref1 = this.groups;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        group = ref1[l];
        group.hide();
      }
      if (this.overview) {
        this.overview.hide();
      }
      this.$view.hide();
    };

    View.prototype.hideGroups = function() {
      var group, k, len, ref;
      ref = this.groups;
      for (k = 0, len = ref.length; k < len; k++) {
        group = ref[k];
        group.hide();
      }
    };

    View.prototype.showAll = function() {
      var group, k, l, len, len1, pane, ref, ref1;
      if (!this.inPlane()) {
        return;
      }
      this.$view.hide();
      this.reset(this.select);
      ref = this.panes;
      for (k = 0, len = ref.length; k < len; k++) {
        pane = ref[k];
        pane.show();
      }
      ref1 = this.groups;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        group = ref1[l];
        group.show();
      }
      this.$view.show(this.speed, (function(_this) {
        return function() {
          if (_this.sizeCallback) {
            return _this.sizeCallback(_this);
          }
        };
      })(this));
    };

    View.prototype.onSelect = function(select) {
      var intent, name, ub;
      if (this.ui.notInPlane()) {
        return;
      }
      Util.msg('UI.view.select', select);
      name = select.name;
      intent = select.intent;
      ub = UI.Build;
      this.select = select;
      switch (intent) {
        case ub.SelectPlane:
          this.expandAllPanes();
          break;
        case ub.SelectAllPanes:
          this.expandAllPanes();
          break;
        case ub.SelectOverview:
          this.expandOverview();
          break;
        case ub.SelectGroup:
          this.expandGroup(name, intent);
          break;
        case ub.SelectRow:
          this.expandGroup(name, intent);
          break;
        case ub.SelectCol:
          this.expandGroup(name, intent);
          break;
        case ub.SelectPractice:
          this.expandPane(name);
          break;
        case ub.SelectStudy:
          this.expandStudy(name);
          break;
        case ub.SelectTopic:
          this.expandTopic(name);
          break;
        case ub.SelectItems:
          this.expandItems(name);
          break;
        default:
          Util.error('UI.View.select() name not processed for intent', name, select.intent);
      }
    };

    View.prototype.inPlane = function() {
      return this.plane.id === UI.ThePlane.id;
    };

    View.prototype.$allIcon = function() {
      var $all, htm, id, select;
      id = this.ui.htmlId(UI.Build.SelectAllPanes);
      htm = "<div id=\"" + id + "\" class=\"ikw-all-icon\"><i class=\"fa fa-th\"></i></div>";
      $all = $(htm);
      select = UI.Build.select('None', 'AllIcon', UI.Build.SelectAllPanes);
      this.stream.publish('Select', select, $all, 'click');
      $all.css({
        left: 0,
        top: 0,
        width: this.pc(this.margin.west),
        height: this.pc(this.margin.north)
      });
      return $all;
    };

    View.prototype.expandAllPanes = function() {
      this.hideAll();
      this.reset(this.reset);
      return this.showAll();
    };

    View.prototype.expandOverview = function() {
      this.hideAll();
      this.overview.page.onContent(UI.Build.content('Overview', 'View', UI.Build.SelectOverview));
      this.overview.show();
      return this.$view.show();
    };

    View.prototype.expandGroup = function(group, intent, callback) {
      var dells, gells, height, k, left, len, pane, paneCallback, pells, ref, ref1, top, ub, width;
      if (callback == null) {
        callback = null;
      }
      paneCallback = callback != null ? callback : this.paneCallback;
      group = this.getPaneOrGroup(group, true);
      ub = UI.Build;
      if (group == null) {
        return;
      }
      this.hideAll();
      if (group.panes != null) {
        ref = group.panes;
        for (k = 0, len = ref.length; k < len; k++) {
          pane = ref[k];
          pane.show();
          gells = intent === ub.SelectGroup && (group.spec.gells != null) ? group.spec.gells : group.cells;
          dells = intent === ub.SelectGroup && (group.spec.dells != null) ? group.spec.dells : group.cells;
          pells = intent === ub.SelectGroup && (pane.spec.gells != null) ? pane.spec.gells : pane.cells;
          ref1 = this.positionUnionPane(gells, pells, pane.spec, this.wscale, this.hscale), left = ref1[0], top = ref1[1], width = ref1[2], height = ref1[3];
          if (intent === ub.SelectGroup && (pane.spec.gells != null)) {
            Util.log('View.expandGroup()', pane.name, [left, top, width, height], pells, dells);
          }
          pane.animate(left, top, width, height, this.select, true, paneCallback);
        }
      } else {
        Util.error('View.expandGroup group.panes null');
      }
      this.show();
      this.lastPaneName = 'None';
    };

    View.prototype.expandPane = function(pane, callback) {
      var paneCallback;
      if (callback == null) {
        callback = null;
      }
      paneCallback = callback != null ? callback : this.paneCallback;
      pane = this.getPaneOrGroup(pane, false);
      if (pane == null) {
        return;
      }
      this.hideAll();
      pane.show();
      pane.animate(this.margin.west, this.margin.north, 100 * this.wview, 100 * this.hview, this.select, true, paneCallback);
      this.show();
      this.lastPaneName = pane.name;
      this.lastStudyName = 'None';
    };

    View.prototype.expandStudy = function(studyName) {
      var pane;
      if (studyName === this.lastStudyName) {
        return;
      }
      pane = this.getPaneFromStudyName(studyName, false);
      this.expandPane(pane);
      if (pane != null) {
        pane.pageContent(this.select, studyName);
      }
      this.lastStudyName = studyName;
    };

    View.prototype.expandTopic = function(topicName) {
      var pane;
      if (topicName === this.lastTopicName || !Util.isStr(this.lastStudyName)) {
        return;
      }
      pane = this.getPaneFromStudyName(this.lastStudyName, false);
      this.expandPane(pane);
      if (pane != null) {
        pane.pageContent(this.select, topicName);
      }
      this.lastTopicName = topicName;
    };

    View.prototype.expandItems = function(itemsName) {
      var pane;
      if (itemsName === this.lastItemsName || !Util.isStr(this.lastStudyName)) {
        return;
      }
      pane = this.getPaneFromStudyName(this.lastStudyName, false);
      this.expandPane(pane);
      if (pane != null) {
        pane.pageContent(this.select, itemsName);
      }
      this.lastItemsName = itemsName;
    };

    View.prototype.expandUnion = function(array, callback) {
      var height, i, k, l, left, len, pane, paneCallback, ref, ref1, ref2, top, unionCells, width;
      if (callback == null) {
        callback = null;
      }
      paneCallback = callback != null ? callback : this.paneCallback;
      this.hideAll();
      unionCells = array[0];
      for (i = k = 1, ref = array.length; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {
        unionCells = UI.unionCells(unionCells, array[i]);
      }
      Util.log('UI.View.expandUnion unionCells', unionCells);
      ref1 = this.panes;
      for (l = 0, len = ref1.length; l < len; l++) {
        pane = ref1[l];
        if (!(this.paneInUnion(pane.cells, unionCells))) {
          continue;
        }
        pane.show();
        ref2 = this.positionUnionPane(unionCells, pane.cells, pane.spec, this.wscale, this.hscale), left = ref2[0], top = ref2[1], width = ref2[2], height = ref2[3];
        pane.animate(left, top, width, height, true, this.select, paneCallback);
      }
      this.show();
    };

    View.prototype.getPaneOrGroup = function(keyOrPane, issueError) {
      var group, k, key, l, len, len1, pane, ref, ref1;
      if (issueError == null) {
        issueError = true;
      }
      if ((keyOrPane == null) || Util.isObj(keyOrPane)) {
        return keyOrPane;
      }
      key = keyOrPane;
      ref = this.panes;
      for (k = 0, len = ref.length; k < len; k++) {
        pane = ref[k];
        if (pane.name === key) {
          return pane;
        }
      }
      if (this.groups != null) {
        ref1 = this.groups;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          group = ref1[l];
          if (group.name === key) {
            return group;
          }
        }
      }
      if (issueError) {
        Util.error('UI.View.getPaneOrGroup() null for key ', key);
      }
      return this.emptyPane;
    };

    View.prototype.createPanes = function() {
      var keyPractice, pane, panes, practice, ref;
      panes = [];
      ref = this.build.getPractices(this.plane.name);
      for (keyPractice in ref) {
        if (!hasProp.call(ref, keyPractice)) continue;
        practice = ref[keyPractice];
        if (practice.cells == null) {
          console.log('View.createPanes() missing practice cells', practice);
        }
        pane = new UI.Pane(this.ui, this.stream, this, practice);
        panes.push(pane);
        practice.pane = pane;
      }
      return panes;
    };

    View.prototype.createOverview = function() {
      var spec;
      spec = this.build.createOverview(this.plane);
      this.overview = new UI.Pane(this.ui, this.stream, this, spec);
      this.overview.page = new UI.Page(this.ui, this.stream, this, this.overview, this.ui.prac);
    };

    View.prototype.createStudyPanes = function(practice, panes) {
      var keyStudy, pane, ref, results, study;
      ref = practice.studies;
      results = [];
      for (keyStudy in ref) {
        if (!hasProp.call(ref, keyStudy)) continue;
        study = ref[keyStudy];
        pane = new UI.Pane(this.ui, this.stream, this, study);
        panes.push(pane);
        results.push(study.pane = pane);
      }
      return results;
    };

    View.prototype.createGroups = function(build, plane) {
      var group, groups, keyCol, keyGroup, keyRow, objCol, objGroup, objRow, ref, ref1, ref2;
      groups = [];
      ref = build.Columns;
      for (keyCol in ref) {
        if (!hasProp.call(ref, keyCol)) continue;
        objCol = ref[keyCol];
        objCol.name = keyCol;
        group = new UI.Group(this.ui, this.stream, this, objCol);
        groups.push(group);
      }
      ref1 = build.Rows;
      for (keyRow in ref1) {
        if (!hasProp.call(ref1, keyRow)) continue;
        objRow = ref1[keyRow];
        objRow.name = keyRow;
        group = new UI.Group(this.ui, this.stream, this, objRow);
        groups.push(group);
      }
      ref2 = plane.spec.groups;
      for (keyGroup in ref2) {
        if (!hasProp.call(ref2, keyGroup)) continue;
        objGroup = ref2[keyGroup];
        objGroup.key = keyGroup;
        objGroup.name = objGroup.name != null ? objGroup.name : keyGroup;
        group = new UI.Group(this.ui, this.stream, this, objGroup);
        groups.push(group);
      }
      return groups;
    };

    View.prototype.assignPanesToGroups = function(panes, groups) {
      var group, k, l, len, len1, pane;
      for (k = 0, len = panes.length; k < len; k++) {
        pane = panes[k];
        for (l = 0, len1 = groups.length; l < len1; l++) {
          group = groups[l];
          if (pane.name === group.name) {
            pane.panes = group.panes;
          }
        }
      }
    };

    View.prototype.getPaneFromStudyName = function(studyName) {
      var k, key, len, pane, ref, ref1, study;
      if (this.panes == null) {
        return this.emptyPane;
      }
      ref = this.panes;
      for (k = 0, len = ref.length; k < len; k++) {
        pane = ref[k];
        ref1 = pane.spec.studies;
        for (key in ref1) {
          if (!hasProp.call(ref1, key)) continue;
          study = ref1[key];
          if (key === studyName) {
            return pane;
          }
        }
      }
      return this.emptyPane;
    };

    View.prototype.paneInUnion = function(paneCells, unionCells) {
      var ip, iu, jp, ju, mp, mu, np, nu, ref, ref1;
      ref = UI.jmin(paneCells), jp = ref[0], mp = ref[1], ip = ref[2], np = ref[3];
      ref1 = UI.jmin(unionCells), ju = ref1[0], mu = ref1[1], iu = ref1[2], nu = ref1[3];
      return ju <= jp && jp + mp <= ju + mu && iu <= ip && ip + np <= iu + nu;
    };

    View.prototype.expandCells = function(unionCells, allCells) {
      var ia, iu, ja, ju, ma, mu, na, nu, ref, ref1;
      ref = UI.jmin(unionCells), ju = ref[0], mu = ref[1], iu = ref[2], nu = ref[3];
      ref1 = UI.jmin(allCells), ja = ref1[0], ma = ref1[1], ia = ref1[2], na = ref1[3];
      return [(ju - ja) * ma / mu, ma, (iu - ia) * na / nu, na];
    };

    return View;

  })();

}).call(this);
