// Generated by CoffeeScript 1.12.2
(function() {
  var $, Pane, UI, Vis,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jquery');

  Vis = require('js/util/Vis');

  UI = require('js/ui/UI');

  Pane = (function() {
    module.exports = Pane;

    function Pane(ui, stream, view, spec) {
      var i, j, m, n, ref, ref1;
      this.ui = ui;
      this.stream = stream;
      this.view = view;
      this.spec = spec;
      this.animateCall = bind(this.animateCall, this);
      this.spec.pane = this;
      this.cells = this.ui.chooseCells(this.spec);
      ref = UI.jmin(this.cells), j = ref[0], m = ref[1], i = ref[2], n = ref[3];
      ref1 = this.view.position(j, m, i, n, this.spec), this.left = ref1[0], this.top = ref1[1], this.width = ref1[2], this.height = ref1[3];
      this.name = this.spec.name;
      this.css = Util.isStr(this.spec.css) ? this.spec.css : 'ikw-pane';
      this.$ = UI.$empty;
      this.wscale = this.view.wscale;
      this.hscale = this.view.hscale;
      this.margin = this.view.margin;
      this.speed = this.view.speed;
      this.parts = this.createParts(this.spec.parts);
      this.page = null;
    }

    Pane.prototype.ready = function() {
      var select;
      this.htmlId = this.ui.htmlId(this.name, 'Pane');
      this.$ = $(this.createHtml());
      this.view.$view.append(this.$);
      this.hide();
      this.adjacentPanes();
      if (this.btn != null) {
        this.btn.ready();
      }
      if (this.page != null) {
        this.page.ready();
      }
      this.readyParts();
      select = UI.Build.select(this.name, 'Pane.ready', UI.Build.SelectAllPanes);
      this.reset(select);
      return this.show();
    };

    Pane.prototype.geom = function() {
      var ex, geo, h, hi, hp, hv, i, j, m, n, r, ref, ref1, s, sx, sy, w, wi, wp, wv, x0, y0;
      ref = UI.jmin(this.spec.cells), j = ref[0], m = ref[1], i = ref[2], n = ref[3];
      ref1 = this.view.positionpx(j, m, i, n, this.spec), wp = ref1[0], hp = ref1[1];
      wi = this.$.innerWidth();
      hi = this.$.innerHeight();
      w = Math.max(wi, wp);
      h = Math.max(hi, hp);
      wv = this.view.wPanes();
      hv = this.view.hPanes();
      r = Math.min(w, h) * 0.2;
      x0 = w * 0.5;
      y0 = h * 0.5;
      sx = w / wp;
      sy = h / hp;
      s = Math.min(sx, sy);
      ex = wv * 0.9 < w && w < wv * 1.1;
      geo = {
        w: w,
        h: h,
        wi: wi,
        hi: hi,
        wp: wp,
        hp: hp,
        wv: wv,
        hv: hv,
        r: r,
        x0: x0,
        y0: y0,
        sx: sx,
        sy: sy,
        s: s,
        ex: ex
      };
      return geo;
    };

    Pane.prototype.show = function() {
      return this.$.show();
    };

    Pane.prototype.hide = function() {
      return this.$.hide();
    };

    Pane.prototype.pc = function(v) {
      return this.view.pc(v);
    };

    Pane.prototype.xs = function(x) {
      return this.view.xs(x);
    };

    Pane.prototype.ys = function(y) {
      return this.view.ys(y);
    };

    Pane.prototype.xcenter = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left + 0.5 * width - 11);
    };

    Pane.prototype.xcente2 = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left + 0.5 * width - 0.5 * w / this.wscale + dx / this.wscale);
    };

    Pane.prototype.ycenter = function(top, height, h, scale, dy) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dy == null) {
        dy = 0;
      }
      return scale * (top + 0.5 * height - 0.5 * h / this.hscale + dy / this.hscale);
    };

    Pane.prototype.right = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left + width - 0.5 * w / this.wscale + dx / this.wscale);
    };

    Pane.prototype.bottom = function(top, height, h, scale, dy) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dy == null) {
        dy = 0;
      }
      return scale * (top + height - 0.5 * h / this.hscale + dy / this.hscale);
    };

    Pane.prototype.north = function(top, height, h, scale, dy) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dy == null) {
        dy = 0;
      }
      return scale * (top - h + dy / this.hscale);
    };

    Pane.prototype.south = function(top, height, h, scale, dy) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dy == null) {
        dy = 0;
      }
      return scale * (top + height + dy / this.hscale);
    };

    Pane.prototype.east = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left + width + dx / this.wscale);
    };

    Pane.prototype.west = function(left, width, w, scale, dx) {
      if (scale == null) {
        scale = 1.0;
      }
      if (dx == null) {
        dx = 0;
      }
      return scale * (left - w + dx / this.wscale);
    };

    Pane.prototype.adjacentPanes = function() {
      var i, ip, j, jp, k, len, m, mp, n, np, pane, ref, ref1, ref2, ref3;
      ref = UI.jmin(this.cells), jp = ref[0], mp = ref[1], ip = ref[2], np = ref[3];
      ref1 = [this.view.emptyPane, this.view.emptyPane, this.view.emptyPane, this.view.emptyPane], this.northPane = ref1[0], this.southPane = ref1[1], this.eastPane = ref1[2], this.westPane = ref1[3];
      ref2 = this.view.panes;
      for (k = 0, len = ref2.length; k < len; k++) {
        pane = ref2[k];
        ref3 = UI.jmin(pane.cells), j = ref3[0], m = ref3[1], i = ref3[2], n = ref3[3];
        if (j === jp && m === mp && i === ip - n) {
          this.northPane = pane;
        }
        if (j === jp && m === mp && i === ip + np) {
          this.southPane = pane;
        }
        if (i === ip && n === np && j === jp - m) {
          this.westPane = pane;
        }
        if (i === ip && n === np && j === jp + mp) {
          this.eastPane = pane;
        }
      }
    };

    Pane.prototype.createHtml = function() {
      return "<div id=\"" + this.htmlId + "\" class=\"" + this.css + "\"></div>";
    };

    Pane.prototype.reset = function(select) {
      this.$.css({
        left: this.xs(this.left),
        top: this.ys(this.top),
        width: this.xs(this.width),
        height: this.ys(this.height)
      });
      this.pageContent(select);
    };

    Pane.prototype.css = function(left, top, width, height, select) {
      this.$.css({
        left: this.pc(left),
        top: this.pc(top),
        width: this.pc(width),
        height: this.pc(height)
      });
      this.pageContent(select);
    };

    Pane.prototype.animate = function(left, top, width, height, select, aniLinks, callback) {
      if (aniLinks == null) {
        aniLinks = false;
      }
      if (callback == null) {
        callback = null;
      }
      this.$.show().animate({
        left: this.pc(left),
        top: this.pc(top),
        width: this.pc(width),
        height: this.pc(height)
      }, this.view.speed, (function(_this) {
        return function() {
          return _this.animateCall(callback, select);
        };
      })(this));
    };

    Pane.prototype.animateCall = function(callback, select) {
      this.pageContent(select);
      if (callback != null) {
        callback(this);
      }
    };

    Pane.prototype.pageContent = function(select) {
      if (this.page != null) {
        this.page.paneContent(select);
      }
    };

    Pane.prototype.createParts = function(partSpec) {
      var a, b, ext, g, h, hh, hp, hs, i, j, k, l, left, m, mcol, nrow, part, parts, r, ref, ref1, ref2, ref3, ref4, ref5, s, title, top, v, wp, ws, ww;
      parts = [];
      if (partSpec == null) {
        return parts;
      }
      ref = [partSpec.mcol, partSpec.nrow], mcol = ref[0], nrow = ref[1];
      m = {
        width: 2,
        height: 2,
        west: 2,
        north: 2,
        east: 2,
        south: 2
      };
      ref1 = this.view.percents(nrow, mcol, m), ww = ref1[0], hh = ref1[1], wp = ref1[2], hp = ref1[3], ws = ref1[4], hs = ref1[5];
      Util.noop(wp, hp);
      left = function(j) {
        return ws * j * ww + (m.west + j * m.width);
      };
      top = function(i) {
        return hs * i * hh + (m.north + i * m.height);
      };
      for (i = k = 0, ref2 = nrow; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        for (j = l = 0, ref3 = mcol; 0 <= ref3 ? l < ref3 : l > ref3; j = 0 <= ref3 ? ++l : --l) {
          if (j >= i) {
            ext = Util.padStr(i) + Util.padStr(j);
            ref4 = [partSpec.hue, j * 5, 100 - i * 5], h = ref4[0], s = ref4[1], v = ref4[2];
            ref5 = Vis.toRgbHsvSigmoidal(h, s, v * 255, true), r = ref5[0], g = ref5[1], b = ref5[2], a = ref5[3];
            title = h.toString() + ' ' + s.toString() + ' ' + v.toString();
            part = new UI.Part(this.ui, this.stream, this, ext, [r, g, b, a], left(j), top(i), ww * ws, hh * hs, title);
            parts.push(part);
          }
        }
      }
      return parts;
    };

    Pane.prototype.readyParts = function() {
      var k, len, part, ref, results;
      ref = this.parts;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        part = ref[k];
        results.push(part.ready());
      }
      return results;
    };

    return Pane;

  })();

}).call(this);
