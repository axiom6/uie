// Generated by CoffeeScript 1.12.2
(function() {
  var $, Tocs, UI,
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  UI = require('js/ui/UI');

  Tocs = (function() {
    module.exports = Tocs;

    function Tocs(ui, stream) {
      var ref;
      this.ui = ui;
      this.stream = stream;
      ref = this.createTocsSpecs(), this.specs = ref[0], this.stack = ref[1];
      this.htmlIdApp = Util.getHtmlId('Tocs', 'App');
      this.last = this.specs[0];
      this.speed = 400;
    }

    Tocs.prototype.createTocsSpecs = function() {
      var keyPractice, keyRow, keyStudy, objRow, practice, practices, ref, ref1, row, spec0, specN, specs, stack, study;
      practices = this.ui.build.getPractices(this.ui.plane.name);
      spec0 = {
        level: 0,
        name: "Beg"
      };
      stack = new Array(this.ui.build.maxLevel);
      stack[0] = spec0;
      specs = [];
      specs.push(spec0);
      ref = this.ui.build.Rows;
      for (keyRow in ref) {
        if (!hasProp.call(ref, keyRow)) continue;
        objRow = ref[keyRow];
        row = Object.assign({}, objRow);
        this.enrichSpec(keyRow, row, specs, 1, spec0, true, true);
        for (keyPractice in practices) {
          if (!hasProp.call(practices, keyPractice)) continue;
          practice = practices[keyPractice];
          if (!(practice.row === keyRow)) {
            continue;
          }
          this.enrichSpec(keyPractice, practice, specs, 2, row, false, false);
          ref1 = practice.studies;
          for (keyStudy in ref1) {
            if (!hasProp.call(ref1, keyStudy)) continue;
            study = ref1[keyStudy];
            practice.hasChild = true;
            this.enrichSpec(keyStudy, study, specs, 3, practice, false, false);
          }
        }
      }
      specN = {
        level: 0,
        name: "End"
      };
      specs.push(specN);
      return [specs, stack];
    };

    Tocs.prototype.logSpecs = function() {
      var j, len, ref, spec;
      ref = this.specs;
      for (j = 0, len = ref.length; j < len; j++) {
        spec = ref[j];
        Util.log('UI.Tocs.spec', Util.indent(spec.level * 2), spec.name, spec.hasChild);
      }
    };

    Tocs.prototype.enrichSpec = function(key, spec, specs, level, parent, hasChild, isRow) {
      spec.level = level;
      spec.parent = parent;
      spec.name = spec.name != null ? spec.name : key;
      spec.on = false;
      spec.hasChild = hasChild;
      spec.isRow = isRow;
      specs.push(spec);
    };

    Tocs.prototype.ready = function() {
      var j, len, ref, select, spec;
      this.$tocs = $(this.html());
      this.$tocp = $('#' + this.htmlIdApp);
      this.$tocp.append(this.$tocs);
      ref = this.specs;
      for (j = 0, len = ref.length; j < len; j++) {
        spec = ref[j];
        if (!(spec.level > 0)) {
          continue;
        }
        spec.$elem = spec.hasChild ? $('#' + spec.ulId) : $('#' + spec.liId);
        spec.$li = $('#' + spec.liId);
        select = UI.Build.select(spec.name, 'Tocs', this.intent(spec));
        this.stream.publish('Select', select, spec.$li, 'click');
      }
      this.subscribe();
    };

    Tocs.prototype.intent = function(spec) {
      switch (spec.level) {
        case 1:
          return UI.Build.SelectRow;
        case 2:
          return UI.Build.SelectPractice;
        case 3:
          return UI.Build.SelectStudy;
        case 4:
          return UI.Build.SelectTopic;
        case 5:
          return UI.Build.SelectItems;
        default:
          return UI.Build.SelectPractice;
      }
    };

    Tocs.prototype.subscribe = function() {
      this.stream.subscribe('Select', (function(_this) {
        return function(select) {
          return _this.onSelect(select);
        };
      })(this));
    };

    Tocs.prototype.htmlId = function(spec, ext) {
      if (ext == null) {
        ext = '';
      }
      return this.ui.htmlId(spec.name + 'Tocs', ext);
    };

    Tocs.prototype.getSpec = function(select, issueError) {
      var j, len, ref, spec;
      if (issueError == null) {
        issueError = true;
      }
      ref = this.specs;
      for (j = 0, len = ref.length; j < len; j++) {
        spec = ref[j];
        if (spec.name === select.name) {
          return spec;
        }
      }
      if (issueError && this.nameNotOk(select.name)) {
        Util.error('UI.Tocs.getSpec(id) spec null for select', select);
      }
      return null;
    };

    Tocs.prototype.nameNotOk = function(name) {
      var j, len, okName, okNames;
      okNames = ['None', 'Embrace', 'Innovate', 'Encourage', 'Overview', 'Technique'];
      for (j = 0, len = okNames.length; j < len; j++) {
        okName = okNames[j];
        if (name === okName) {
          return false;
        }
      }
      return true;
    };

    Tocs.prototype.html = function() {
      var htm, i, j, ref;
      this.specs[0].ulId = this.htmlId(this.specs[0], 'UL');
      htm = "<ul class=\"ul0\" id=\"" + this.specs[0].ulId + "\">";
      for (i = j = 1, ref = this.specs.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        htm += this.process(i);
      }
      return htm;
    };

    Tocs.prototype.show = function() {
      this.$tocs.show();
    };

    Tocs.prototype.hide = function() {
      this.$tocs.hide();
    };

    Tocs.prototype.process = function(i) {
      var htm, j, level, prev, ref, ref1, spec;
      htm = "";
      prev = this.specs[i - 1];
      spec = this.specs[i];
      if (spec.level >= prev.level) {
        htm += this.htmlBeg(spec);
        this.stack[spec.level] = spec;
      } else {
        for (level = j = ref = prev.level, ref1 = spec.level; ref <= ref1 ? j <= ref1 : j >= ref1; level = ref <= ref1 ? ++j : --j) {
          htm += this.htmlEnd(this.stack[level]);
        }
        if (i < this.specs.length - 1) {
          htm += this.htmlBeg(spec);
        }
      }
      return htm;
    };

    Tocs.prototype.htmlBeg = function(spec) {
      var htm;
      spec.liId = this.htmlId(spec, 'LI');
      spec.ulId = this.htmlId(spec, 'UL');
      htm = "<li class=\"li" + spec.level + "\" id=\"" + spec.liId + "\" >";
      htm += "" + (this.htmIconName(spec));
      if (spec.hasChild) {
        htm += "<ul class=\"ul" + spec.level + "\" id=\"" + spec.ulId + "\">";
      }
      return htm;
    };

    Tocs.prototype.htmIconName = function(spec) {
      var htm;
      htm = "<div style=\"display:table;\">";
      if (spec.icon) {
        htm += "<i class=\"fa " + spec.icon + " fa-lg\"></i>";
      }
      htm += "<span style=\"display:table-cell; vertical-align:middle; padding-left:12px;\">" + (Util.toName(spec.name)) + "</span>";
      return htm += "</div>";
    };

    Tocs.prototype.htmlEnd = function(spec) {
      if (spec.level === 0) {
        return "</ul>";
      } else if (spec.hasChild) {
        return "</ul></li>";
      } else {
        return "</li>";
      }
    };

    Tocs.prototype.onSelect = function(select) {
      var spec;
      if (this.ui.notInPlane()) {
        return;
      }
      Util.msg('UI.Tocs.onSelect', select);
      spec = this.getSpec(select, true);
      if (spec != null) {
        this.update(spec);
      }
    };

    Tocs.prototype.update = function(spec) {
      var j, k, l, last, level, ref, ref1, ref2;
      this.stack[spec.level] = spec;
      for (level = j = ref = spec.level; j >= 2; level = j += -1) {
        this.stack[level - 1] = this.stack[level].parent;
      }
      last = this.last;
      for (level = k = ref1 = this.last.level; k >= 1; level = k += -1) {
        if (last.name !== this.stack[level].name || level > spec.level) {
          this.reveal(last);
        }
        last = last.parent;
      }
      for (level = l = 1, ref2 = spec.level; l <= ref2; level = l += 1) {
        if (!this.stack[level].on) {
          this.reveal(this.stack[level]);
        }
      }
      this.last = spec;
    };

    Tocs.prototype.reveal = function(spec) {
      spec.on = !spec.on;
      if (spec.level === 0) {
        return;
      }
      if (spec.hasChild) {
        spec.$elem.toggle(this.speed);
      } else {
        spec.$elem.css({
          color: spec.on ? '#FFFF00' : '#FFFFFF'
        });
      }
    };

    return Tocs;

  })();

}).call(this);
