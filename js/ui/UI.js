// Generated by CoffeeScript 1.12.2
(function() {
  var $, Database, UI, di,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  di = require('dom-to-image');

  Database = require('js/util/Database');

  UI = (function() {
    Util.UI = UI;

    module.exports = UI;

    UI.Build = require('js/prac/Build');

    UI.Navb = require('js/ui/Navb');

    UI.Tocs = require('js/ui/Tocs');

    UI.View = require('js/ui/View');

    UI.Pane = require('js/ui/Pane');

    UI.Part = require('js/ui/Part');

    UI.Group = require('js/ui/Group');

    UI.Btn = require('js/ui/Btn');

    UI.Page = require('js/ui/Page');

    UI.Prac = require('js/prac/Prac');

    UI.$empty = $();

    UI.isEmpty = function($elem) {
      return ($elem != null) && ($elem.length != null) && $elem.length === 0;
    };

    UI.isElem = function($elem) {
      return !UI.isEmpty($elem);
    };

    UI.jmin = function(cells) {
      if (cells == null) {
        Util.trace('UI.jmin');
      }
      return [cells[0] - 1, cells[1], cells[2] - 1, cells[3]];
    };

    UI.toCells = function(jmin) {
      return [jmin[0] + 1, jmin[1], jmin[2] + 1, jmin[3]];
    };

    UI.unionCells = function(cells1, cells2) {
      var i1, i2, j1, j2, m1, m2, n1, n2, ref, ref1;
      ref = UI.jmin(cells1), j1 = ref[0], m1 = ref[1], i1 = ref[2], n1 = ref[3];
      ref1 = UI.jmin(cells2), j2 = ref1[0], m2 = ref1[1], i2 = ref1[2], n2 = ref1[3];
      return [Math.min(j1, j2) + 1, Math.max(j1 + m1, j2 + m2) - Math.min(j1, j2), Math.min(i1, i2) + 1, Math.max(i1 + n1, i2 + n2) - Math.min(i1, i2)];
    };

    UI.intersectCells = function(cells1, cells2) {
      var i1, i2, j1, j2, m1, m2, n1, n2, ref, ref1;
      ref = UI.jmin(cells1), j1 = ref[0], m1 = ref[1], i1 = ref[2], n1 = ref[3];
      ref1 = UI.jmin(cells2), j2 = ref1[0], m2 = ref1[1], i2 = ref1[2], n2 = ref1[3];
      return [Math.max(j1, j2) + 1, Math.min(j1 + m1, j2 + m2), Math.max(i1, i2) + 1, Math.min(i1 + n1, i2 + n2)];
    };

    UI.Planes = {
      Information: {
        name: "Information",
        id: "Info",
        spec: {},
        ui: null
      },
      Augment: {
        name: "Augment",
        id: "Augm",
        spec: {},
        ui: null
      },
      DataScience: {
        name: "DataScience",
        id: "Data",
        spec: {},
        ui: null
      },
      Knowledge: {
        name: "Knowledge",
        id: "Know",
        spec: {},
        ui: null
      },
      Wisdom: {
        name: "Wisdom",
        id: "Wise",
        spec: {},
        ui: null
      },
      Hues: {
        name: "Hues",
        id: "Hues",
        spec: {},
        ui: null
      }
    };

    UI.ThePlane = null;

    UI.TheBuild = null;

    UI.TheStream = null;

    UI.createUI = function(planeName, build, stream) {
      UI.TheStream = stream;
      UI.ThePlane = UI.Planes[planeName];
      UI.ThePlane.spec = build.Planes[planeName];
      UI.ThePlane.ui = new UI(build, stream, UI.ThePlane);
      UI.ThePlane.ui.ready();
      UI.TheBuild = build;
      UI.subscribe();
      UI.publish();
    };

    UI.subscribe = function() {
      UI.TheStream.subscribe('Plane', (function(_this) {
        return function(name) {
          return UI.onPlane(name);
        };
      })(this));
      UI.TheStream.subscribe('Image', (function(_this) {
        return function(name) {
          return UI.onImage(name);
        };
      })(this));
    };

    UI.publish = function() {};

    UI.onPlane = function(planeName) {
      var ref, ref1;
      if (UI.ThePlane == null) {
        return Util.error("UI.createUI() has not been called yet");
      }
      if (planeName === UI.ThePlane.name) {
        return;
      }
      if ((ref = UI.ThePlane.ui) != null) {
        if ((ref1 = ref.view) != null) {
          ref1.hideAll();
        }
      }
      UI.ThePlane = UI.Planes[planeName];
      UI.hideAllPlanes();
      if (UI.ThePlane.ui == null) {
        UI.createUI(planeName, UI.TheBuild, UI.TheStream);
      } else {
        UI.ThePlane.ui.view.reset({
          name: planeName,
          intent: UI.Build.SelectPlane
        });
        UI.TheStream.publish('Content', UI.Build.content('Tree', 'onPlane', UI.Build.SelectPlane));
      }
      UI.ThePlane.ui.show();
    };

    UI.imageNodeId = function() {
      return "ViewApp";
    };

    UI.onImage = function() {
      var h, ida, isCol, isRow, link, name, node, opts, save, type, w;
      ida = "ImageLinkApp";
      link = document.getElementById(ida);
      node = document.getElementById(UI.imageNodeId());
      name = UI.ui.view.select.name;
      isCol = Util.inArray(['Embrace', 'Innovate', 'Encourage'], name);
      isRow = Util.inArray(['Learn', 'Do', 'Share'], name);
      w = isCol ? 600 : 1400;
      h = isRow ? 400 : 960;
      opts = {
        width: w,
        height: h
      };
      type = 'png';
      save = function(href) {
        link.download = name + '.' + type;
        link.href = href;
        link.click();
        return Util.log('UI.onImage()', link.download, name);
      };
      switch (type) {
        case 'png':
          di.toPng(node, opts).then(save);
          break;
        case 'svg':
          di.toSvg(node, opts).then(save);
          break;
        default:
          di.toJpeg(node, opts).then(save);
      }
    };

    UI.hideAllPlanes = function() {
      var key, plane, ref, results;
      ref = UI.Planes;
      results = [];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        plane = ref[key];
        if (plane.ui != null) {
          results.push(plane.ui.hide());
        }
      }
      return results;
    };

    function UI(build1, stream1, plane1) {
      this.build = build1;
      this.stream = stream1;
      this.plane = plane1;
      this.resize = bind(this.resize, this);
      this.tocs = new UI.Tocs(this, this.stream);
      this.view = new UI.View(this, this.stream);
      this.prac = new UI.Prac(this, this.stream, this.view);
      this.pages = this.createPages(this, this.stream, this.view);
      this.expandGroup = false;
      UI.ui = this;
    }

    UI.prototype.notInPlane = function() {
      return UI.ThePlane.name !== this.plane.name;
    };

    UI.prototype.createPages = function(ui, stream, view) {
      var i, len, pages, pane, ref;
      view.createOverview(this.build);
      pages = [];
      ref = view.panes;
      for (i = 0, len = ref.length; i < len; i++) {
        pane = ref[i];
        pane.page = new UI.Page(ui, stream, view, pane, this.prac);
        pages.push(pane.page);
      }
      return pages;
    };

    UI.prototype.ready = function() {
      this.tocs.ready();
      this.view.ready();
    };

    UI.prototype.show = function() {
      this.tocs.show();
      this.view.showAll();
    };

    UI.prototype.hide = function() {
      this.tocs.hide();
      this.view.hideAll();
    };

    UI.prototype.resize = function() {
      this.view.resize();
    };

    UI.prototype.htmlId = function(name, ext) {
      if (ext == null) {
        ext = '';
      }
      return Util.htmlId(name, this.plane.id, ext);
    };

    UI.prototype.getHtmlId = function(name, ext) {
      if (ext == null) {
        ext = '';
      }
      return Util.getHtmlId(name, this.plane.id, ext);
    };

    UI.prototype.chooseCells = function(spec) {
      if ((spec.dells != null) && this.plane.id === 'Data') {
        return spec.dells;
      } else {
        return spec.cells;
      }
    };

    UI.prototype.findConnectMsg = function(id) {
      var connect, i, key, len, msg, pane, plane, ref, ref1;
      ref = UI.Planes;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        plane = ref[key];
        if (plane.ui != null) {
          ref1 = plane.ui.view.panes;
          for (i = 0, len = ref1.length; i < len; i++) {
            pane = ref1[i];
            if (!((pane.page != null) && (pane.page.connect != null))) {
              continue;
            }
            connect = pane.page.connect;
            msg = connect.msgs[id];
            if (msg != null) {
              return [connect, msg];
            }
          }
        }
      }
      Util.error('Build.findConnectMsg() msg not found for', id);
      return [void 0, void 0];
    };

    UI.prototype.migrateConnectMsg = function(id, dir) {
      var connect, msg, ref;
      ref = this.findConnectMsg(id), connect = ref[0], msg = ref[1];
      if ((connect != null) && (msg != null)) {
        connect.migrate(id, dir);
      }
    };

    UI.prototype.slideUrl = function(talk) {
      if (this.Slides[talk] != null) {
        return this.Slides.SymLink.url + this.Slides[talk].url;
      } else if (this.isPractice(talk)) {
        return this.Slides.SymLink.url + this.Slides[this.ui.plane.id].url + talk;
      } else {
        Util.error('Build.talkUrl()', talk, 'not found');
        return void 0;
      }
    };

    return UI;

  })();

}).call(this);
