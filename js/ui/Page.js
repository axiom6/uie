// Generated by CoffeeScript 1.12.2
(function() {
  var Btn, Page, UI, Viewer,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  UI = require('js/ui/UI');

  Btn = require('js/ui/Btn');

  Viewer = require('js/prac/Viewer');

  Page = (function() {
    module.exports = Page;

    function Page(ui, stream, view, pane, prac) {
      this.ui = ui;
      this.stream = stream;
      this.view = view;
      this.pane = pane;
      this.prac = prac;
      this.onContent = bind(this.onContent, this);
      this.spec = this.pane.spec;
      this.name = this.spec.name;
      this.icon = this.spec.icon;
      this.viewer = new Viewer(this.pane, this, this.prac);
      this.contents = this.viewer.contents;
      this.choice = 'Studies';
      this.saveHtml = false;
      this.saveSvg = false;
      this.showBtn = false;
      if (this.showBtn) {
        this.btn = new Btn(this.ui, this.stream, this.pane, this.pane.spec, this.contents);
      }
    }

    Page.prototype.ready = function() {
      if (this.ui.plane.name === 'Hues') {
        return;
      }
      this.viewer.ready();
      this.subscribe();
      if (this.showBtn) {
        this.btn.ready();
      }
    };

    Page.prototype.subscribe = function() {
      this.stream.subscribe('Content', (function(_this) {
        return function(content) {
          return _this.onContent(content);
        };
      })(this));
    };

    Page.prototype.publish = function($on) {
      var select;
      if (UI.isElem($on)) {
        select = UI.Build.select(Util.toSelect(this.pane.name), 'Page', UI.Build.SelectPractice);
        this.stream.publish('Select', select, $on, 'click');
      }
    };

    Page.prototype.publishJQueryObjects = function(objects, intent) {
      var $object, name, select;
      return;
      for (name in objects) {
        $object = objects[name];
        if (!(UI.isElem($object))) {
          continue;
        }
        select = UI.Build.select(Util.toSelect(name), 'Page', intent);
        Util.log('Page.publishJQueryObjects()');
        this.stream.publish('Select', select, $object, 'click');
      }
    };

    Page.prototype.paneContent = function(select) {
      var choice, content;
      choice = (function() {
        switch (select.intent) {
          case UI.Build.SelectStudy:
            return 'Study';
          case UI.Build.SelectTopic:
            return 'Topic';
          case UI.Build.SelectItems:
            return 'Items';
          default:
            return this.choice;
        }
      }).call(this);
      content = UI.Build.content(choice, select.source, select.intent, select.name);
      this.onContent(content);
    };

    Page.prototype.onContent = function(content) {
      var geom;
      if (this.ui.notInPlane() || this.ui.plane.name === 'Hues') {
        return;
      }
      this.choice = content.content;
      Util.msg('Page.onContent()', content, this.choice, this.name);
      geom = this.pane.geom();
      if (this.showBtn) {
        this.btn.layout(geom);
      }
      if (this.name === this.ui.plane.id && this.choice !== 'Overview') {
        return;
      }
      this.viewer.layout(geom, content);
      if (this.choice === 'Svg' && this.saveSvg) {
        this.prac.saveSvg(this.pane.page.contents.svg.htmlId, this.name + '.svg');
        this.saveSvg = false;
      }
      if (this.choice === 'Studies' && this.saveHtml) {
        this.prac.saveHtml(this.pane.page.contents.studies.htmlId, this.name + '.html');
        this.saveHtml = false;
      }
    };

    Page.prototype.getStudy = function(name) {
      var key, ref, study;
      ref = this.spec.studies;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        study = ref[key];
        if (name !== 'None') {
          if (key === name) {
            return study;
          }
        }
      }
      return this.ui.build.NoneStudy;
    };

    return Page;

  })();

}).call(this);
