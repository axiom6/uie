// Generated by CoffeeScript 1.10.0
(function() {
  var $, Database, Rest,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  $ = require('jquery');

  Database = require('js/util/Database');

  Rest = (function() {
    module.exports = Rest;

    function Rest(stream1) {
      this.stream = stream1;
      this.logForecasts = bind(this.logForecasts, this);
      this.logMileposts = bind(this.logMileposts, this);
      this.logDeals = bind(this.logDeals, this);
      this.logConditions = bind(this.logConditions, this);
      this.logSegments = bind(this.logSegments, this);
      this.localURL = Database.dataURI() + '/exit/';
      this.baseURL = "http://104.154.46.117/";
      this.jessURL = "https://exit-now-admin-jesseporter32.c9.io/";
      this.forecastIoURL = "https://api.forecast.io/forecast/";
      this.forecastIoKey = '2c52a8974f127eee9de82ea06aadc7fb';
      this.currURL = this.baseURL;
      this.segmentURL = this.currURL + "api/segment";
      this.conditionsURL = this.currURL + "api/state";
      this.dealsURL = this.currURL + "api/deals";
      this.cors = 'json';
      this.subscribe();
    }

    Rest.prototype.subscribe = function() {};

    Rest.prototype.segmentsFromLocal = function(direction) {
      var args, url;
      url = this.localURL + "Segments" + direction + ".json";
      args = {
        url: url,
        direction: direction
      };
      this.read(url, 'Segments', args);
    };

    Rest.prototype.conditionsFromLocal = function(direction) {
      var args, url;
      url = this.localURL + "Conditions" + direction + ".json";
      args = {
        url: url,
        direction: direction
      };
      this.read(url, 'Conditions', args);
    };

    Rest.prototype.dealsFromLocal = function(direction) {
      var args, url;
      url = this.localURL + "Deals.json";
      args = {
        url: url,
        direction: direction
      };
      this.read(url, 'Deals', args);
    };

    Rest.prototype.milePostsFromLocal = function() {
      var args, url;
      url = this.localURL + "I70Mileposts.json";
      args = {
        url: url
      };
      this.read(url, 'MilePosts', args);
    };

    Rest.prototype.forecastsFromLocal = function() {
      var args, url;
      url = this.localURL + "Forecasts.json";
      args = {
        url: url
      };
      this.read(url, 'Forecasts', args);
    };

    Rest.prototype.segmentsByPreset = function(preset) {
      var args, url;
      args = {
        preset: preset
      };
      url = this.segmentURL + "?start=1,1&end=1,1&preset=" + preset;
      this.read(url, 'Segments', args);
    };

    Rest.prototype.conditionsBySegments = function(segments) {
      var args, csv, url;
      args = {
        segments: segments
      };
      csv = this.toCsv(segments);
      url = this.conditionsURL + "?segments=" + csv;
      this.read(url, 'Conditions', args);
    };

    Rest.prototype.deals = function(latlon, segments) {
      var args, csv, url;
      args = {
        segments: segments,
        lat: latlon[0],
        lon: latlon[1]
      };
      csv = this.toCsv(segments);
      url = this.dealsURL + "?segments=" + csv + "&loc=" + latlon[0] + "," + latlon[1];
      this.read(url, 'Deals', args);
    };

    Rest.prototype.forecastByTown = function(name, town) {
      var args;
      args = {
        name: name,
        town: town,
        lat: town.lat,
        lon: town.lon,
        time: town.time,
        hms: Util.toHMS(town.time)
      };
      this.getForecast(args);
    };

    Rest.prototype.getForecast = function(args) {
      var key, settings, town, url;
      town = args.town;
      key = '2c52a8974f127eee9de82ea06aadc7fb';
      url = "https://api.forecast.io/forecast/" + key + "/" + town.lat + "," + town.lon;
      settings = {
        url: url,
        type: 'GET',
        dataType: 'jsonp',
        contentType: 'text/plain'
      };
      settings.success = (function(_this) {
        return function(json, status, jqXHR) {
          _this.stream.publish(_this.toSubject('Forecast', 'get'), _this.toRestObject(args, json, {
            url: url,
            status: status
          }));
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          stream.publish(_this.toSubject('Forecast', 'get'), _this.toRestObject(args, error, {
            url: url,
            status: status,
            readyState: jqXHR.readyState
          }));
        };
      })(this);
      return $.ajax(settings);
    };

    Rest.prototype.forecastByLatLonTime = function(lat, lon, time) {
      var args, url;
      args = {
        lat: lat,
        lon: lon,
        time: Util.toTime(time)
      };
      url = "" + this.forecastIoURL + this.forecastIoKey + "}/" + lat + "," + lon + "," + time;
      this.read(url, 'ForecastTime', args);
    };

    Rest.prototype.requestSegmentsBy = function(query) {
      Util.noop('Stream.requestSegmentsBy', query);
    };

    Rest.prototype.requestConditionsBy = function(query) {
      Util.noop('Stream.requestConditionsBy', query);
    };

    Rest.prototype.requestDealsBy = function(query) {
      Util.noop('Stream.requestDealsBy', query);
    };

    Rest.prototype.segmentsByLatLon = function(slat, slon, elat, elon) {
      var args, url;
      args = {
        slat: slat,
        slon: slon,
        elat: elat,
        elon: elon
      };
      url = this.segmentURL + "?start=" + slat + "," + slon + "&end=" + elat + "," + elon;
      this.read(url, 'Segments', args);
    };

    Rest.prototype.segmentsBySegments = function(segments) {
      var args, csv, url;
      args = {
        segments: segments
      };
      csv = this.toCsv(segments);
      url = this.segmentURL + "?segments=" + csv;
      this.read(url, 'Segments', args);
    };

    Rest.prototype.conditionsBySegmentsDate = function(segments, date) {
      var args, csv, url;
      args = {
        segments: segments,
        date: date
      };
      csv = this.toCsv(segments);
      url = this.conditionsURL + "?segments=" + csv + "&setdate=" + date;
      this.read(url, 'Conditions', args);
    };

    Rest.prototype.dealsByUrl = function(url) {
      this.read(url, 'Deals', {});
    };

    Rest.prototype.accept = function(userId, dealId, convert) {
      var args, url;
      args = {
        userId: userId,
        dealId: dealId,
        convert: convert
      };
      url = this.dealsURL + "?userId=" + userId + "&_id=" + dealId + "&convert=" + convert;
      this.post(url, 'Accept', args);
    };

    Rest.prototype.toSubject = function(from, op) {
      return from + "?op=" + op;
    };

    Rest.prototype.toRestObject = function(params, result, extras) {
      params = Util.copyProperties(extras);
      return {
        params: params,
        result: result
      };
    };

    Rest.prototype.fromRestObject = function(object) {
      return [object.params, object.result];
    };

    Rest.prototype.read = function(url, from, args) {
      switch (Util.parseURI(url).protocol) {
        case 'file:':
          this.req(url, from, args);
          break;
        default:
          this.get(url, from, args);
      }
    };

    Rest.prototype.req = function(url, from, args) {
      var json, path;
      path = url.substring(5);
      json = Util.require(path);
      if (json != null) {
        this.stream.publish(this.toSubject(from, 'get'), this.toRestObject(args, json, {
          subject: this.toSubject(from, 'get'),
          path: path
        }));
      } else {
        this.stream.publish(this.toSubject(from, 'get'), this.toRestObject(args, error, {
          subject: this.toSubject(from, 'get'),
          path: path
        }));
      }
    };

    Rest.prototype.get = function(url, from, args) {
      var settings;
      settings = {
        url: url,
        type: 'GET',
        dataType: this.cors,
        contentType: 'application/json; charset=utf-8'
      };
      settings.success = (function(_this) {
        return function(json, status, jqXHR) {
          _this.stream.publish(_this.toSubject(from, 'get'), _this.toRestObject(args, json, {
            subject: _this.toSubject(from, 'get'),
            url: url,
            status: status
          }));
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          _this.stream.publish(_this.toSubject(from, 'get'), _this.toRestObject(args, error, {
            subject: _this.toSubject(from, 'get'),
            url: url,
            status: status,
            readyState: jqXHR.readyState
          }));
        };
      })(this);
      $.ajax(settings);
    };

    Rest.prototype.post = function(url, from, args) {
      var settings;
      settings = {
        url: url,
        type: 'POST',
        dataType: 'jsonp'
      };
      settings.success = (function(_this) {
        return function(response, status, jqXHR) {
          return _this.stream.publish(_this.toSubject(from, 'post'), _this.toRestObject(args, response, {
            url: url,
            status: status
          }));
        };
      })(this);
      settings.error = (function(_this) {
        return function(jqXHR, status, error) {
          _this.stream.publish(_this.toSubject(from, 'post'), _this.toRestObject(args, error, {
            url: url,
            status: status,
            readyState: jqXHR.readyState
          }));
        };
      })(this);
      $.ajax(settings);
    };

    Rest.prototype.toCsv = function(array) {
      var a, csv, i, len1;
      csv = '';
      for (i = 0, len1 = array.length; i < len1; i++) {
        a = array[i];
        csv += a.toString() + ',';
      }
      return csv.substring(0, csv.length - 1);
    };

    Rest.prototype.segIdNum = function(segment) {
      var id, key, len, num, obj;
      id = "";
      num = 0;
      for (key in segment) {
        if (!hasProp.call(segment, key)) continue;
        obj = segment[key];
        len = key.length;
        if (len >= 2 && 'id' === key.substring(0, 1)) {
          id = key;
          num = key.substring(0, 1);
        }
      }
      return [id, num];
    };

    Rest.prototype.logSegments = function(args, obj) {
      var i, id, len1, num, ref, results, segment, segments;
      args.size = segments.length;
      segments = obj.segments;
      Util.dbg('logSegments args', args);
      results = [];
      for (i = 0, len1 = segments.length; i < len1; i++) {
        segment = segments[i];
        ref = this.segIdNum(segment), id = ref[0], num = ref[1];
        results.push(Util.dbg('logSegment', {
          id: id,
          num: num,
          name: segment.name
        }));
      }
      return results;
    };

    Rest.prototype.logConditions = function(args, conditions) {
      var c, cc, i, len1, results;
      args.size = conditions.length;
      Util.dbg('logConditions args', args);
      Util.dbg('logConditions conds');
      results = [];
      for (i = 0, len1 = conditions.length; i < len1; i++) {
        c = conditions[i];
        cc = c['Conditions'];
        Util.dbg('  condition', {
          SegmentId: c['SegmentId'],
          TravelTime: cc['TravelTime'],
          AverageSpeed: cc['AverageSpeed']
        });
        results.push(Util.dbg('  weather', cc['Weather']));
      }
      return results;
    };

    Rest.prototype.logDeals = function(args, deals) {
      var d, dd, i, len1, results;
      args.size = deals.length;
      Util.dbg('logDeals args', args);
      results = [];
      for (i = 0, len1 = deals.length; i < len1; i++) {
        d = deals[i];
        dd = d['dealData'];
        results.push(Util.dbg('  ', {
          segmentId: dd['segmentId'],
          lat: d['lat'],
          lon: d['lon'],
          buiness: d['businessName'],
          description: d['name']
        }));
      }
      return results;
    };

    Rest.prototype.logMileposts = function(args, mileposts) {
      var i, len1, milepost, results;
      args.size = mileposts.length;
      Util.dbg('logMileposts args', args);
      results = [];
      for (i = 0, len1 = mileposts.length; i < len1; i++) {
        milepost = mileposts[i];
        results.push(Util.dbg('  ', milepost));
      }
      return results;
    };

    Rest.prototype.logForecasts = function(args, forecasts) {
      var forecast, i, len1, results;
      args.size = forecasts.length;
      Util.dbg('logForecasts args', args);
      results = [];
      for (i = 0, len1 = forecasts.length; i < len1; i++) {
        forecast = forecasts[i];
        results.push(Util.dbg('  ', forecast));
      }
      return results;
    };

    Rest.prototype.jsonParse = function(url, from, args, json, onSuccess) {
      var error, error1, objs;
      json = json.toString().replace(/(\r\n|\n|\r)/gm, "");
      Util.dbg('--------------------------');
      Util.dbg(json);
      Util.dbg('--------------------------');
      try {
        objs = JSON.parse(json);
        return onSuccess(args, objs);
      } catch (error1) {
        error = error1;
        return Util.error('Rest.jsonParse()', {
          url: url,
          from: from,
          args: args,
          error: error
        });
      }
    };


    /*
     curl 'https://api.forecast.io/forecast/2c52a8974f127eee9de82ea06aadc7fb/39.759558,-105.654065?callback=jQuery21308299770827870816_1433124323587&_=1433124323588'
    
     * """https://api.forecast.io/forecast/#{key}/#{loc.lat},#{loc.lon},#{loc.time}"""
     */

    return Rest;

  })();

}).call(this);
