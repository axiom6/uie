// Generated by CoffeeScript 1.10.0
(function() {
  var $, IconsUC, Page,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jquery');

  IconsUC = require('js/exit/uc/IconsUC');

  Page = (function() {
    module.exports = Page;

    Page.IconSpecs = [
      {
        name: 'Destination',
        css: 'Icon',
        icon: 'picture-o'
      }, {
        name: 'Recommendation',
        css: 'Icon',
        icon: 'thumbs-up'
      }, {
        name: 'Trip',
        css: 'Icon',
        icon: 'road'
      }, {
        name: 'Deals',
        css: 'Icon',
        icon: 'trophy'
      }, {
        name: 'Navigate',
        css: 'Icon',
        icon: 'car'
      }, {
        name: 'Point',
        css: 'Icon',
        icon: 'compass'
      }, {
        name: 'Fork',
        css: 'Icon',
        icon: 'code-fork'
      }
    ];

    function Page(stream, destinationUI, goUI, tripUI, dealsUI, navigateUI) {
      this.stream = stream;
      this.destinationUI = destinationUI;
      this.goUI = goUI;
      this.tripUI = tripUI;
      this.dealsUI = dealsUI;
      this.navigateUI = navigateUI;
      this.onIcons = bind(this.onIcons, this);
      this.iconsUC = new IconsUC(this.stream, 'Icons', [0, 0, 100, 10], [0, 0, 100, 18], Page.IconSpecs, true, true);
      this.orientation = 'Portrait';
      this.recommendation = '?';
    }

    Page.prototype.ready = function() {
      this.$ = $(this.html());
      $('#App').append(this.$);
      this.iconsUC.ready();
      this.destinationUI.ready();
      this.goUI.ready();
      this.tripUI.ready();
      this.dealsUI.ready();
      this.navigateUI.ready();
      this.$.append(this.iconsUC.$);
      this.$view = this.$.find('#View');
      this.$view.append(this.destinationUI.$);
      this.$view.append(this.goUI.$);
      this.$view.append(this.tripUI.$);
      this.$view.append(this.dealsUI.$);
      this.$view.append(this.navigateUI.$);
      this.subscribe();
      return this.stream.publish('Icons', 'Destination');
    };

    Page.prototype.position = function(screen) {
      this.onScreen(screen);
      this.iconsUC.position(screen);
      this.destinationUI.position(screen);
      this.goUI.position(screen);
      this.tripUI.position(screen);
      this.dealsUI.position(screen);
      return this.navigateUI.position(screen);
    };

    Page.prototype.subscribe = function() {
      this.stream.subscribe('Icons', (function(_this) {
        return function(name) {
          return _this.onIcons(name);
        };
      })(this));
      this.stream.subscribe('Screen', (function(_this) {
        return function(screen) {
          return _this.onScreen(screen);
        };
      })(this));
      return this.stream.subscribe('Trip', (function(_this) {
        return function(trip) {
          return _this.onTrip(trip);
        };
      })(this));
    };

    Page.prototype.id = function(name, type) {
      return Util.htmlId(name, type);
    };

    Page.prototype.css = function(name, type) {
      return Util.css(name, type);
    };

    Page.prototype.icon = function(name, type, fa) {
      return Util.icon(name, type, fa);
    };

    Page.prototype.html = function() {
      return "<div   id=\"" + (this.id('Page')) + "\" class=\"" + (this.css('Page')) + "\">\n <div id=\"" + (this.id('View')) + "\" class=\"" + (this.css('View')) + "\"></div>\n</div>";
    };

    Page.prototype.onTrip = function(trip) {
      if (this.recommendation !== trip.recommendation) {
        this.changeRecommendation(trip.recommendation);
      }
      this.onIcons('Recommendation');
    };

    Page.prototype.reverseRecommendation = function() {
      if (this.recommendation === 'GO') {
        return 'NO GO';
      } else {
        return 'GO';
      }
    };

    Page.prototype.reverseOrientation = function() {
      if (this.orientation === 'Portrait') {
        return 'Landscape';
      } else {
        return 'Portrait';
      }
    };

    Page.prototype.changeRecommendation = function(recommendation) {
      var $icon, faClass;
      this.onIcons('Recommendation');
      faClass = recommendation === 'GO' ? 'fa fa-thumbs-up' : 'fa fa-thumbs-down';
      $icon = this.iconsUC.$find('Recommendation');
      $icon.find('i').attr('class', faClass);
      $icon.find('div').text(recommendation);
      this.goUI.bannerUC.changeRecommendation(recommendation);
      this.recommendation = recommendation;
    };

    Page.prototype.onScreen = function(screen) {
      var url;
      if (this.orientation !== screen.orientation) {
        this.orientation = screen.orientation;
        url = Util.root + "img/exit/phone6x12" + screen.orientation + ".png";
        $('body').css({
          "background-image": "url(" + url + ")"
        });
        return $('#App').attr('class', "App" + screen.orientation);
      }
    };

    Page.prototype.onIcons = function(name) {
      if (this.lastSelect != null) {
        this.lastSelect.hide();
      }
      switch (name) {
        case 'Destination':
          this.lastSelect = this.destinationUI;
          break;
        case 'Recommendation':
          this.lastSelect = this.goUI;
          break;
        case 'Trip':
          this.lastSelect = this.tripUI;
          break;
        case 'Deals':
          this.lastSelect = this.dealsUI;
          break;
        case 'Navigate':
          this.lastSelect = this.navigateUI;
          break;
        case 'Fork':
          this.changeRecommendation(this.reverseRecommendation());
          break;
        case 'Point':
          this.stream.publish('Screen', this.toScreen(this.reverseOrientation()));
          break;
        default:
          Util.error("Page.onIcons() unknown name", name);
      }
      this.lastSelect.show();
    };

    Page.prototype.width = function() {
      return this.$.width();
    };

    Page.prototype.height = function() {
      return this.$.height();
    };

    Page.prototype.toScreen = function(orientation) {
      if (orientation === this.orientation) {
        return {
          orientation: orientation,
          width: this.width(),
          height: this.height()
        };
      } else {
        return {
          orientation: orientation,
          width: this.height(),
          height: this.width()
        };
      }
    };

    return Page;

  })();

}).call(this);
