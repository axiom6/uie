// Generated by CoffeeScript 1.11.0
(function() {
  var $, IconsUC,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = require('jquery');

  IconsUC = (function() {
    module.exports = IconsUC;

    function IconsUC(stream, subject, port, land, specs, hover, stayHorz) {
      this.stream = stream;
      this.subject = subject;
      this.port = port;
      this.land = land;
      this.specs = specs;
      this.hover = hover != null ? hover : true;
      this.stayHorz = stayHorz != null ? stayHorz : true;
      this.$find = bind(this.$find, this);
    }

    IconsUC.prototype.ready = function() {
      return this.$ = $(this.html());
    };

    IconsUC.prototype.html = function() {
      var htm, i, len, ref, spec;
      htm = "<div id=\"" + (Util.htmlId('IconsUC', this.subject)) + "\" class=\"" + (Util.css('IconsUC')) + "\">";
      if (this.hover) {
        htm += "<div id=\"" + (Util.htmlId('IconsHover', this.subject)) + "\" class=\"" + (Util.css('IconsHover')) + "\"></div>";
      }
      htm += "<div id=\"" + (Util.htmlId('Icons', this.subject)) + "\" class=\"" + (Util.css('Icons')) + "\"><div>";
      ref = this.specs;
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        htm += "<div id=\"" + (Util.htmlId(spec.name, 'Icon', this.subject)) + "\" class=\"" + (Util.css(spec.css)) + "\"><i class=\"fa fa-" + spec.icon + "\"></i><div>" + spec.name + "</div></div>";
      }
      htm += "</div></div></div>";
      return htm;
    };

    IconsUC.prototype.position = function(screen) {
      this.onScreen(screen);
      this.events();
      this.subscribe();
      this.$Icons = this.$.find('#Icons' + this.subject);
      if (this.hover) {
        this.$IconsHover = this.$.find('#IconsHover' + this.subject);
        this.$IconsHover.mouseenter((function(_this) {
          return function() {
            return _this.$Icons.show();
          };
        })(this));
        return this.$Icons.mouseleave((function(_this) {
          return function() {
            return _this.$Icons.hide();
          };
        })(this));
      } else {
        return this.$Icons.show();
      }
    };

    IconsUC.prototype.$find = function(name) {
      return this.$.find('#' + name + 'Icon' + this.subject);
    };

    IconsUC.prototype.events = function() {
      var i, len, ref, results, spec;
      ref = this.specs;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        results.push(this.stream.publish(this.subject, spec.name, this.$find(spec.name), 'click'));
      }
      return results;
    };

    IconsUC.prototype.subscribe = function() {
      return this.stream.subscribe('Screen', (function(_this) {
        return function(screen) {
          return _this.onScreen(screen);
        };
      })(this));
    };

    IconsUC.prototype.onScreen = function(screen) {
      var h, i, isHorz, len, n, ref, spec, w, x, y;
      isHorz = this.stayHorz ? true : screen.orientation === 'Portrait' ? true : false;
      Util.cssPosition(this.$, screen, this.port, this.land);
      n = this.specs.length;
      x = 0;
      y = 0;
      w = isHorz ? 100 / n : 100;
      h = isHorz ? 100 : 100 / n;
      ref = this.specs;
      for (i = 0, len = ref.length; i < len; i++) {
        spec = ref[i];
        this.$find(spec.name).css({
          left: x + '%',
          top: y + '%',
          width: w + '%',
          height: h + '%'
        });
        if (isHorz) {
          x += w;
        } else {
          y += h;
        }
      }
    };

    return IconsUC;

  })();

}).call(this);
