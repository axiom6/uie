// Generated by CoffeeScript 1.6.3
(function() {
  var Box, Color, Coord, IKW, MBox, MRegress, Vis;

  MBox = require('js/mbox/MBox');

  Vis = require('js/util/Vis');

  Coord = require('js/mbox/Coord');

  Color = require('js/mbox/Color');

  IKW = require('js/mbox/IKW');

  MRegress = require('js/mbox/Regress');

  Box = (function() {
    function Box() {}

    Box.init = function() {
      return Util.ready(function() {
        return Box.doApp(MBox);
      });
    };

    Box.doApp = function(MBox) {
      var name, parse;
      parse = Util.parseURI(window.location);
      name = Util.isStr(parse.fragment) ? parse.fragment.substring(1) : '';
      switch (name) {
        case 'Cart':
          Box.doCart(MBox);
          break;
        case 'Rgbs':
          Box.doRgbs(MBox);
          break;
        case 'Color':
          Box.doColor(MBox);
          break;
        case 'IKW':
          Box.doIKW(MBox);
          break;
        case 'Planes':
          Box.doPlanes(MBox);
          break;
        case 'Regress':
          Box.doRegress(MBox);
          break;
        case 'Sphere':
          Box.doSphere(MBox);
          break;
        case 'Vecs':
          Box.doVecs(MBox, 'two');
          break;
        case 'VecsRgb':
          Box.doVecs(MBox, 'rgb');
          break;
        case 'VecsHsv':
          Box.doVecs(MBox, 'hsv');
          break;
        case 'PolarRgb':
          Box.doPolarRgb(MBox);
          break;
        case 'ScaleRgb':
          Box.doScaleRgb(MBox);
          break;
        default:
          Box.doColor(MBox);
      }
    };

    Box.doCart = function(MBox) {
      var coord, mbox, toRgb, view;
      mbox = new MBox();
      coord = new Coord(mbox, 11, 11, 11);
      view = coord.cartesian();
      toRgb = function(x, y, z) {
        return [x, y, z];
      };
      return coord.cartVolume(view, toRgb);
    };

    Box.doRgbs = function(MBox) {
      var coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 11, 11, 11);
      view = coord.cartesian();
      return coord.cartArray(view);
    };

    Box.doColor = function(MBox) {
      var coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 8, 20, 20);
      view = coord.polar();
      coord.cylVolume(view, Vis.toRgbHsv);
      return coord.cylSurface(view, Vis.toRgbHsv, mbox.sin06F);
    };

    Box.doIKW = function(MBox) {
      var color, coord, ikw, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 3, 3, 3);
      color = new Color(mbox);
      ikw = new IKW(mbox, coord, color, 3, 3, 3);
      view = ikw.museCartesian();
      return ikw.viewXyzsRgbs(view);
    };

    Box.doPlanes = function(MBox) {
      var color, coord, ikw, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 3, 3, 3);
      color = new Color(mbox);
      ikw = new IKW(mbox, coord, color, 3, 3, 3);
      view = ikw.museCartesian();
      return ikw.viewPlanes(view);
    };

    Box.doRegress = function(MBox) {
      var mbox, regress;
      mbox = new MBox();
      regress = new MRegress(mbox);
      return regress.viewLinearRegress();
    };

    Box.doSphere = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 60, 10);
      color = new Color(mbox);
      view = coord.sphere();
      return coord.sphVolume(view, Vis.toRgbSphere);
    };

    Box.doHcs = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 10, 10);
      color = new Color(mbox);
      view = coord.polar();
      color.genWithHcs(coord, view);
      return coord.cylSurface(view, Vis.toRgbHcs, mbox.sin06F);
    };

    Box.doVecs = function(MBox, see) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 9, 9);
      color = new Color(mbox);
      view = coord.polar();
      return color.genWithVecsRgb(coord, view, see);
    };

    Box.doPolarRgb = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 9, 9);
      color = new Color(mbox);
      view = coord.polar();
      return color.genPolarRgbs(coord, view, false);
    };

    Box.doScaleRgb = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 9, 9);
      color = new Color(mbox);
      view = coord.polar();
      return color.genPolarRgbs(coord, view, true);
    };

    Box.doRgbHcs = function() {
      var c, hue, s, _i, _j, _len, _len1, _ref, _ref1, _results;
      s = 100;
      c = 100;
      _ref = [0, 60, 120, 180, 240, 300];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hue = _ref[_i];
        Util.log('RgbHcs', {
          hue: hue,
          c: c,
          s: s
        }, Vis.toRgbHcs(hue, c, s));
        Util.log('RgbHsv', {
          hue: hue,
          c: c,
          s: s
        }, Vis.toRgbHsv(hue, c, s));
      }
      _ref1 = [0, 60, 120, 180, 240, 300];
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        hue = _ref1[_j];
        _results.push((function() {
          var _k, _len2, _ref2, _results1;
          _ref2 = [0, 20, 40, 60, 80, 100];
          _results1 = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            c = _ref2[_k];
            Util.log('RgbHcs', {
              hue: hue,
              c: c,
              s: s
            }, Vis.toRgbHcs(hue, c, s));
            _results1.push(Util.log('RgbHsv', {
              hue: hue,
              c: c,
              s: s
            }, Vis.toRgbHsv(hue, c, s)));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Box;

  })();

  Box.init();

}).call(this);
