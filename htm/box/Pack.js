/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.12.1
(function() {
  var Vis;

  Vis = (function() {
    function Vis() {}

    module.exports = Vis;

    Vis.Palettes = __webpack_require__(5);

    Vis.chroma = __webpack_require__(6);

    Vis.rad = function(deg) {
      return deg * Math.PI / 180;
    };

    Vis.deg = function(rad) {
      return rad * 180 / Math.PI;
    };

    Vis.sin = function(deg) {
      return Math.sin(Vis.rad(deg));
    };

    Vis.cos = function(deg) {
      return Math.cos(Vis.rad(deg));
    };

    Vis.rot = function(deg, ang) {
      var a;
      a = deg + ang;
      if (a < 0) {
        a = a + 360;
      }
      return a;
    };

    Vis.toRadian = function(h, hueIsRygb) {
      var hue, radian;
      if (hueIsRygb == null) {
        hueIsRygb = false;
      }
      hue = hueIsRygb ? Vis.toHueRygb(h) : h;
      radian = 2 * π * (90 - hue) / 360;
      if (radian < 0) {
        radian = 2 * π + radian;
      }
      return radian;
    };

    Vis.svgDeg = function(deg) {
      return 360 - deg;
    };

    Vis.svgRad = function(rad) {
      return 2 * Math.PI - rad;
    };

    Vis.radSvg = function(deg) {
      return Vis.rad(360 - deg);
    };

    Vis.degSvg = function(rad) {
      return Vis.deg(2 * Math.PI - rad);
    };

    Vis.sinSvg = function(deg) {
      return Math.sin(Vis.radSvg(deg));
    };

    Vis.cosSvg = function(deg) {
      return Math.cos(Vis.radSvg(deg));
    };

    Vis.chRgbHsl = function(h, s, l) {
      return Vis.chroma.hsl(h, s, l).rgb();
    };

    Vis.chRgbHsv = function(h, s, v) {
      return Vis.chroma.hsv(h, s, v).rgb();
    };

    Vis.chRgbLab = function(L, a, b) {
      return Vis.chroma.lab(L, a, b).rgb();
    };

    Vis.chRgbLch = function(L, c, h) {
      return Vis.chroma.lch(l, c, h).rgb();
    };

    Vis.chRgbHcl = function(h, c, l) {
      return Vis.chroma.hsl(h, s, l).rgb();
    };

    Vis.chRgbCmyk = function(c, m, y, k) {
      return Vis.chroma.hsl(c, m, y, k).rgb();
    };

    Vis.chRgbGl = function(R, G, B) {
      return Vis.chroma.gl(R, G, B).rgb();
    };

    Vis.toRgbRygb = function(r, y, g, b) {
      return [Math.max(r, y, 0), Math.max(g, y, 0), Math.max(b, 0)];
    };

    Vis.toRygbRgb = function(r, g, b) {
      return [r, Math.max(r, g), g, b];
    };

    Vis.toRgbHsvSigmoidal = function(H, C, V, toRygb) {
      var b, c, d, f, g, h, i, r, ref, v, x, y, z;
      if (toRygb == null) {
        toRygb = true;
      }
      h = toRygb ? Vis.toHueRgb(H) : H;
      d = C * 0.01;
      c = Vis.sigmoidal(d, 2, 0.25);
      v = V * 0.01;
      i = Math.floor(h / 60);
      f = h / 60 - i;
      x = 1 - c;
      y = 1 - f * c;
      z = 1 - (1 - f) * c;
      ref = (function() {
        switch (i % 6) {
          case 0:
            return [1, z, x, 1];
          case 1:
            return [y, 1, x, 1];
          case 2:
            return [x, 1, z, 1];
          case 3:
            return [x, y, 1, 1];
          case 4:
            return [z, x, 1, 1];
          case 5:
            return [1, x, y, 1];
        }
      })(), r = ref[0], g = ref[1], b = ref[2];
      return [r * v, g * v, b * v, 1];
    };

    Vis.toRgbHsv = function(H, C, V, toRygb) {
      var b, c, f, g, h, i, r, ref, v, x, y, z;
      if (toRygb == null) {
        toRygb = true;
      }
      h = toRygb ? Vis.toHueRgb(H) : H;
      c = C * 0.01;
      v = V * 0.01;
      i = Math.floor(h / 60);
      f = h / 60 - i;
      x = 1 - c;
      y = 1 - f * c;
      z = 1 - (1 - f) * c;
      ref = (function() {
        switch (i % 6) {
          case 0:
            return [1, z, x, 1];
          case 1:
            return [y, 1, x, 1];
          case 2:
            return [x, 1, z, 1];
          case 3:
            return [x, y, 1, 1];
          case 4:
            return [z, x, 1, 1];
          case 5:
            return [1, x, y, 1];
        }
      })(), r = ref[0], g = ref[1], b = ref[2];
      return [r * v, g * v, b * v, 1];
    };

    Vis.toHcsRgb = function(R, G, B, toRygb) {
      var H, a, b, c, g, h, r, s, sum;
      if (toRygb == null) {
        toRygb = true;
      }
      sum = R + G + B;
      r = R / sum;
      g = G / sum;
      b = B / sum;
      s = sum / 3;
      c = R === G && G === B ? 0 : 1 - 3 * Math.min(r, g, b);
      a = Vis.deg(Math.acos((r - 0.5 * (g + b)) / Math.sqrt((r - g) * (r - g) + (r - b) * (g - b))));
      h = b <= g ? a : 360 - a;
      if (c === 0) {
        h = 0;
      }
      H = toRygb ? Vis.toHueRgb(h) : h;
      return [H, c * 100, s / 2.55];
    };

    Vis.toRgbCode = function(code) {
      var hex, rgb, s, str;
      str = Vis.Palettes.hex(code).replace("#", "0x");
      hex = Number.parseInt(str, 16);
      rgb = Vis.hexRgb(hex);
      s = 1 / 256;
      return [rgb.r * s, rgb.g * s, rgb.b * s, 1];
    };

    Vis.toRgba = function(studyPrac) {
      var h, ref, s, v;
      if ((studyPrac.hsv != null) && studyPrac.hsv.length === 3) {
        ref = studyPrac.hsv, h = ref[0], s = ref[1], v = ref[2];
        return Vis.toRgbHsvSigmoidal(h, s, v);
      } else if (studyPrac.fill.length <= 5) {
        return Vis.toRgbCode(studyPrac.fill);
      } else {
        Util.error('Vis.toRgba() unknown fill code', studyPrac.name, studyPrac.fill);
        return '#888888';
      }
    };

    Vis.toHsvHex = function(hexStr) {
      var hex, hsv, rgb, str;
      str = hexStr.replace("#", "0x");
      hex = Number.parseInt(str, 16);
      rgb = Vis.hexRgb(hex);
      hsv = Vis.toHcsRgb(rgb.r, rgb.g, rgb.b);
      return hsv;
    };

    Vis.toHexRgb = function(rgb) {
      return rgb[0] * 4026 + rgb[1] * 256 + rgb[2];
    };

    Vis.toCssHex = function(hex) {
      return "#" + (hex.toString(16));
    };

    Vis.toCssHsv1 = function(hsv) {
      var css, hex, rgb;
      rgb = Vis.toRgbHsv(hsv[0], hsv[1], hsv[2]);
      hex = Vis.toHexRgbSigmoidal(rgb);
      css = "#" + (hex.toString());
      return css;
    };

    Vis.toCssHsv2 = function(hsv) {
      var css, rgb;
      rgb = Vis.toRgbHsvSigmoidal(hsv[0], hsv[1], hsv[2]);
      css = Vis.chroma.gl(rgb[0], rgb[1], rgb[2]).hex();
      return css;
    };

    Vis.toHsvCode = function(code) {
      var hsv, i, j, rgb;
      rgb = Vis.toRgbCode(code);
      hsv = Vis.toHcsRgb(rgb[0], rgb[1], rgb[2], true);
      for (i = j = 0; j < 3; i = ++j) {
        hsv[i] = Math.round(hsv[i]);
      }
      return hsv;
    };

    Vis.chRgbHsvStr = function(hsv) {
      var h, i, j, rgb;
      h = Vis.toHueRgb(hsv[0]);
      rgb = Vis.chRgbHsv(h, hsv[1] * 0.01, hsv[2] * 0.01);
      for (i = j = 0; j < 3; i = ++j) {
        rgb[i] = Math.round(rgb[i]);
      }
      return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + ",1)";
    };

    Vis.toRgbHsvStr = function(hsv) {
      var a, b, g, i, j, r, rgba, str;
      rgba = Vis.toRgbHsvSigmoidal(hsv[0], hsv[1], hsv[2] * 255, true);
      for (i = j = 0; j < 3; i = ++j) {
        rgba[i] = Math.round(rgba[i]);
      }
      r = rgba[0], g = rgba[1], b = rgba[2], a = rgba[3];
      str = "rgba(" + r + "," + g + "," + b + "," + a + ")";
      return str;
    };

    Vis.sigmoidal = function(x, k, x0, L) {
      if (x0 == null) {
        x0 = 0.5;
      }
      if (L == null) {
        L = 1;
      }
      return L / (1 + Math.exp(-k * (x - x0)));
    };

    Vis.prototype.rgbaStr = function() {
      var a, b, g, n, r, ref;
      n = function(f) {
        return Math.round(f);
      };
      ref = this.rgba, r = ref[0], g = ref[1], b = ref[2], a = ref[3];
      return "rgba(" + (n(r)) + "," + (n(g)) + "," + (n(b)) + "," + (n(a)) + ")";
    };

    Vis.toRgbHcs = function(H, C, S, toRygb) {
      var b, c, g, h, max, r, ref, ref1, ref2, ref3, s, v, x, y, z;
      if (toRygb == null) {
        toRygb = true;
      }
      h = toRygb ? Vis.toHueRgb(H) : H;
      c = C * 0.01;
      s = S * 0.01;
      x = 1 - c;
      y = function(a) {
        return 1 + c * Vis.cos(h - a) / Vis.cos(a + 60 - h);
      };
      z = function(a) {
        return 3 - x - y(a);
      };
      ref = [0, 0, 0], r = ref[0], g = ref[1], b = ref[2];
      if (0 <= h && h < 120) {
        ref1 = [y(0), z(0), x], r = ref1[0], g = ref1[1], b = ref1[2];
      }
      if (120 <= h && h < 240) {
        ref2 = [x, y(120), z(120)], r = ref2[0], g = ref2[1], b = ref2[2];
      }
      if (240 <= h && h < 360) {
        ref3 = [z(240), x, y(240)], r = ref3[0], g = ref3[1], b = ref3[2];
      }
      max = Math.max(r, g, b) * s;
      v = max > 255 ? s * 255 / max : s;
      return [r * v, g * v, b * v, 1];
    };

    Vis.toRgbSphere = function(hue, phi, rad) {
      return Vis.toRgbHsv(Vis.rot(hue, 90), 100 * Vis.sin(phi), 100 * rad);
    };

    Vis.toHclRygb = function(r, y, g, b) {
      var C, H, L;
      L = (r + y + g + b) / 4;
      C = (Math.abs(r - y) + Math.abs(y - g) + Math.abs(g - b) + Math.abs(b - r)) / 4;
      H = Vis.angle(r - g, y - b, 0);
      return [H, C, L];
    };

    Vis.sScale = function(hue, c, s) {
      var ch, m120, m60, s60, ss;
      ss = 1.0;
      m60 = hue % 60;
      m120 = hue % 120;
      s60 = m60 / 60;
      ch = c / 100;
      ss = m120 < 60 ? 3.0 - 1.5 * s60 : 1.5 + 1.5 * s60;
      return s * (1 - ch) + s * ch * ss;
    };

    Vis.sScaleCf = function(hue, c, s) {
      var cf, cosd, cosu, m120, m60, ss;
      ss = sScale(hue, c, s);
      m60 = hue % 60;
      m120 = hue % 120;
      cosu = (1 - Vis.cos(m60)) * 100.00;
      cosd = (1 - Vis.cos(60 - m60)) * 100.00;
      cf = m120 < 60 ? cosu : cosd;
      return ss - cf;
    };

    Vis.toHueRygb = function(hue) {
      var hRygb;
      hRygb = 0;
      if (0 <= hue && hue < 120) {
        hRygb = hue * 180 / 120;
      } else if (120 <= hue && hue < 240) {
        hRygb = 180 + (hue - 120) * 90 / 120;
      } else if (240 <= hue && hue < 360) {
        hRygb = 270 + (hue - 240) * 90 / 120;
      }
      return hRygb;
    };

    Vis.toHueRgb = function(hue) {
      var hRgb;
      hRgb = 0;
      if (0 <= hue && hue < 90) {
        hRgb = hue * 60 / 90;
      } else if (90 <= hue && hue < 180) {
        hRgb = 60 + (hue - 90) * 60 / 90;
      } else if (180 <= hue && hue < 270) {
        hRgb = 120 + (hue - 180) * 120 / 90;
      } else if (270 <= hue && hue < 360) {
        hRgb = 240 + (hue - 270) * 120 / 90;
      }
      return hRgb;
    };

    Vis.pad2 = function(n) {
      var s;
      s = n.toString();
      if (0 <= n && n <= 9) {
        s = '&nbsp;' + s;
      }
      return s;
    };

    Vis.pad3 = function(n) {
      var s;
      s = n.toString();
      if (0 <= n && n <= 9) {
        s = '&nbsp;&nbsp;' + s;
      }
      if (10 <= n && n <= 99) {
        s = '&nbsp;' + s;
      }
      return s;
    };

    Vis.dec = function(f) {
      return Math.round(f * 100) / 100;
    };

    Vis.quotes = function(str) {
      return '"' + str + '"';
    };

    Vis.within = function(beg, deg, end) {
      return beg <= deg && deg <= end;
    };

    Vis.isZero = function(v) {
      return -0.01 < v && v < 0.01;
    };

    Vis.floor = function(x, dx) {
      var dr;
      dr = Math.round(dx);
      return Math.floor(x / dr) * dr;
    };

    Vis.ceil = function(x, dx) {
      var dr;
      dr = Math.round(dx);
      return Math.ceil(x / dr) * dr;
    };

    Vis.to = function(a, a1, a2, b1, b2) {
      return (a - a1) / (a2 - a1) * (b2 - b1) + b1;
    };

    Vis.angle = function(x, y) {
      var ang;
      if (!this.isZero(x) && !this.isZero(y)) {
        ang = Vis.deg(Math.atan2(y, x));
      }
      if (this.isZero(x) && this.isZero(y)) {
        ang = 0;
      }
      if (x > 0 && this.isZero(y)) {
        ang = 0;
      }
      if (this.isZero(x) && y > 0) {
        ang = 90;
      }
      if (x < 0 && this.isZero(y)) {
        ang = 180;
      }
      if (this.isZero(x) && y < 0) {
        ang = 270;
      }
      ang = Vis.deg(Math.atan2(y, x));
      return ang = ang < 0 ? 360 + ang : ang;
    };

    Vis.angleSvg = function(x, y) {
      return Vis.angle(x, -y);
    };

    Vis.minRgb = function(rgb) {
      return Math.min(rgb.r, rgb.g, rgb.b);
    };

    Vis.maxRgb = function(rgb) {
      return Math.max(rgb.r, rgb.g, rgb.b);
    };

    Vis.sumRgb = function(rgb) {
      return rgb.r + rgb.g + rgb.b;
    };

    Vis.hexCss = function(hex) {
      return "#" + (hex.toString(16));
    };

    Vis.rgbCss = function(rgb) {
      return "rgb(" + rgb.r + "," + rgb.g + "," + rgb.b + ")";
    };

    Vis.hslCss = function(hsl) {
      return "hsl(" + hsl.h + "," + (hsl.s * 100) + "%," + (hsl.l * 100) + "%)";
    };

    Vis.hsiCss = function(hsi) {
      return Vis.hslCss(Vis.rgbToHsl(Vis.hsiToRgb(hsi)));
    };

    Vis.hsvCss = function(hsv) {
      return Vis.hslCss(Vis.rgbToHsl(Vis.hsvToRgb(hsv)));
    };

    Vis.roundRgb = function(rgb, f) {
      if (f == null) {
        f = 1.0;
      }
      return {
        r: Math.round(rgb.r * f),
        g: Math.round(rgb.g * f),
        b: Math.round(rgb.b * f)
      };
    };

    Vis.roundHsl = function(hsl) {
      return {
        h: Math.round(hsl.h),
        s: Vis.dec(hsl.s),
        l: Vis.dec(hsl.l)
      };
    };

    Vis.roundHsi = function(hsi) {
      return {
        h: Math.round(hsi.h),
        s: Vis.dec(hsi.s),
        i: Math.round(hsi.i)
      };
    };

    Vis.roundHsv = function(hsv) {
      return {
        h: Math.round(hsv.h),
        s: Vis.dec(hsv.s),
        v: Vis.dec(hsv.v)
      };
    };

    Vis.fixedDec = function(rgb) {
      return {
        r: Vis.dec(rgb.r),
        g: Vis.dec(rgb.g),
        b: Vis.dec(rgb.b)
      };
    };

    Vis.hexRgb = function(hex) {
      return Vis.roundRgb({
        r: (hex & 0xFF0000) >> 16,
        g: (hex & 0x00FF00) >> 8,
        b: hex & 0x0000FF
      });
    };

    Vis.rgbHex = function(rgb) {
      return rgb.r * 4096 + rgb.g * 256 + rgb.b;
    };

    Vis.cssRgb = function(str) {
      var hex, hsl, rgb, toks;
      rgb = {
        r: 0,
        g: 0,
        b: 0
      };
      if (str[0] === '#') {
        hex = parseInt(str.substr(1), 16);
        rgb = Vis.hexRgb(hex);
      } else if (str.slice(0, 3) === 'rgb') {
        toks = str.split(/[\s,\(\)]+/);
        rgb = Vis.roundRgb({
          r: parseInt(toks[1]),
          g: parseInt(toks[2]),
          b: parseInt(toks[3])
        });
      } else if (str.slice(0, 3) === 'hsl') {
        toks = str.split(/[\s,\(\)]+/);
        hsl = {
          h: parseInt(toks[1]),
          s: parseInt(toks[2]),
          l: parseInt(toks[3])
        };
        rgb = Vis.hslToRgb(hsl);
      } else {
        Util.error('Vis.cssRgb() unknown CSS color', str);
      }
      return rgb;
    };

    Vis.rgbToHsi = function(rgb) {
      var a, b, g, h, i, r, s, sum;
      sum = Vis.sumRgb(rgb);
      r = rgb.r / sum;
      g = rgb.g / sum;
      b = rgb.b / sum;
      i = sum / 3;
      s = 1 - 3 * Math.min(r, g, b);
      a = Vis.deg(Math.acos((r - 0.5 * (g + b)) / Math.sqrt((r - g) * (r - g) + (r - b) * (g - b))));
      h = b <= g ? a : 360 - a;
      return Vis.roundHsi({
        h: h,
        s: s,
        i: i
      });
    };

    Vis.hsiToRgb = function(hsi) {
      var fac, h, i, max, rgb, s, x, y, z;
      h = hsi.h;
      s = hsi.s;
      i = hsi.i;
      x = 1 - s;
      y = function(a) {
        return 1 + s * Vis.cos(h - a) / Vis.cos(a + 60 - h);
      };
      z = function(a) {
        return 3 - x - y(a);
      };
      rgb = {
        r: 0,
        g: 0,
        b: 0
      };
      if (0 <= h && h < 120) {
        rgb = {
          r: y(0),
          g: z(0),
          b: x
        };
      }
      if (120 <= h && h < 240) {
        rgb = {
          r: x,
          g: y(120),
          b: z(120)
        };
      }
      if (240 <= h && h < 360) {
        rgb = {
          r: z(240),
          g: x,
          b: y(240)
        };
      }
      max = Vis.maxRgb(rgb) * i;
      fac = max > 255 ? i * 255 / max : i;
      return Vis.roundRgb(rgb, fac);
    };

    Vis.hsvToRgb = function(hsv) {
      var f, i, p, q, rgb, t, v;
      i = Math.floor(hsv.h / 60);
      f = hsv.h / 60 - i;
      p = hsv.v * (1 - hsv.s);
      q = hsv.v * (1 - f * hsv.s);
      t = hsv.v * (1 - (1 - f) * hsv.s);
      v = hsv.v;
      rgb = (function() {
        switch (i % 6) {
          case 0:
            return {
              r: v,
              g: t,
              b: p
            };
          case 1:
            return {
              r: q,
              g: v,
              b: p
            };
          case 2:
            return {
              r: p,
              g: v,
              b: t
            };
          case 3:
            return {
              r: p,
              g: q,
              b: v
            };
          case 4:
            return {
              r: t,
              g: p,
              b: v
            };
          case 5:
            return {
              r: v,
              g: p,
              b: q
            };
          default:
            Util.error('Vis.hsvToRgb()');
            return {
              r: v,
              g: t,
              b: p
            };
        }
      })();
      return Vis.roundRgb(rgb, 255);
    };

    Vis.rgbToHsv = function(rgb) {
      var d, h, max, min, s, v;
      rgb = Vis.rgbRound(rgb, 1 / 255);
      max = Vis.maxRgb(rgb);
      min = Vis.maxRgb(rgb);
      v = max;
      d = max - min;
      s = max === 0 ? 0 : d / max;
      h = 0;
      if (max !== min) {
        h = (function() {
          switch (max) {
            case r:
              return (rgb.g - rgb.b) / d + (g < b ? 6 : 0);
            case g:
              return (rgb.b - rgb.r) / d + 2;
            case b:
              return (rgb.r - rgb.g) / d + 4;
            default:
              return Util.error('Vis.rgbToHsv');
          }
        })();
      }
      return {
        h: Math.round(h * 60),
        s: Vis.dec(s),
        v: Vis.dec(v)
      };
    };

    Vis.hslToRgb = function(hsl) {
      var b, g, h, l, p, q, r, s;
      h = hsl.h;
      s = hsl.s;
      l = hsl.l;
      r = 1;
      g = 1;
      b = 1;
      if (s !== 0) {
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        r = Vis.hue2rgb(p, q, h + 1 / 3);
        g = Vis.hue2rgb(p, q, h);
        b = Vis.hue2rgb(p, q, h - 1 / 3);
      }
      return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255)
      };
    };

    Vis.hue2rgb = function(p, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
    };

    Vis.rgbsToHsl = function(red, green, blue) {
      return this.rgbToHsl({
        r: red,
        g: green,
        b: blue
      });
    };

    Vis.rgbToHsl = function(rgb) {
      var b, d, g, h, l, max, min, r, s;
      r = rgb.r / 255;
      g = rgb.g / 255;
      b = rgb.b / 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      h = 0;
      l = (max + min) / 2;
      s = 0;
      if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = (function() {
          switch (max) {
            case r:
              return (g - b) / d + (g < b ? 6 : 0);
            case g:
              return (b - r) / d + 2;
            case b:
              return (r - g) / d + 4;
            default:
              Util.error('Vis.@rgbToHsl()');
              return 0;
          }
        })();
      }
      return {
        h: Math.round(h * 60),
        s: Vis.dec(s),
        l: Vis.dec(l)
      };
    };

    Vis.FontAwesomeUnicodes = {
      "fa-calendar-o": "\uf133",
      "fa-book": "\uf02d",
      "fa-steam": "\uf1b6",
      "fa-circle": "\uf111",
      "fa-signal": "\uf012",
      "fa-external-link-square": "\uf14c",
      "fa-group": "\uf0c0",
      "fa-empire": "\uf1d1",
      "fa-diamond": "\uf219",
      "fa-spinner": "\uf110",
      "fa-wrench": "\uf0ad",
      "fa-bar-chart-o": "\uf080",
      "fa-refresh": "\uf021",
      "fa-medkit": "\uf0fa",
      "fa-compass": "\uf14e",
      "fa-flask": "\uf0c3",
      "fa-connectdevelop": "\uf20e",
      "fa-joomla": "\uf1aa",
      "fa-bar-chart": "\uf080",
      "fa-star-o": "\uf006",
      "fa-area-chart": "\uf1fe",
      "fa-cloud": "\uf0c2",
      "fa-code-fork": "\uf126",
      "fa-question-circle": "\uf059",
      "fa-tripadvisor": "\uf262",
      "fa-magic": "\uf0d0",
      "fa-object-group": "\uf247",
      "fa-language": "\uf1ab",
      "fa-graduation-cap": "\uf19d",
      "fa-user-plus": "\uf234",
      "fa-github-square": "\uf092",
      "fa-paint-brush": "\uf1fc",
      "fa-lightbulb-o": "\uf0eb",
      "fa-address-card": "\uf2bb",
      "fa-history": "\uf1da",
      "fa-eye": "\uf06e",
      "fa-fire": "\uf06d",
      "fa-codepen": "\uf0c1",
      "fa-link": "\uf0c1",
      "fa-tasks": "\uf0ae",
      "fa-child": "\uf1ae",
      "fa-briefcase": "\uf0b1",
      "fa-dropbox": "\uf16b",
      "fa-user": "\uf007",
      "fa-heart": "\uf004",
      "fa-truck": "\uf0d1",
      "fa-star": "\uf005",
      "fa-sitemap": "\uf0e8",
      "fa-cube": "\uf0eb",
      "fa-desktop": "\uf108",
      "fa-bars": "\uf0c9",
      "fa-database": "\uf1c0",
      "fa-binoculars": "\uf164",
      "fa-thumbs-up": "\uf0a2",
      "fa-bell": "\uf0f1",
      "fa-stethoscope": "\uf0f1",
      "fa-random": "\uf074",
      "fa-cogs": "\uf085",
      "fa-life-ring": "\uf1cd",
      "fa-globe": "\uf0ac",
      "fa-lock": "\uf023",
      "fa-cubes": "\uf1b3",
      "fa-money": "\uf0d6",
      "fa-anchor": "\uf13d",
      "fa-legal": "\uf0e3",
      "fa-university": "\uf19c",
      "fa-shield": "\uf132",
      "fa-align-left": "\uf036",
      "fa-arrow-circle-right": "\uf0a9",
      "fa-retweet": "\uf079",
      "fa-check-square": "\uf14a",
      "fa-modx": "\uf285",
      "fa-ioxhost": "\uf208",
      "fa-calculator": "\uf1ec",
      "fa-wordpress": "\uf19a",
      "fa-filter": "\uf0b0",
      "fa-html5": "\uf13b",
      "fa-search": "\uf002",
      "fa-leanpub": "\uf212",
      "fa-sliders": "\uf1de",
      "fa-database": "\uf1c0",
      "fa-table": "\uf0ce",
      "fa-user-md": "\uf0f0",
      "fa-line-chart": "\uf201",
      "fa-certificate": "\uf0a3",
      "fa-clone": "\uf24d",
      "fa-thumbs-down": "\uf165",
      "fa-hand-peace-o": "\uf25b",
      "fa-users": "\uf0c0",
      "fa-balance-scale": "\uf24e",
      "fa-newspaper-o": "\uf1ea",
      "fa-wechat": "\uf1d7 ",
      "fa-leaf": "\uf06c",
      "fa-dropbox": "\uf16b",
      "fa-external-link-square": "\uf14c",
      "fa-university": "\uf19c",
      "fa-life-ring": "\uf1cd",
      "fa-cubes": "\uf1b3",
      "fa-anchor": "\uf13d",
      "fa-compass": "\uf066",
      "fa-question": "\uf128",
      "fa-asl-interpreting": "\uf2a3",
      "fa-road": "\uf018",
      "fa-pied-piper-alt": "\uf1a8",
      "fa-gift": "\uf06b",
      "fa-universal-access": "\uf29a",
      "fa-cloud-download": "\uf0ed",
      "fa-blind": "\uf29d",
      "fa-sun-o": "\uf185",
      "fa-gears": "\uf085",
      "fa-gamepad": "\uf11b",
      "fa-slideshare": "\uf1e7",
      "fa-envelope-square": "\uf199",
      "fa-recycle": "\uf1b8",
      "fa-list-alt": "\uf022",
      "fa-wheelchair-alt": "\uf29b",
      "fa-trophy": "\uf091",
      "fa-headphones": "\uf025",
      "fa-codiepie": "\uf284",
      "fa-building-o": "\uf0f7",
      "fa-plus-circle": "\uf055",
      "fa-server": "\uf233",
      "fa-square-o": "\uf096",
      "fa-share-alt": "\uf1e0"
    };

    Vis.unicode = function(icon) {
      var uc;
      uc = Vis.FontAwesomeUnicodes[icon];
      if (uc == null) {
        Util.error('Vis.unicode() missing icon in Vis.FontAwesomeUnicodes for', icon);
        uc = "\uf111";
      }
      return uc;
    };

    Vis.unichar = function(icon) {
      var uc, un, us;
      uc = Vis.FontAwesomeUnicodes[icon];
      uc = uc == null ? "\uf111" : uc;
      un = Number.parseInt('0xf0ad', 16);
      us = String.fromCharCode(un);
      Util.log('Vis.unichar', {
        icon: icon,
        uc: uc,
        un: un,
        us: us
      });
      return "\uF000";
    };

    Vis.uniawe = function(icon) {
      var temp, uni;
      temp = document.createElement("i");
      temp.className = icon;
      document.body.appendChild(temp);
      uni = window.getComputedStyle(document.querySelector('.' + icon), ':before').getPropertyValue('content');
      Util.log('uniawe', icon, uni);
      temp.remove();
      return uni;
    };


    /*
    var setCursor = function (icon) {
        var tempElement = document.createElement("i");
        tempElement.className = icon;
        document.body.appendChild(tempElement);
        var character = window.getComputedStyle(
            document.querySelector('.' + icon), ':before'
        ).getPropertyValue('content');
        tempElement.remove();
     */

    return Vis;

  })();

}).call(this);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
(function() {
  var Build, MBox, Vis;

  Vis = __webpack_require__(0);

  Build = __webpack_require__(2);

  MBox = (function() {
    module.exports = MBox;

    function MBox() {
      var THREE;
      THREE = window['THREE'];
      this.mathbox = mathBox({
        plugins: ['core', 'controls', 'cursor', 'stats'],
        controls: {
          klass: THREE.OrbitControls
        }
      });
      if (this.mathbox.fallback) {
        Util.error('mathbox WebGL not supported');
      }
      Util.mathbox = this.mathbox;
      this.three = this.mathbox.three;
      this.three.renderer.setClearColor(new THREE.Color(0x000000), 1.0);
      Util.time = 0;
      this.setupTime();
    }

    MBox.prototype.createBuild = function() {
      var args;
      args = {
        name: 'Muse',
        plane: 'Information',
        op: ''
      };
      return new Build(args);
    };

    MBox.prototype.setupTime = function() {
      this.three.on('update', function() {
        return Util.time = this.three.Time.clock;
      });
      Util.noop();
    };

    /*
    createMenuBar:( ncs ) ->
      liStyle = "display:inline; margin-right:10px; position:relative; left:0; top:0; width:auto; height:auto;"
      $ul = $("""<ul style="position:absolute; left:20px; top:10px; background:white; display:inline; list-style:none; list-style-image:none;">""")
      for nc in ncs
        [n,c] = nc
        $li = $("""<li style="#{liStyle}"><buttons>#{n}</buttons></li>""")
        $li.on( 'click', c )
        $ul.append($li)
      $('body').append($ul)
      return
    */


    /*
    """<button style="position: absolute; bottom: 15px; left: 50%; margin-left: -60px; width: 120px; font-size: 20px;" onclick="#{c}">#{n}</button>"""
    */


    MBox.prototype.pv1v2 = function(p, v1, v2) {
      var i, p1, p2, v3, _i;
      p1 = p * 0.01;
      p2 = 1.0 - p1;
      v3 = [0, 0, 0];
      for (i = _i = 0; _i < 3; i = ++_i) {
        v3[i] = v1[i] * p1 + v2[i] * p2;
      }
      return v3;
    };

    MBox.prototype.toRad = function(i, n) {
      var hue;
      hue = (i * 360 / n) % 360;
      return Vis.toRadian(hue);
    };

    MBox.prototype.toHue = function(i, n) {
      var h;
      h = (i * 360 / n) % 360;
      return Util.toInt(h);
    };

    MBox.prototype.sin9 = function(x, y) {
      return 0.5 + 0.25 * Math.sin(12 * x + Util.time * 0.3) + 0.25 * Math.sin(12 * y + Util.time * 0.3);
    };

    MBox.prototype.sin12 = function(x, y) {
      return 0.5 + 0.50 * Math.sin(12 * x + Util.time * 0.3) + 0.50 * Math.sin(12 * y + Util.time * 0.3);
    };

    MBox.prototype.sinNorm = function(x, y) {
      return Math.sin(12 * x + Util.time * 0.3) + Math.sin(12 * y + Util.time * 0.3);
    };

    MBox.prototype.sin9Pq = function(a, r) {
      return 0.5 + 0.25 * Math.sin(12 * (r + a) + Util.time * 1.2 + π / 12) + 0.25 * Math.cos(12 * a);
    };

    MBox.prototype.sin9P = function(a, r) {
      return 0.5 * Math.sin(12 * (a + r) + Util.time * 1.2 + π / 12) + 0.5 * Math.cos(12 * a);
    };

    MBox.prototype.sin9R = function(a, r) {
      return 0.5 + 0.25 * Math.sin(12 * r * a + Util.time * 1.2) + 0.25 * Math.sin(6 * a);
    };

    MBox.prototype.sin9P = function(a, r) {
      return 0.5 + 0.25 * Math.sin(12 * r + Util.time * 0.3 + π / 12) + 0.25 * Math.sin(12 * a + π / 12);
    };

    MBox.prototype.sin9PJan = function(a, r) {
      return 0.5 * Math.sin(12 * (a + r) + Util.time * 1.2 + π / 12) + 0.50 * Math.cos(12 * a);
    };

    MBox.prototype.sin9QJan = function(a, r) {
      return 0.5 + 0.25 * Math.sin(12 * r + Util.time * 0.3 + π / 12) + 0.25 * Math.sin(12 * a + π / 12);
    };

    MBox.prototype.sin12P = function(a, r) {
      return 0.5 * Math.sin(12 * (r + a) + Util.time * 1.2) + 0.5 * Math.cos(12 * a);
    };

    MBox.prototype.sin12R = function(a, r) {
      return .5 + 0.25 * Math.sin(r + a) + 0.25 * Math.cos(r + a * Util.time * 0.5);
    };

    MBox.prototype.sin12PMar = function(a, r) {
      return .5 + .5 * Math.sin(12 * (r + a) + Util.time) * Math.sin(9 * a + Util.time);
    };

    MBox.prototype.sin12CMar = function(a, r) {
      return .5 + .5 * Math.sin(12 * (r + a) + Util.time) * Math.sin(9 * a + Util.time) * Math.cos(r);
    };

    MBox.prototype.sin09PMar = function(a, r) {
      return .5 + .5 * Math.sin(9 * (r + a) + Util.time) * Math.sin(9 * a + Util.time);
    };

    MBox.prototype.sin01Oct = function(a, r) {
      return .5 + .5 * Math.sin(a + Util.time) * Math.sin(r + Util.time);
    };

    MBox.prototype.sin09Oct = function(a, r) {
      return .5 + .5 * Math.sin(9 * a + Util.time) * Math.sin(9 * r + Util.time);
    };

    MBox.prototype.sin12Oct = function(a, r) {
      return .5 + .5 * Math.sin(12 * a + Util.time) * Math.sin(12 * r + Util.time);
    };

    MBox.prototype.cos01Oct = function(a, r) {
      return .5 + .5 * Math.cos(a + Util.time) * Math.cos(r + Util.time);
    };

    MBox.prototype.sin12AMay = function(a, r) {
      return .5 + .50 * Math.cos(12 * a + Util.time);
    };

    MBox.prototype.sin12RMay = function(a, r) {
      return .5 + .50 * Math.cos(12 * r + Util.time);
    };

    MBox.prototype.sin12MMay = function(a, r) {
      return .5 + .50 * Math.cos(12 * a + Util.time) * 1.00 * Math.cos(12 * r + Util.time);
    };

    MBox.prototype.sin12PMay = function(a, r) {
      return .5 + .25 * Math.cos(12 * a + Util.time) + .25 * Math.cos(12 * r + Util.time);
    };

    MBox.prototype.sin12QMay = function(a, r) {
      return .5 + .25 * Math.cos(12 * a + Util.time) + .25 * Math.cos(12 * r + Util.time);
    };

    MBox.prototype.sin12QJan = function(a, r) {
      return .50 + .50 * Math.sin(12 * (r + a) + Util.time * 1.2);
    };

    MBox.prototype.sin12AJan = function(a, r) {
      return .50 + .50 * Math.sin(12 * a + Util.time * 1.2);
    };

    MBox.prototype.sin06AJan = function(a, r) {
      return .50 + .50 * Math.sin(3 * a + Util.time * 1.2);
    };

    MBox.prototype.sin06B = function(a, r) {
      return .55 + .45 * Math.sin(3 * a + Util.time);
    };

    MBox.prototype.sin06C = function(a, r) {
      return .60 + .40 * Math.sin(3 * a + Util.time);
    };

    MBox.prototype.sin03D = function(a, r) {
      return .60 + .40 * Math.sin(3 * a + Util.time) * Math.sin(r * 0.11 + Util.time);
    };

    MBox.prototype.sin06D = function(a, r) {
      return .60 + .40 * Math.sin(6 * a + Util.time) * Math.sin(r * 0.11 + Util.time);
    };

    MBox.prototype.sin06E = function(a, r) {
      return .60 + .40 * Math.sin(6 * a + Util.time) * Math.sin(r / 12 + Util.time);
    };

    MBox.prototype.sin06F = function(a, r) {
      return .60 + .40 * Math.sin(6 * a + Util.time) * Math.sin(r / 8 + Util.time);
    };

    MBox.prototype.sigmoidal = function(x, k, x0) {
      if (x0 == null) {
        x0 = 0.5;
      }
      return 1 / (1 + Math.exp(-k * (x - x0)));
    };

    MBox.prototype.depth = function() {
      return Math.abs(Math.cos(Util.time * 0.5));
    };

    MBox.prototype.toDep = function(a, r) {
      return Math.abs(Math.cos(6 * (r + a) + Util.time * 0.5));
    };

    return MBox;

  })();

}).call(this);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
(function() {
  var Build,
    __hasProp = {}.hasOwnProperty;

  Build = (function() {
    module.exports = Build;

    Build.Muse = __webpack_require__(8);

    Build.Info = __webpack_require__(9);

    Build.Augm = __webpack_require__(10);

    Build.Data = __webpack_require__(11);

    Build.Know = __webpack_require__(12);

    Build.Wise = __webpack_require__(13);

    Build.Hues = __webpack_require__(14);

    function Build(args) {
      this.name = args.name;
      this.op = args.op;
      this.Core = this.core(this.name);
      this.None = this.Core.None;
      this.NoneStudy = this.Core.NoneStudy;
      this.Rows = this.toRows(this.Core.Rows);
      this.Columns = this.toColumns(this.Core.Columns);
      this.Planes = this.createPlanes(this.Core.Planes);
      this.Routes = this.createRoutes();
      this.NavbSpecs = Build.NavbSpecs;
      this.margin = this.Core.Margin;
      this.maxLevel = 5;
      this.fullUI = true;
      this.topicFontFactor = this.Core.topicFontFactor;
      Util.noop(this.op);
      Util.build = this;
      this.subscribe();
    }

    Build.prototype.isChild = function(key) {
      var a;
      a = key.charAt(0);
      return a === a.toUpperCase();
    };

    Build.prototype.combine = function() {
      var arg, key, obj, val, _i, _len;
      obj = {};
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        for (key in arg) {
          if (!__hasProp.call(arg, key)) continue;
          val = arg[key];
          obj[key] = val;
        }
      }
      return obj;
    };

    Build.prototype.subscribe = function() {
      return window.onresize = this.resize;
    };

    Build.prototype.core = function(name) {
      switch (name) {
        case 'Muse':
          return Build.Muse;
        default:
          Util.error('Build.core() unknown app name', name);
          return Build.Muse;
      }
    };

    Build.prototype.logCore = function() {
      Util.log('------ Beg Core ------');
      Util.log("Planes: ", this.Core.Planes);
      Util.log("None", this.Core.None);
      Util.log("Practices: ", this.practices);
      Util.log("Studies: ", this.studies);
      return Util.log('------ End Core ------');
    };

    Build.prototype.adjacentPractice = function(practice, dir) {
      var col, key, plane, pln, prac, practices, row, _ref, _ref1;
      if ((practice == null) || (practice.name == null) || practice.name === 'None' || (practice.column == null)) {
        return this.None;
      }
      _ref = (function() {
        switch (dir) {
          case 'west':
            return [this.Columns[practice.column].west, practice.row, practice.plane];
          case 'east':
            return [this.Columns[practice.column].east, practice.row, practice.plane];
          case 'north':
            return [practice.column, this.Rows[practice.row].north, practice.plane];
          case 'south':
            return [practice.column, this.Rows[practice.row].south, practice.plane];
          case 'prev':
            return [practice.column, practice.row, this.Core.Planes[practice.plane].prev];
          case 'next':
            return [practice.column, practice.row, this.Core.Planes[practice.plane].next];
          default:
            return ["", "", ""];
        }
      }).call(this), col = _ref[0], row = _ref[1], pln = _ref[2];
      if ([col, row, pln] === ["", "", ""]) {
        return this.None;
      }
      _ref1 = this.Planes;
      for (key in _ref1) {
        plane = _ref1[key];
        practices = this.getPractices(key);
        for (key in practices) {
          if (!__hasProp.call(practices, key)) continue;
          prac = practices[key];
          if (prac.column === col && prac.row === row && prac.plane === pln) {
            return prac;
          }
        }
      }
      return this.None;
    };

    Build.prototype.adjacentStudies = function(practice, dir) {
      var adjPrac;
      adjPrac = this.adjacentPractice(practice, dir);
      if (adjPrac.name !== 'None' && (adjPrac.studies != null)) {
        return adjPrac.studies;
      } else {
        return {};
      }
    };

    Build.prototype.logAdjacentPractices = function() {
      var key, p, plane, practices, _ref;
      this.setAdjacents(this.None);
      _ref = this.Planes;
      for (key in _ref) {
        plane = _ref[key];
        practices = this.getPractices(key);
        for (key in practices) {
          if (!__hasProp.call(practices, key)) continue;
          p = practices[key];
          this.setAdjacents(p);
          Util.log({
            p: key,
            column: p.column,
            west: p.west.name,
            east: p.east.name,
            north: p.north.name,
            south: p.south.name,
            prev: p.prev.name,
            next: p.next.name
          });
        }
      }
    };

    Build.prototype.connectName = function(practice, dir) {
      var adjacent;
      adjacent = this.adjacentPractice(practice, dir);
      if (adjacent.name !== 'None') {
        return [practice.name, adjacent.name];
      } else {
        return ['None', 'None'];
      }
    };

    Build.prototype.setAdjacents = function(practice) {
      practice.west = this.adjacentPractice(practice, 'west');
      practice.east = this.adjacentPractice(practice, 'east');
      practice.north = this.adjacentPractice(practice, 'north');
      practice.south = this.adjacentPractice(practice, 'south');
      practice.prev = this.adjacentPractice(practice, 'prev');
      practice.next = this.adjacentPractice(practice, 'next');
    };

    Build.prototype.toRows = function(rows) {
      var key, row;
      for (key in rows) {
        row = rows[key];
        row['key'] = key;
        row['name'] = row.name != null ? row.name : key;
        if (row['quels'] != null) {
          row['cells'] = this.toCells(row['quels']);
        }
      }
      return rows;
    };

    Build.prototype.toColumns = function(cols) {
      var col, key;
      for (key in cols) {
        col = cols[key];
        col['key'] = key;
        col['name'] = col.name != null ? col.name : key;
        if (col['quels'] != null) {
          col['cells'] = this.toCells(col['quels']);
        }
      }
      return cols;
    };

    Build.prototype.toGroups = function(groups) {
      var group, key;
      for (key in groups) {
        group = groups[key];
        group['key'] = key;
        group['name'] = group.name != null ? group.name : key;
        if (group['quels'] != null) {
          group['cells'] = this.toCells(group['quels']);
        }
        group['border'] = group['border'] != null ? group['border'] : '0';
      }
      return groups;
    };

    Build.prototype.planeGroups = function(plane, practice) {
      var group, _i, _len, _ref;
      if (practice.groups == null) {
        return;
      }
      _ref = practice.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        if (plane.groups[group] == null) {
          plane.groups[group] = {};
        }
      }
    };

    Build.prototype.toCells = function(quels) {
      return [quels[0], quels[1] - quels[0] + 1, quels[2], quels[3] - quels[2] + 1];
    };

    Build.prototype.notContext = function(key) {
      return key !== '@context';
    };

    Build.prototype.createFilteredPractices = function(plane) {
      var filtered, ikey, item, pkey, practice, practices, skey, study, tkey, topic;
      practices = Build[plane.spec];
      filtered = {};
      for (pkey in practices) {
        practice = practices[pkey];
        if (!(this.isChild(pkey))) {
          continue;
        }
        practice['name'] = pkey;
        practice.studies = {};
        practice.children = [];
        filtered[pkey] = practice;
        for (skey in practice) {
          study = practice[skey];
          if (!(this.isChild(skey))) {
            continue;
          }
          study['name'] = skey;
          study.topics = {};
          study.children = [];
          practice.studies[skey] = study;
          practice.children.push(study);
          for (tkey in study) {
            topic = study[tkey];
            if (!(this.isChild(tkey))) {
              continue;
            }
            topic['name'] = tkey;
            topic.items = {};
            topic.children = [];
            study.topics[tkey] = topic;
            study.children.push(topic);
            for (ikey in topic) {
              item = topic[ikey];
              if (!(this.isChild(ikey))) {
                continue;
              }
              item['name'] = ikey;
              topic.items[ikey] = item;
            }
          }
        }
      }
      return filtered;
    };

    Build.prototype.createOverview = function(plane) {
      var overview, pkey, practice, practices;
      practices = Build[plane.id];
      overview = {};
      overview.name = plane.id;
      overview.cells = [1, plane.spec.nrow, 1, plane.spec.ncol];
      overview.hsv = [60, 90, 90];
      overview.icon = "fa-group";
      overview.children = [];
      for (pkey in practices) {
        practice = practices[pkey];
        if (this.isChild(pkey)) {
          overview.children.push(practice);
        }
      }
      return overview;
    };

    Build.prototype.createAsciiDoc = function(practices) {
      var adoc, ikey, item, name, pkey, practice, skey, study, tkey, topic;
      adoc = "";
      for (pkey in practices) {
        practice = practices[pkey];
        if (!(this.isChild(pkey))) {
          continue;
        }
        name = Util.toName1(pkey);
        adoc += "\n= [black]#" + name + "#\n";
        for (skey in practice) {
          study = practice[skey];
          if (!(this.isChild(skey))) {
            continue;
          }
          name = Util.toName1(skey);
          adoc += "\n== [black]#" + name + "#\n";
          for (tkey in study) {
            topic = study[tkey];
            if (!(this.isChild(tkey))) {
              continue;
            }
            name = Util.toName1(tkey);
            adoc += "  " + name + "\n";
            for (ikey in topic) {
              item = topic[ikey];
              if (!(this.isChild(ikey))) {
                continue;
              }
              name = Util.toName1(ikey);
              adoc += "    " + name + "\n";
            }
          }
        }
      }
      return Util.saveFile(adoc, 'Data.adoc', 'adoc');
    };

    Build.prototype.createJsonDoc = function(practices) {
      var doc, ikey, item, pkey, pracs, practice, skey, study, tkey, toProp, topic;
      doc = {};
      toProp = function(prop, name) {
        if ((prop != null) && prop !== 'None') {
          return prop;
        } else {
          return Util.toName(name);
        }
      };
      pracs = ['Describe', 'Distill', 'Predict', 'Advise'];
      for (pkey in practices) {
        practice = practices[pkey];
        if (!(this.isChild(pkey) && Util.inArray(pracs, pkey))) {
          continue;
        }
        doc[pkey] = {};
        for (skey in practice) {
          study = practice[skey];
          if (!(this.isChild(skey) && study.dir === 'ned' || study.dir === 'nwd')) {
            continue;
          }
          doc[pkey][skey] = {};
          for (tkey in study) {
            topic = study[tkey];
            if (!(this.isChild(tkey))) {
              continue;
            }
            doc[pkey][skey][tkey] = {
              title: toProp(topic.title, tkey),
              abstract: [""],
              purpose: [toProp(topic.purpose, "")]
            };
            for (ikey in topic) {
              item = topic[ikey];
              if (this.isChild(ikey)) {
                doc[pkey][skey][tkey][ikey] = {
                  title: toProp(item.title, ikey),
                  abstract: [""],
                  purpose: [toProp(topic.purpose, "")],
                  advantages: [""],
                  disadvantages: [""],
                  tools: {
                    spark: "",
                    scikit: "",
                    r: ""
                  },
                  links: {
                    adoc: "",
                    book: "",
                    sklearn: ""
                  }
                };
              }
            }
          }
        }
      }
      return Util.saveFile(JSON.stringify(doc), 'Desc.json', 'json');
    };

    Build.prototype.orphanItems = function(practice) {
      var study, topic, _i, _j, _len, _len1, _ref, _ref1;
      _ref = practice.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        study = _ref[_i];
        _ref1 = study.children;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          topic = _ref1[_j];
          topic.orphans = topic.children;
          delete topic.children;
        }
      }
      return practice;
    };

    Build.prototype.adoptItems = function(practice) {
      var study, topic, _i, _j, _len, _len1, _ref, _ref1;
      _ref = practice.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        study = _ref[_i];
        _ref1 = study.children;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          topic = _ref1[_j];
          if (topic.orphans != null) {
            topic.children = topic.orphans;
          }
        }
      }
      return practice;
    };

    Build.prototype.createPlanes = function(planes) {
      var key, plane;
      for (key in planes) {
        plane = planes[key];
        plane['name'] = key;
        plane['practices'] = this.createFilteredPractices(plane);
      }
      return planes;
    };

    Build.prototype.toArray = function(objects) {
      var array, key, obj;
      array = [];
      for (key in objects) {
        if (!__hasProp.call(objects, key)) continue;
        obj = objects[key];
        obj['id'] = key;
        array.push(obj);
      }
      return array;
    };

    Build.prototype.getPractices = function(plane) {
      if (this.Planes[plane] != null) {
        return this.Planes[plane].practices;
      } else {
        Util.error('Build.getPractices(plane) unknown plane', plane, 'returning Information practices');
        return this.Planes['Information'].practices;
      }
    };

    Build.prototype.isPractice = function(key) {
      return this.practices()[key] != null;
    };

    Build.prototype.getStudies = function(ikw, practice) {
      var practices;
      practices = this.getPractices(ikw);
      if (practices[practice] != null) {
        return practices[practice].studies;
      } else {
        Util.error('Build.getStudies(ikw,practice) unknown practice', practice, 'returning Collaborate studies');
        return practices['Collaborate'].studies;
      }
    };

    Build.prototype.getTopics = function(ikw, practice, study) {
      var studies;
      studies = this.getStudies(ikw, practice);
      if (studies[study] != null) {
        return studies[study].topics;
      } else {
        Util.error('Build.getTopics(ikw,practice,study) unknown study', study, 'returning Team studies');
        return studies['Team'].topics;
      }
    };

    Build.prototype.createRoutes = function() {
      var Routes, keyPractice, objPlane, objPractice, plane, _ref, _ref1;
      Routes = {};
      _ref = this.Planes;
      for (plane in _ref) {
        if (!__hasProp.call(_ref, plane)) continue;
        objPlane = _ref[plane];
        _ref1 = objPlane.practices;
        for (keyPractice in _ref1) {
          if (!__hasProp.call(_ref1, keyPractice)) continue;
          objPractice = _ref1[keyPractice];
          Routes['/' + keyPractice] = Util.noop('Route:', keyPractice);
        }
      }
      return Routes;
    };

    Build.prototype.queryPractices = function(filter) {
      var key, p, practice, _ref;
      p = {};
      _ref = this.practices;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        practice = _ref[key];
        if (this.notContext(key) && filter) {
          p[key] = practice;
        }
      }
      return p;
    };

    Build.prototype.getPractice = function(plane, row, column) {
      var key, practice, practices;
      practices = this.getPractices(plane);
      for (key in practices) {
        if (!__hasProp.call(practices, key)) continue;
        practice = practices[key];
        if (practice.column === column && practice.row === row) {
          return practice;
        }
      }
      Util.error('Build.getPractice() practice not found for', {
        plane: plane,
        column: column,
        row: row
      });
      return this.None;
    };

    Build.prototype.queryStudies = function(filter) {
      var key, s, study, _ref;
      s = {};
      _ref = this.studies;
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        study = _ref[key];
        if (this.notContext(key) && filter) {
          s[key] = study;
        }
      }
      return s;
    };

    Build.prototype.logPlanes = function(Planes) {
      var keyPractice, keyStudy, objPlane, objPractice, objStudy, plane, _ref, _ref1;
      Util.log('----- Beg Build ------');
      for (plane in Planes) {
        if (!__hasProp.call(Planes, plane)) continue;
        objPlane = Planes[plane];
        Util.log("Plane: ", plane);
        _ref = objPlane.practices;
        for (keyPractice in _ref) {
          if (!__hasProp.call(_ref, keyPractice)) continue;
          objPractice = _ref[keyPractice];
          Util.log("  Practice: ", keyPractice);
          _ref1 = objPractice.studies;
          for (keyStudy in _ref1) {
            if (!__hasProp.call(_ref1, keyStudy)) continue;
            objStudy = _ref1[keyStudy];
            Util.log("    Study: ", keyStudy);
          }
        }
      }
      Util.log('----- End Build ------');
    };

    Build.SelectPlane = 'SelectPlane';

    Build.SelectAllPanes = 'SelectAllPanes';

    Build.SelectOverview = 'SelectOverview';

    Build.SelectGroup = 'SelectGroup';

    Build.SelectRow = 'SelectRow';

    Build.SelectCol = 'SelectCol';

    Build.SelectPractice = 'SelectPractice';

    Build.SelectStudy = 'SelectStudy';

    Build.SelectTopic = 'SelectTopic';

    Build.SelectItems = 'SelectItems';

    Build.content = function(content, source, intent, name) {
      if (intent == null) {
        intent = 'None';
      }
      if (name == null) {
        name = 'None';
      }
      if (intent === 'None') {
        intent = (function() {
          switch (content) {
            case 'Study':
              return Build.SelectStudy;
            case 'Topic':
              return Build.SelectTopic;
            case 'Items':
              return Build.SelectItems;
            default:
              return Build.SelectAllPanes;
          }
        })();
      }
      return {
        content: content,
        source: source,
        intent: intent,
        name: name
      };
    };

    Build.select = function(name, source, intent) {
      if (intent == null) {
        intent = Build.SelectAllPanes;
      }
      return {
        name: name,
        source: source,
        intent: intent
      };
    };

    Build.NavbSpecs = [
      {
        type: "NavBarLeft"
      }, {
        type: "Item",
        name: "Home",
        icon: "fa-home",
        topic: "muse.html",
        subject: "Navigate"
      }, {
        type: "Dropdown",
        name: "Planes",
        icon: "fa-sitemap",
        items: [
          {
            type: "Item",
            name: "Information",
            topic: "Information",
            subject: "Plane"
          }, {
            type: "Item",
            name: "Augment",
            topic: "Augment",
            subject: "Plane"
          }, {
            type: "Item",
            name: "DataScience",
            topic: "DataScience",
            subject: "Plane"
          }, {
            type: "Item",
            name: "Knowledge",
            topic: "Knowledge",
            subject: "Plane"
          }, {
            type: "Item",
            name: "Wisdom",
            topic: "Wisdom",
            subject: "Plane"
          }, {
            type: "Item",
            name: "Hues",
            topic: "Hues",
            subject: "Plane"
          }
        ]
      }, {
        type: "Dropdown",
        name: "Content",
        icon: "fa-leanpub",
        items: [
          {
            type: "Item",
            name: "Overview",
            topic: Build.select("Overview", 'Navb', Build.SelectOverview),
            subject: "Select"
          }, {
            type: "Item",
            name: "Center",
            topic: Build.content("Center", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Graphs",
            topic: Build.content("Svg", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Studies",
            topic: Build.content("Studies", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Tree",
            topic: Build.content("Tree", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Radial",
            topic: Build.content("Radial", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Inventory",
            topic: Build.content("Inven", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Connects",
            topic: Build.content("Connect", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Pivot",
            topic: Build.content("Pivot", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Plot",
            topic: Build.content("Plot", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "MathBox",
            topic: Build.content("MathBox", 'Navb'),
            subject: "Content"
          }, {
            type: "Item",
            name: "Slide",
            topic: Build.content("Slide", 'Navb'),
            subject: "Content"
          }
        ]
      }, {
        type: "Dropdown",
        name: "Tests",
        icon: "fa-stethoscope",
        items: [
          {
            type: "Item",
            name: "Populate",
            topic: "Populate",
            subject: "Test"
          }, {
            type: "Item",
            name: "Migrate",
            topic: "Migrate",
            subject: "Test"
          }, {
            type: "Item",
            name: "Persist",
            topic: "Persist",
            subject: "Test"
          }, {
            type: "Item",
            name: "Rest",
            topic: "Rest",
            subject: "Test"
          }, {
            type: "Item",
            name: "Memory",
            topic: "Memory",
            subject: "Test"
          }, {
            type: "Item",
            name: "IndexedDB",
            topic: "IndexedDB",
            subject: "Test"
          }
        ]
      }, {
        type: "Image",
        name: "Image",
        icon: "fa-picture-o",
        topic: 'Image',
        subject: "Image"
      }, {
        type: "NavBarEnd"
      }, {
        type: "NavBarRight"
      }, {
        type: "Search",
        name: "Search",
        icon: "fa-search",
        size: "10",
        topic: 'Search',
        subject: "Submit"
      }, {
        type: "Contact",
        name: "Contact",
        icon: "fa-twitter",
        topic: "http://twitter.com/TheTomFlaherty",
        subject: "Navigate"
      }, {
        type: "Dropdown",
        name: "Settings",
        icon: "fa-cog",
        items: [
          {
            type: "Item",
            name: "Preferences",
            topic: "Preferences",
            subject: "Settings"
          }, {
            type: "Item",
            name: "Connection",
            topic: "Connection",
            subject: "Settings"
          }, {
            type: "Item",
            name: "Privacy",
            topic: "Privacy",
            subject: "Settings"
          }
        ]
      }, {
        type: "SignOn",
        name: "SignOn",
        icon: "fa-sign-in",
        size: "10",
        topic: 'SignOn',
        subject: "Submit"
      }, {
        type: "NavBarEnd"
      }
    ];

    /*
    { type:"FileInput", name:"FileInput", icon:"fa-file-text-o", size:"10", topic:'FileInput', subject:"Submit" }
    { type:"Dropdown",  name:"About", icon:"fa-book", items: [
      { type:"Item",    name:"DataScience", topic:"DataScience", subject:"About" }
      { type:"Item",    name:"Machine",     topic:"Machine",     subject:"About" }
      { type:"Item",    name:"Information", topic:"Information", subject:"About" }
      { type:"Item",    name:"Knowledge",   topic:"Knowledge",   subject:"About" }
      { type:"Item",    name:"Wisdom",      topic:"Wisdom",      subject:"About" } ] }
    */


    return Build;

  })();

}).call(this);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.10.0
(function() {
  var Coord,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Coord = (function() {
    var MBox;

    module.exports = Coord;

    MBox = __webpack_require__(1);

    MBox.Coord = Coord;

    function Coord(mbox, width1, height, depth) {
      this.mbox = mbox;
      this.width = width1;
      this.height = height;
      this.depth = depth != null ? depth : 10;
      this.cylLookup = bind(this.cylLookup, this);
      this.mathbox = this.mbox.mathbox;
      this.npoints = 24 * this.width;
    }

    Coord.prototype.cartesian = function(range, scale, divide) {
      var view;
      if (range == null) {
        range = [[0, 1], [0, 1], [0, 1]];
      }
      if (scale == null) {
        scale = [2, 1, 2];
      }
      if (divide == null) {
        divide = [10, 10];
      }
      this.mathbox.camera({
        position: [2.4, 2.4, 2.4],
        proxy: true
      });
      view = this.mathbox.cartesian({
        range: range,
        scale: scale
      });
      this.axesXYZ(view, 8, 0xFFFFFF);
      this.gridXYZ(view, 4, 0xFFFFFF, divide[0], 0.7, '10');
      this.tickXYZ(view, 64, 0xFFFFFF, divide[1], 2);
      return view;
    };

    Coord.prototype.polar = function(range, scale) {
      var view;
      if (range == null) {
        range = [[0, 2 * π], [0, 100], [0, 100]];
      }
      if (scale == null) {
        scale = [2, 1.5, 0.75];
      }
      this.mathbox.camera({
        position: [0, 0, 4],
        proxy: true
      });
      view = this.mathbox.polar({
        range: range,
        scale: scale
      });
      view.transform({
        position: [0, 100, 0]
      }).grid({
        unitX: π / 12,
        baseX: 2,
        zWrite: false,
        detailX: 81,
        divideX: 12,
        divideY: 10,
        axes: 'xz',
        blending: 'add',
        color: 0x00F0B0,
        width: this.width,
        opacity: 1
      });
      this.radPolar(view);
      return view;
    };

    Coord.prototype.sphere = function(range, scale) {
      var view;
      if (range == null) {
        range = [[0, 2 * π], [0, 2 * π], [0, 1]];
      }
      if (scale == null) {
        scale = [1, 1, 1];
      }
      this.mathbox.camera({
        position: [0, 0, 4],
        proxy: true
      });
      view = this.mathbox.spherical({
        range: range,
        scale: scale
      });
      return view;
    };

    Coord.prototype.axesXYZ = function(view, width, color) {
      return view.axis({
        axis: 1,
        width: width,
        color: color,
        end: false
      }).axis({
        axis: 2,
        width: width,
        color: color,
        end: false
      }).axis({
        axis: 3,
        width: width,
        color: color,
        end: false
      });
    };

    Coord.prototype.gridXYZ = function(view, width, color, divide, opacity, id) {
      return view.grid({
        axes: [1, 2],
        width: width,
        color: color,
        divideX: divide,
        divideY: divide,
        opacity: opacity,
        id: "gridXY" + id
      }).grid({
        axes: [2, 3],
        width: width,
        color: color,
        divideX: divide,
        divideY: divide,
        opacity: opacity,
        id: "gridYZ" + id
      }).grid({
        axes: [3, 1],
        width: width,
        color: color,
        divideX: divide,
        divideY: divide,
        opacity: opacity,
        id: "gridZX" + id
      });
    };

    Coord.prototype.tickXYZ = function(view, size, color, divide, digits) {
      this.tick(view, size, color, divide, digits, 1);
      this.tick(view, size, color, divide, digits, 2);
      return this.tick(view, size, color, divide, digits, 3);
    };

    Coord.prototype.tick = function(view, size, color, divide, digits, axis) {
      var offset;
      offset = axis === 2 ? [0, 0.06] : [0.0];
      return view.scale({
        axis: axis,
        divide: divide
      }).ticks({
        zBias: axis,
        width: 5,
        size: size * 0.25,
        color: color
      }).format({
        digits: digits,
        font: "Arial"
      }).label({
        size: size,
        depth: 1,
        color: color,
        outline: 1,
        offset: offset
      });
    };

    Coord.prototype.radPolar = function(view) {
      var points;
      points = view.area(this.angPolar());
      return view.vector({
        points: points,
        color: 'white',
        width: 10
      });
    };

    Coord.prototype.angPolar = function() {
      var obj;
      obj = {
        id: "angPolar",
        axes: [1, 2],
        width: 13,
        height: 1,
        items: 2,
        channels: 3
      };
      obj.expr = (function(_this) {
        return function(emit, a, r) {
          Util.noop(r);
          emit(0, 0, 1);
          emit(a, 1, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cartData = function(range) {
      var array, dx, dy, dz, k, l, m, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, x, y, z;
      if (range == null) {
        range = [[0, 1], [0, 1], [0, 1]];
      }
      array = [];
      dx = (range[0][1] - range[0][0]) / (this.width - 1);
      dy = (range[1][1] - range[1][0]) / (this.height - 1);
      dz = (range[2][1] - range[2][0]) / (this.depth - 1);
      for (x = k = ref = range[0][0], ref1 = range[0][1], ref2 = dx; ref2 > 0 ? k <= ref1 : k >= ref1; x = k += ref2) {
        for (y = l = ref3 = range[1][0], ref4 = range[1][1], ref5 = dy; ref5 > 0 ? l <= ref4 : l >= ref4; y = l += ref5) {
          for (z = m = ref6 = range[2][0], ref7 = range[2][1], ref8 = dz; ref8 > 0 ? m <= ref7 : m >= ref7; z = m += ref8) {
            array.push([x, y, z, 1]);
          }
        }
      }
      return {
        data: array,
        items: 1,
        channels: 4,
        live: false,
        id: 'cartData',
        width: this.width * this.height * this.depth
      };
    };

    Coord.prototype.cartPoints = function(id) {
      var obj;
      if (id == null) {
        id = "cartPoints";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        depth: this.depth,
        items: 1,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, x, y, z) {
          return emit(x, y, z, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cartColors = function(toRgb, id) {
      var obj;
      if (id == null) {
        id = "cartColors";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        depth: this.depth,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, x, y, z) {
          var b, g, r, ref;
          ref = toRgb(x, y, z), r = ref[0], g = ref[1], b = ref[2];
          return emit(r, g, b, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.point = function(size, pid, cid) {
      if (size == null) {
        size = 40;
      }
      if (pid == null) {
        pid = "points";
      }
      if (cid == null) {
        cid = "colors";
      }
      return {
        points: '#' + pid,
        colors: '#' + cid,
        color: 0xffffff,
        size: size
      };
    };

    Coord.prototype.cartVolume = function(view, toRgb) {
      view.volume(this.cartPoints());
      view.volume(this.cartColors(toRgb));
      return view.point(this.point(40, "cartPoints", "cartColors"));
    };

    Coord.prototype.cartArray = function(view) {
      view.array(this.cartData());
      return view.point(this.point(40, "cartData", "cartData"));
    };

    Coord.prototype.cartSurfPoints = function(toZ, id) {
      var obj;
      if (id == null) {
        id = "cartSurfPoints";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        axes: [1, 3],
        channels: 3
      };
      obj.expr = (function(_this) {
        return function(emit, x, y) {
          return emit(x, toZ(x, y), y);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cartSurfColors = function(toRgb, id) {
      var obj;
      if (id == null) {
        id = "cartSurfColors";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        channels: 4,
        axes: [1, 2]
      };
      obj.expr = (function(_this) {
        return function(emit, x, y) {
          var b, g, r, ref;
          ref = toRgb(x, y), r = ref[0], g = ref[1], b = ref[2];
          return emit(r, g, b, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cartSurface = function(view, toDep, toRgb) {
      var colors, points;
      points = view.area(this.cartSurfPoints(toDep));
      colors = view.area(this.cartSurfColors(toRgb));
      return view.surface({
        points: points,
        colors: colors,
        color: 0xffffff,
        shaded: false,
        opacity: 1.0,
        lineX: true,
        lineY: true,
        width: 5
      });
    };

    Coord.prototype.cylData = function(range) {
      var array, c, dx, dy, dz, h, k, l, m, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, s;
      if (range == null) {
        range = [[0, 2 * π], [0, 100], [0, 100]];
      }
      array = [];
      dx = (range[0][1] - range[0][0]) / this.width;
      dy = (range[1][1] - range[1][0]) / this.height;
      dz = (range[2][1] - range[2][0]) / this.depth;
      for (h = k = ref = range[0][0], ref1 = range[0][1], ref2 = dx; ref2 > 0 ? k <= ref1 : k >= ref1; h = k += ref2) {
        for (c = l = ref3 = range[1][0], ref4 = range[1][1], ref5 = dy; ref5 > 0 ? l <= ref4 : l >= ref4; c = l += ref5) {
          for (s = m = ref6 = range[2][0], ref7 = range[2][1], ref8 = dz; ref8 > 0 ? m <= ref7 : m >= ref7; s = m += ref8) {
            array.push([h, c, s]);
          }
        }
      }
      return {
        data: array,
        items: 1,
        channels: 4,
        live: false,
        id: 'hcss',
        width: this.width * this.height * this.depth
      };
    };

    Coord.prototype.cylPoints = function(id) {
      var obj;
      if (id == null) {
        id = "cylPoints";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        depth: this.depth,
        items: 1,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, ang, rad, dep, i) {
          var radian;
          radian = _this.mbox.toRad(i, _this.width);
          return emit(radian, rad, dep, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cylColors = function(toRgb, id) {
      var obj;
      if (id == null) {
        id = "cylColors";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        depth: this.depth,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, ang, rad, dep, i) {
          var b, g, hue, r, ref;
          hue = _this.mbox.toHue(i, _this.width);
          ref = toRgb(hue, rad, dep), r = ref[0], g = ref[1], b = ref[2];
          return emit(r, g, b, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cylVolume = function(view, toRgb) {
      view.volume(this.cylPoints());
      view.volume(this.cylColors(toRgb));
      return view.point(this.point(40, "cylPoints", "cylColors"));
    };

    Coord.prototype.cylLookup = function(view, hcss, rgbs) {
      view.array({
        data: hcss,
        id: "hcss",
        items: 1,
        channels: 4,
        live: false,
        width: hcss.length
      });
      view.array({
        data: rgbs,
        id: "rgbs",
        items: 1,
        channels: 4,
        live: false,
        width: rgbs.length
      });
      return view.point({
        points: '#' + "hcss",
        colors: '#' + "rgbs",
        color: 0xffffff,
        size: 40
      });
    };

    Coord.prototype.cylSurfPoints = function(toDep, id) {
      var obj;
      if (id == null) {
        id = "cylSurfPoints";
      }
      obj = {
        id: id,
        width: this.npoints + 1,
        height: this.height,
        axes: [1, 2],
        channels: 3
      };
      obj.expr = (function(_this) {
        return function(emit, ang, rad, i) {
          var radian;
          radian = _this.mbox.toRad(i, _this.npoints);
          return emit(radian, rad, 100 * toDep(radian, rad));
        };
      })(this);
      return obj;
    };

    Coord.prototype.cylSurfColors = function(toDep, toRgb, id) {
      var obj;
      if (id == null) {
        id = "cylSurfColors";
      }
      obj = {
        id: id,
        width: this.npoints + 1,
        height: this.height,
        channels: 4,
        axes: [1, 2]
      };
      obj.expr = (function(_this) {
        return function(emit, ang, rad, i) {
          var b, g, hue, r, radian, ref;
          hue = _this.mbox.toHue(i, _this.npoints);
          radian = _this.mbox.toRad(i, _this.npoints);
          ref = toRgb(hue, rad, toDep(radian, rad) * 100), r = ref[0], g = ref[1], b = ref[2];
          return emit(r, g, b, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.cylSurface = function(view, toRgb, toDep) {
      var colors, points;
      points = view.area(this.cylSurfPoints(toDep));
      colors = view.area(this.cylSurfColors(toDep, toRgb));
      return view.surface({
        points: points,
        colors: colors,
        color: 0xffffff,
        shaded: false,
        opacity: 1.0,
        lineX: true,
        lineY: true,
        width: 5
      });
    };

    Coord.prototype.sphPoints = function(id) {
      var obj;
      if (id == null) {
        id = "sphPoints";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        depth: this.depth,
        items: 1,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, ang1, ang2, rad, i, j) {
          return emit(i * π * 2 / _this.width, j * π * 2 / _this.height, rad, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.sphColors = function(toRgb, id) {
      var obj;
      if (id == null) {
        id = "sphColors";
      }
      obj = {
        id: id,
        width: this.width,
        height: this.height,
        depth: this.depth,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, ang1, ang2, rad, i, j) {
          var b, g, r, ref;
          ref = toRgb(i * 360 / _this.width, j * 360 / _this.height, rad), r = ref[0], g = ref[1], b = ref[2];
          return emit(r, g, b, 1);
        };
      })(this);
      return obj;
    };

    Coord.prototype.sphVolume = function(view, toRgb) {
      view.volume(this.sphPoints());
      view.volume(this.sphColors(toRgb));
      return view.point(this.point(40, "sphPoints", "sphColors"));
    };

    Coord.prototype.domeColors = function() {
      var Vis, obj;
      Vis = __webpack_require__(0);
      obj = {
        id: 'domeColors',
        width: this.width,
        height: this.height,
        depth: this.depth,
        channels: 4
      };
      obj.expr = (function(_this) {
        return function(emit, ang1, ang2, rad, i, j) {
          var b, g, r, ref;
          if (j * 360 / _this.height <= 180) {
            ref = Vis.toRgbHsv(i * 360 / _this.width, j * 360 / _this.height, rad), r = ref[0], g = ref[1], b = ref[2];
            return emit(r, g, b, 1);
          } else {
            return emit(0, 0, 0, 0);
          }
        };
      })(this);
      return obj;
    };

    return Coord;

  })();

}).call(this);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
(function() {
  var Box, Color, Coord, IKW, MBox, MRegress, Vis;

  MBox = __webpack_require__(1);

  Vis = __webpack_require__(0);

  Coord = __webpack_require__(3);

  Color = __webpack_require__(15);

  IKW = __webpack_require__(16);

  MRegress = __webpack_require__(17);

  Box = (function() {
    function Box() {}

    Box.init = function() {
      return Util.ready(function() {
        return Box.doApp(MBox);
      });
    };

    Box.doApp = function(MBox) {
      var name, parse;
      parse = Util.parseURI(window.location);
      name = Util.isStr(parse.fragment) ? parse.fragment.substring(1) : '';
      switch (name) {
        case 'Cart':
          Box.doCart(MBox);
          break;
        case 'Rgbs':
          Box.doRgbs(MBox);
          break;
        case 'Color':
          Box.doColor(MBox);
          break;
        case 'IKW':
          Box.doIKW(MBox);
          break;
        case 'Planes':
          Box.doPlanes(MBox);
          break;
        case 'Regress':
          Box.doRegress(MBox);
          break;
        case 'Sphere':
          Box.doSphere(MBox);
          break;
        case 'Vecs':
          Box.doVecs(MBox, 'two');
          break;
        case 'VecsRgb':
          Box.doVecs(MBox, 'rgb');
          break;
        case 'VecsHsv':
          Box.doVecs(MBox, 'hsv');
          break;
        case 'PolarRgb':
          Box.doPolarRgb(MBox);
          break;
        case 'ScaleRgb':
          Box.doScaleRgb(MBox);
          break;
        default:
          Box.doColor(MBox);
      }
    };

    Box.doCart = function(MBox) {
      var coord, mbox, toRgb, view;
      mbox = new MBox();
      coord = new Coord(mbox, 11, 11, 11);
      view = coord.cartesian();
      toRgb = function(x, y, z) {
        return [x, y, z];
      };
      return coord.cartVolume(view, toRgb);
    };

    Box.doRgbs = function(MBox) {
      var coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 11, 11, 11);
      view = coord.cartesian();
      return coord.cartArray(view);
    };

    Box.doColor = function(MBox) {
      var coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 8, 20, 20);
      view = coord.polar();
      coord.cylVolume(view, Vis.toRgbHsv);
      return coord.cylSurface(view, Vis.toRgbHsv, mbox.sin06F);
    };

    Box.doIKW = function(MBox) {
      var color, coord, ikw, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 3, 3, 3);
      color = new Color(mbox);
      ikw = new IKW(mbox, coord, color, 3, 3, 3);
      view = ikw.museCartesian();
      return ikw.viewXyzsRgbs(view);
    };

    Box.doPlanes = function(MBox) {
      var color, coord, ikw, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 3, 3, 3);
      color = new Color(mbox);
      ikw = new IKW(mbox, coord, color, 3, 3, 3);
      view = ikw.museCartesian();
      return ikw.viewPlanes(view);
    };

    Box.doRegress = function(MBox) {
      var mbox, regress;
      mbox = new MBox();
      regress = new MRegress(mbox);
      return regress.viewLinearRegress();
    };

    Box.doSphere = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 60, 10);
      color = new Color(mbox);
      view = coord.sphere();
      return coord.sphVolume(view, Vis.toRgbSphere);
    };

    Box.doHcs = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 10, 10);
      color = new Color(mbox);
      view = coord.polar();
      color.genWithHcs(coord, view);
      return coord.cylSurface(view, Vis.toRgbHcs, mbox.sin06F);
    };

    Box.doVecs = function(MBox, see) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 9, 9);
      color = new Color(mbox);
      view = coord.polar();
      return color.genWithVecsRgb(coord, view, see);
    };

    Box.doPolarRgb = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 9, 9);
      color = new Color(mbox);
      view = coord.polar();
      return color.genPolarRgbs(coord, view, false);
    };

    Box.doScaleRgb = function(MBox) {
      var color, coord, mbox, view;
      mbox = new MBox();
      coord = new Coord(mbox, 12, 9, 9);
      color = new Color(mbox);
      view = coord.polar();
      return color.genPolarRgbs(coord, view, true);
    };

    Box.doRgbHcs = function() {
      var c, hue, s, _i, _j, _len, _len1, _ref, _ref1, _results;
      s = 100;
      c = 100;
      _ref = [0, 60, 120, 180, 240, 300];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        hue = _ref[_i];
        Util.log('RgbHcs', {
          hue: hue,
          c: c,
          s: s
        }, Vis.toRgbHcs(hue, c, s));
        Util.log('RgbHsv', {
          hue: hue,
          c: c,
          s: s
        }, Vis.toRgbHsv(hue, c, s));
      }
      _ref1 = [0, 60, 120, 180, 240, 300];
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        hue = _ref1[_j];
        _results.push((function() {
          var _k, _len2, _ref2, _results1;
          _ref2 = [0, 20, 40, 60, 80, 100];
          _results1 = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            c = _ref2[_k];
            Util.log('RgbHcs', {
              hue: hue,
              c: c,
              s: s
            }, Vis.toRgbHcs(hue, c, s));
            _results1.push(Util.log('RgbHsv', {
              hue: hue,
              c: c,
              s: s
            }, Vis.toRgbHsv(hue, c, s)));
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Box;

  })();

  Box.init();

}).call(this);


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.10.0
(function() {
  var Palettes, Vis;

  Vis = __webpack_require__(0);

  Palettes = (function() {
    function Palettes() {}

    module.exports = Palettes;

    Palettes.setRgbs = function() {
      var color, group, k, l, len1, len2, ref;
      ref = Palettes.groupRgbs;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        group = ref[k];
        for (l = 0, len2 = group.length; l < len2; l++) {
          color = group[l];
          color.rgb = Vis.cssRgb(color.hex);
        }
      }
    };

    Palettes.findColor = function(name) {
      var color, group, k, l, len1, len2, ref;
      ref = Palettes.groups;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        group = ref[k];
        for (l = 0, len2 = group.length; l < len2; l++) {
          color = group[l];
          if (color.name === name) {
            return color;
          }
        }
      }
      Util.error('Palettes.findColor() not found for name', name);
      return Palettes.gray;
    };

    Palettes.hexdec = function(name) {
      var hex;
      hex = Palettes.findColor(name).hex;
      hex = '0x' + hex.substring(1);
      return parseInt(hex, 16);
    };

    Palettes.codes15 = ['PW', 'LW', 'PD', 'LF', 'LD', 'MW', 'DW', 'MD', 'MF', 'LH', '', 'DH', 'DF', 'DD', 'OW'];

    Palettes.codes18 = ['PD', 'LH', 'LD', 'DH', 'DD', 'rr', 'Lr', 'Dr', 'Mor', 'Dor', 'oor', 'OD', 'ooy', 'Moy', 'Doy', 'Dyo', 'Lyo', 'yyo'];

    Palettes.hex = function(code) {
      var color, group, k, l, len1, len2, ref;
      if (code == null) {
        Util.trace('Palettes.hex()', code);
      }
      ref = Palettes.groups;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        group = ref[k];
        for (l = 0, len2 = group.length; l < len2; l++) {
          color = group[l];
          if (color.code === code) {
            return color.hex;
          }
        }
      }
      Util.error('Palettes.hex not found for code', code);
      return Palettes.gray.hex;
    };

    Palettes.hexGroup = function(group, code) {
      var color, k, len1;
      for (k = 0, len1 = group.length; k < len1; k++) {
        color = group[k];
        if (color.code === code) {
          return color.hex;
        }
      }
      Util.error('Pallettes.color not found for code', code);
      return Palettes.gray.hex;
    };

    Palettes.hexes = function(group, c) {
      var code, hexs, k, len1, ref;
      hexs = [];
      ref = Palettes.codes15;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        code = ref[k];
        hexs.push(Palettes.hexGroup(group, code + c));
      }
      return hexs;
    };

    Palettes.hsvOut = function() {
      var array, color, group, hsv, i, k, l, len1, len2, m, ref, str;
      array = [];
      ref = Palettes.groups;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        group = ref[k];
        for (l = 0, len2 = group.length; l < len2; l++) {
          color = group[l];
          hsv = Vis.toHsvHex(color.hex);
          for (i = m = 0; m < 3; i = ++m) {
            hsv[i] = Math.round(hsv[i]);
          }
          str = "[" + hsv[0] + "," + hsv[1] + "," + hsv[2] + "],\"" + color.code + "\",\"" + color.hex + "\"\n ";
          array.push(str);
        }
      }
      console.log(array);
    };

    Palettes.rainbowMH = [
      {
        hex: "#ee4035"
      }, {
        hex: "#f37736"
      }, {
        hex: "#fdf498"
      }, {
        hex: "#7bc043"
      }, {
        hex: "#0392cf"
      }
    ];

    Palettes.redsMH = [
      {
        hex: "#ffb2b2"
      }, {
        hex: "#ff6666"
      }, {
        hex: "#ff0000"
      }, {
        hex: "#cc0000"
      }, {
        hex: "#990000"
      }
    ];

    Palettes.reds = [
      {
        hex: "#FFCCCC",
        hsv: "hsv(  0, 22%,100%)",
        hsl: "hsl(  0,100%, 9%)",
        code: "PWR",
        name: "Pale Weak Red"
      }, {
        hex: "#CC9999",
        hsv: "hsv(  0, 25%, 80%)",
        hsl: "hsl(  0, 33%, 7%)",
        code: "LWR",
        name: "Light Week Red"
      }, {
        hex: "#996666",
        hsv: "hsv(  0, 33%, 60%)",
        hsl: "hsl(  0, 20%,50%)",
        code: "MWR",
        name: "Medium Weak Red"
      }, {
        hex: "#996666",
        hsv: "hsv(  0, 33%, 60%)",
        hsl: "hsl(  0, 20%,50%)",
        code: "MWR",
        name: "Medium Weak Red"
      }, {
        hex: "#FF9999",
        hsv: "hsv(  0, 40%,100%)",
        hsl: "hsl(  0,100%,80%)",
        code: "PDR",
        name: "Pale Dull Red"
      }, {
        hex: "#FF6666",
        hsv: "hsv(  0, 60%,100%)",
        hsl: "hsl(  0,100%,70%)",
        code: "LFR",
        name: "Light Faded Red"
      }, {
        hex: "#CC6666",
        hsv: "hsv(  0, 50%, 80%)",
        hsl: "hsl(  0, 50%,60%)",
        code: "LDR",
        name: "Light Dull Red"
      }, {
        hex: "#FF3333",
        hsv: "hsv(  0, 80%,100%)",
        hsl: "hsl(  0,100%,60%)",
        code: "LHR",
        name: "Light Hard Red"
      }, {
        hex: "#CC3333",
        hsv: "hsv(  0, 75%, 80%)",
        hsl: "hsl(  0, 60%,50%)",
        code: "MFR",
        name: "Medium Faded Red"
      }, {
        hex: "#993333",
        hsv: "hsv(  0, 67%, 60%)",
        hsl: "hsl(  0, 50%,40%)",
        code: "DDR",
        name: "Dark Dull Red"
      }, {
        hex: "#FF0000",
        hsv: "hsv(  0,100%,100%)",
        hsl: "hsl(  0,100%,50%)",
        code: "R",
        name: "Red"
      }, {
        hex: "#CC0000",
        hsv: "hsv(  0,100%, 80%)",
        hsl: "hsl(  0,100%,40%)",
        code: "DHR",
        name: "Dark Hard Red"
      }, {
        hex: "#990000",
        hsv: "hsv(  0,100%, 60%)",
        hsl: "hsl(  0,100%,30%)",
        code: "DFR",
        name: "Dark Faded Red"
      }, {
        hex: "#660000",
        hsv: "hsv(  0,100%, 40%)",
        hsl: "hsl(  0,100%,20%)",
        code: "ODR",
        name: "Obscure Dull Red"
      }, {
        hex: "#330000",
        hsv: "hsv(  0,100%, 20%)",
        hsl: "hsl(  0,100%,10%)",
        code: "OWR",
        name: "Obscure Weak Red"
      }
    ];

    Palettes.brownsMH = [
      {
        hex: "#f1e8dc"
      }, {
        hex: "#e4d2ba"
      }, {
        hex: "#d2b48c"
      }, {
        hex: "#a89070"
      }, {
        hex: "#7e6c54"
      }
    ];

    Palettes.browns = [
      {
        hex: "#8B4513",
        hsv: "hsv(25,86%,55%)",
        hsl: "hsl(25, 76%,31%)",
        code: "HTML",
        name: "saddlebrown"
      }, {
        hex: "#E9967A",
        hsv: "hsv(15,48%,91%)",
        hsl: "hsl(15, 72%,70%)",
        code: "HTML",
        name: "darksalmon"
      }, {
        hex: "#FF6347",
        hsv: "hsv( 9,72,100%)",
        hsl: "hsl( 9,100%,64%)",
        code: "HTML",
        name: "tomato"
      }, {
        hex: "#FA8072",
        hsv: "hsv( 6,54%,98%)",
        hsl: "hsl( 6, 93%,71%)",
        code: "HTML",
        name: "salmon"
      }, {
        hex: "#FFE4E1",
        hsv: "hsv( 6,12,100%)",
        hsl: "hsl( 6,100%,94%)",
        code: "HTML",
        name: "mistyrose"
      }, {
        hex: "#FFFAFA",
        hsv: "hsv( 0,02,100%)",
        hsl: "hsl( 0,100%,99%)",
        code: "HTML",
        name: "snow"
      }, {
        hex: "#D2691E",
        hsv: "hsv(25,86%,82%)",
        hsl: "hsl(25, 75%,47%)",
        code: "HTML",
        name: "chocolate"
      }, {
        hex: "#BC8F8F",
        hsv: "hsv( 0,24%,74%)",
        hsl: "hsl( 0, 25%,65%)",
        code: "HTML",
        name: "rosybrown"
      }, {
        hex: "#F4A460",
        hsv: "hsv(28,61%,96%)",
        hsl: "hsl(28, 87%,67%)",
        code: "HTML",
        name: "sandybrown"
      }, {
        hex: "#F08080",
        hsv: "hsv( 0,47%,94%)",
        hsl: "hsl( 0, 79%,72%)",
        code: "HTML",
        name: "lightcoral"
      }, {
        hex: "#CD5C5C",
        hsv: "hsv( 0,55%,80%)",
        hsl: "hsl( 0, 53%,58%)",
        code: "HTML",
        name: "indianred"
      }, {
        hex: "#A52A2A",
        hsv: "hsv( 0,75%,65%)",
        hsl: "hsl( 0, 59%,41%)",
        code: "HTML",
        name: "brown"
      }, {
        hex: "#B22222",
        hsv: "hsv( 0,81%,70%)",
        hsl: "hsl( 0, 68%,42%)",
        code: "HTML",
        name: "firebrick"
      }
    ];

    Palettes.skinMH = [
      {
        hex: "#ffe0bd"
      }, {
        hex: "#ffcd94"
      }, {
        hex: "#eac086"
      }, {
        hex: "#ffad60"
      }, {
        hex: "#ffe39f"
      }
    ];

    Palettes.tansMH = [
      {
        hex: "#ffc14c"
      }, {
        hex: "#ec953c"
      }, {
        hex: "#f0800d"
      }, {
        hex: "#ee5a09"
      }, {
        hex: "#d03501"
      }
    ];

    Palettes.tans = [
      {
        hex: "#F5DEB3",
        hsv: "hsv(39, 27%, 96%)",
        hsl: "hsl(39, 77%,83%)",
        code: "HTML",
        name: "wheat"
      }, {
        hex: "#FFE4B5",
        hsv: "hsv(38, 29%,100%)",
        hsl: "hsl(38,100%,85%)",
        code: "HTML",
        name: "moccasin"
      }, {
        hex: "#FFEFD5",
        hsv: "hsv(37, 16%,100%)",
        hsl: "hsl(37,100%,92%)",
        code: "HTML",
        name: "papayawhip"
      }, {
        hex: "#FFEBCD",
        hsv: "hsv(36, 20%,100%)",
        hsl: "hsl(36,100%,90%)",
        code: "HTML",
        name: "blanchedalmond"
      }, {
        hex: "#FFDEAD",
        hsv: "hsv(36, 32%,100%)",
        hsl: "hsl(36,100%,84%)",
        code: "HTML",
        name: "navajowhite"
      }, {
        hex: "#FAEBD7",
        hsv: "hsv(34, 14%, 98%)",
        hsl: "hsl(34, 78%,91%)",
        code: "HTML",
        name: "antiquewhite"
      }, {
        hex: "#FFE4C4",
        hsv: "hsv(33, 23%,100%)",
        hsl: "hsl(33,100%,88%)",
        code: "HTML",
        name: "bisque"
      }, {
        hex: "#FFDAB9",
        hsv: "hsv(28, 27%,100%)",
        hsl: "hsl(28,100%,86%)",
        code: "HTML",
        name: "peachpuff"
      }, {
        hex: "#F5F5DC",
        hsv: "hsv(60,100%, 96%)",
        hsl: "hsl(60, 56%,91%)",
        code: "HTML",
        name: "beige"
      }, {
        hex: "#F0E68C",
        hsv: "hsv(54, 42%, 94%)",
        hsl: "hsl(54, 77%,75%)",
        code: "HTML",
        name: "khaki"
      }, {
        hex: "#FFD700",
        hsv: "hsv(51,100%,100%)",
        hsl: "hsl(51,100%,50%)",
        code: "HTML",
        name: "gold"
      }, {
        hex: "#D2B48C",
        hsv: "hsv(34, 33%, 82%)",
        hsl: "hsl(34, 44%,69%)",
        code: "HTML",
        name: "tan"
      }
    ];

    Palettes.orangesMH = [
      {
        hex: "#ffe4b2"
      }, {
        hex: "#ffc966"
      }, {
        hex: "#ffa500"
      }, {
        hex: "#cc8400"
      }, {
        hex: "#996300"
      }
    ];

    Palettes.oranges = [
      {
        hex: "#FFCC99",
        hsv: "hsv(30, 40%,100%)",
        hsl: "hsl(30,100%,80%)",
        code: "PDO",
        name: "Pale Dull Orange"
      }, {
        hex: "#FFCC66",
        hsv: "hsv(40, 60%,100%)",
        hsl: "hsl(40,100%,70%)",
        code: "LOY",
        name: "Light Orange-Yellow"
      }, {
        hex: "#FFCC33",
        hsv: "hsv(45, 80%,100%)",
        hsl: "hsl(45,100%,60%)",
        code: "LYO",
        name: "Light Yellow-Orange"
      }, {
        hex: "#FFCC00",
        hsv: "hsv(48,100%,100%)",
        hsl: "hsl(48,100%,50%)",
        code: "YYO",
        name: "Yellow-Yellow-Orange"
      }, {
        hex: "#FF9966",
        hsv: "hsv(20, 60%,100%)",
        hsl: "hsl(20,100%,70%)",
        code: "LOR",
        name: "Light Orange-Red"
      }, {
        hex: "#FF9933",
        hsv: "hsv(30, 80%,100%)",
        hsl: "hsl(30,100%,60%)",
        code: "LHO",
        name: "Light Hard Orange"
      }, {
        hex: "#FF9900",
        hsv: "hsv(36,100%,100%)",
        hsl: "hsl(36,100%,50%)",
        code: "OOY",
        name: "Orange-Orange-Yellow"
      }, {
        hex: "#FF6633",
        hsv: "hsv(15, 80%,100%)",
        hsl: "hsl(15,100%,60%)",
        code: "LRO",
        name: "Light Red-Orange"
      }, {
        hex: "#CC6633",
        hsv: "hsv(20, 75%, 80%)",
        hsl: "hsl(20, 60%,50%)",
        code: "MOR",
        name: "Medium Orange-Red"
      }, {
        hex: "#CC9900",
        hsv: "hsv(45,100%, 80%)",
        hsl: "hsl(45,100%,40%)",
        code: "DYO",
        name: "Dark Yellow-Orange"
      }, {
        hex: "#FF6600",
        hsv: "hsv(24,100%,100%)",
        hsl: "hsl(24,100%,50%)",
        code: "OOR",
        name: "Orange-Orange-Red"
      }, {
        hex: "#FF3300",
        hsv: "hsv(12,100%,100%)",
        hsl: "hsl(12,100%,50%)",
        code: "RRO",
        name: "Red-Red-Orange"
      }, {
        hex: "#CC3300",
        hsv: "hsv(15,100%, 80%)",
        hsl: "hsl(15,100%,40%)",
        code: "DRO",
        name: "Dark Red-Orange"
      }, {
        hex: "#993300",
        hsv: "hsv(20,100%, 60%)",
        hsl: "hsl(20,100%,30%)",
        code: "DOR",
        name: "Dark Orange-Red"
      }, {
        hex: "#663300",
        hsv: "hsv(30,100%, 40%)",
        hsl: "hsl(30,100%,20%)",
        code: "ODO",
        name: "Obscure Dull Orange"
      }
    ];

    Palettes.yellowsMH = [
      {
        hex: "#ffffcc"
      }, {
        hex: "#ffff66"
      }, {
        hex: "#ffff00"
      }, {
        hex: "#FFD700"
      }, {
        hex: "#DAA520"
      }
    ];

    Palettes.yellows = [
      {
        hex: "#FFFFF0",
        hsv: "hsv(60%,06,100%)",
        hsl: "hsl(60,100%,97%)",
        code: "HTML",
        name: "ivory"
      }, {
        hex: "#FFFFE0",
        hsv: "hsv(60%,12,100%)",
        hsl: "hsl(60,100%,94%)",
        code: "HTML",
        name: "lightyellow"
      }, {
        hex: "#FFFF00",
        hsv: "hsv(60,100%,100%)",
        hsl: "hsl(60,100%,50%)",
        code: "HTML",
        name: "yellow"
      }, {
        hex: "#FFF5EE",
        hsv: "hsv(25%,07,100%)",
        hsl: "hsl(25,100%,97%)",
        code: "HTML",
        name: "seashell"
      }, {
        hex: "#FFA07A",
        hsv: "hsv(17%,52,100%)",
        hsl: "hsl(17,100%,74%)",
        code: "HTML",
        name: "lightsalmon"
      }, {
        hex: "#808000",
        hsv: "hsv(60,100%,50%)",
        hsl: "hsl(60,100%,25%)",
        code: "HTML",
        name: "olive"
      }, {
        hex: "#BDB76B",
        hsv: "hsv(56%,43%,74%)",
        hsl: "hsl(56%,38%,58%)",
        code: "HTML",
        name: "darkkhaki"
      }, {
        hex: "#DAA520",
        hsv: "hsv(43%,85%,85%)",
        hsl: "hsl(43%,74%,49%)",
        code: "HTML",
        name: "goldenrod"
      }, {
        hex: "#B8860B",
        hsv: "hsv(43%,94%,72%)",
        hsl: "hsl(43%,89%,38%)",
        code: "HTML",
        name: "darkgoldenrod"
      }, {
        hex: "#FAFAD2",
        hsv: "hsv(60%,16%,98%)",
        hsl: "hsl(60%,80%,90%)",
        code: "HTML",
        name: "lightgoldenrodyellow"
      }, {
        hex: "#EEE8AA",
        hsv: "hsv(55%,29%,93%)",
        hsl: "hsl(55%,67%,80%)",
        code: "HTML",
        name: "palegoldenrod"
      }, {
        hex: "#FFFACD",
        hsv: "hsv(54%,20%,100%)",
        hsl: "hsl(54,100%,90%)",
        code: "HTML",
        name: "lemonchiffon"
      }, {
        hex: "#FFF8DC",
        hsv: "hsv(48%,14,100%)",
        hsl: "hsl(48,100%,93%)",
        code: "HTML",
        name: "cornsilk"
      }, {
        hex: "#FFFFCC",
        hsv: "hsv(60%,20%,100%)",
        hsl: "hsl(60,100%,90%)",
        code: "PWY",
        name: "Pale Weak Yellow"
      }, {
        hex: "#FFFF99",
        hsv: "hsv(60%,4,100%)",
        hsl: "hsl(60,100%,80%)",
        code: "PDY",
        name: "Pale Dull Yellow"
      }, {
        hex: "#FFFF66",
        hsv: "hsv(60%,6,100%)",
        hsl: "hsl(60,100%,70%)",
        code: "LFY",
        name: "Light Faded Yellow"
      }, {
        hex: "#FFFF33",
        hsv: "hsv(60%,8,100%)",
        hsl: "hsl(60,100%,60%)",
        code: "LHY",
        name: "Light Hard Yellow"
      }, {
        hex: "#FFFF00",
        hsv: "hsv(60,100%,100%)",
        hsl: "hsl(60,100%,50%)",
        code: "Y",
        name: "Yellow"
      }, {
        hex: "#CCCC99",
        hsv: "hsv(60%,25%,80%)",
        hsl: "hsl(60%,33%,70%)",
        code: "LWY",
        name: "Light Weak Yellow"
      }, {
        hex: "#CCCC66",
        hsv: "hsv(60%,50%,80%)",
        hsl: "hsl(60%,50%,60%)",
        code: "LDY",
        name: "Light Dull Yellow"
      }, {
        hex: "#CCCC33",
        hsv: "hsv(60%,75%,80%)",
        hsl: "hsl(60%,60%,50%)",
        code: "MFY",
        name: "Medium Faded Yellow"
      }, {
        hex: "#CCCC00",
        hsv: "hsv(60,100%,80%)",
        hsl: "hsl(60,100%,40%)",
        code: "DHY",
        name: "Dark Hard Yellow"
      }, {
        hex: "#999966",
        hsv: "hsv(60%,33%,60%)",
        hsl: "hsl(60%,20%,50%)",
        code: "MWY",
        name: "Medium Weak Yellow"
      }, {
        hex: "#999933",
        hsv: "hsv(60%,67%,60%)",
        hsl: "hsl(60%,50%,40%)",
        code: "DDY",
        name: "Dark Dull Yellow"
      }, {
        hex: "#999900",
        hsv: "hsv(60,100%,60%)",
        hsl: "hsl(60,100%,30%)",
        code: "DFY",
        name: "Dark Faded Yellow"
      }, {
        hex: "#666633",
        hsv: "hsv(60%,50%,40%)",
        hsl: "hsl(60%,33%,30%)",
        code: "DWY",
        name: "Dark Weak Yellow"
      }, {
        hex: "#666600",
        hsv: "hsv(60,100%,40%)",
        hsl: "hsl(60,100%,20%)",
        code: "ODY",
        name: "Obscure Dull Yellow"
      }, {
        hex: "#333300",
        hsv: "hsv(60,100%,20%)",
        hsl: "hsl(60,100%,100%)",
        code: "OWY",
        name: "Obscure Weak Yellow"
      }
    ];

    Palettes.limesMH = [
      {
        hex: "#96e737"
      }, {
        hex: "#90f035"
      }, {
        hex: "#71f066"
      }, {
        hex: "#5ee718"
      }, {
        hex: "#43c52f"
      }
    ];

    Palettes.limes = [
      {
        hex: "#CCFF00",
        hsv: "hsv(72,100%,100%)",
        hsl: "hsl(72,100%,50%)",
        code: "YYS",
        name: "Yellow-Yellow-Spring"
      }, {
        hex: "#CCFF33",
        hsv: "hsv(75%,8,100%)",
        hsl: "hsl(75,100%,60%)",
        code: "LYS",
        name: "Light Yellow-Spring"
      }, {
        hex: "#99CC00",
        hsv: "hsv(75,100%,80%)",
        hsl: "hsl(75,100%,40%)",
        code: "DYS",
        name: "Dark Yellow-Spring"
      }, {
        hex: "#CCFF66",
        hsv: "hsv(80%,6,100%)",
        hsl: "hsl(80,100%,70%)",
        code: "LSY",
        name: "Light Spring-Yellow"
      }, {
        hex: "#99CC33",
        hsv: "hsv(80%,75%,80%)",
        hsl: "hsl(80%,60%,50%)",
        code: "MSY",
        name: "Medium Spring-Yellow"
      }, {
        hex: "#669900",
        hsv: "hsv(80,100%,60%)",
        hsl: "hsl(80,100%,30%)",
        code: "DSY",
        name: "Dark Spring-Yellow"
      }, {
        hex: "#99FF00",
        hsv: "hsv(84,100%,100%)",
        hsl: "hsl(84,100%,50%)",
        code: "SSY",
        name: "Spring-Spring-Yellow"
      }, {
        hex: "#99FF33",
        hsv: "hsv(90%,8,100%)",
        hsl: "hsl(90,100%,60%)",
        code: "LHS",
        name: "Light Hard Spring"
      }, {
        hex: "#66CC00",
        hsv: "hsv(90,100%,80%)",
        hsl: "hsl(90,100%,40%)",
        code: "DHS",
        name: "Dark Hard Spring"
      }, {
        hex: "#CCFF99",
        hsv: "hsv(90%,4,100%)",
        hsl: "hsl(90,100%,80%)",
        code: "PDS",
        name: "Pale Dull Spring"
      }, {
        hex: "#99CC66",
        hsv: "hsv(90%,50%,80%)",
        hsl: "hsl(90%,50%,60%)",
        code: "LDS",
        name: "Light Dull Spring"
      }, {
        hex: "#669933",
        hsv: "hsv(90%,67%,60%)",
        hsl: "hsl(90%,50%,40%)",
        code: "DDS",
        name: "Dark Dull Spring"
      }, {
        hex: "#336600",
        hsv: "hsv(90,100%,40%)",
        hsl: "hsl(90,100%,20%)",
        code: "ODS",
        name: "Obscure Dull Spring"
      }, {
        hex: "#66FF00",
        hsv: "hsv(96,100%,100%)",
        hsl: "hsl(96,100%,50%)",
        code: "SSG",
        name: "Spring-Spring-Green"
      }, {
        hex: "#99FF66",
        hsv: "hsv(100%,6,100%)",
        hsl: "hsl(100,100%,70%)",
        code: "LSG",
        name: "Light Spring-Green"
      }, {
        hex: "#66CC33",
        hsv: "hsv(100%,75%,80%)",
        hsl: "hsl(100%,60%,50%)",
        code: "MSG",
        name: "Medium Spring-Green"
      }, {
        hex: "#339900",
        hsv: "hsv(100,100%,60%)",
        hsl: "hsl(100,100%,30%)",
        code: "DSG",
        name: "Dark Spring-Green"
      }, {
        hex: "#66FF33",
        hsv: "hsv(105%,8,100%)",
        hsl: "hsl(105,100%,60%)",
        code: "LGS",
        name: "Light Green-Spring"
      }, {
        hex: "#33CC00",
        hsv: "hsv(105,100%,80%)",
        hsl: "hsl(105,100%,40%)",
        code: "DGS",
        name: "Dark Green-Spring"
      }, {
        hex: "#33FF00",
        hsv: "hsv(108,100%,100%)",
        hsl: "hsl(108,100%,50%)",
        code: "GGS",
        name: "Green-Green-Spring"
      }
    ];

    Palettes.greensMH = [
      {
        hex: "#b2ffb2"
      }, {
        hex: "#66ff66"
      }, {
        hex: "#00ff00"
      }, {
        hex: "#00cc00"
      }, {
        hex: "#009900"
      }
    ];

    Palettes.greens = [
      {
        hex: "#CCFFCC",
        hsv: "hsv(120%,20%,100%)",
        hsl: "hsl(120,100%,90%)",
        code: "PWG",
        name: "Pale Weak Green"
      }, {
        hex: "#99FF99",
        hsv: "hsv(120%,4,100%)",
        hsl: "hsl(120,100%,80%)",
        code: "PDG",
        name: "Pale Dull Green"
      }, {
        hex: "#66FF66",
        hsv: "hsv(120%,6,100%)",
        hsl: "hsl(120,100%,70%)",
        code: "LFG",
        name: "Light Faded Green"
      }, {
        hex: "#33FF33",
        hsv: "hsv(120%,8,100%)",
        hsl: "hsl(120,100%,60%)",
        code: "LHG",
        name: "Light Hard Green"
      }, {
        hex: "#00FF00",
        hsv: "hsv(120,100%,100%)",
        hsl: "hsl(120,100%,50%)",
        code: "G",
        name: "Green"
      }, {
        hex: "#99CC99",
        hsv: "hsv(120%,25%,80%)",
        hsl: "hsl(120%,33%,70%)",
        code: "LWG",
        name: "Light Weak Green"
      }, {
        hex: "#66CC66",
        hsv: "hsv(120%,50%,80%)",
        hsl: "hsl(120%,50%,60%)",
        code: "LDG",
        name: "Light Dull Green"
      }, {
        hex: "#33CC33",
        hsv: "hsv(120%,75%,80%)",
        hsl: "hsl(120%,60%,50%)",
        code: "DHG",
        name: "Medium Faded Green"
      }, {
        hex: "#00CC00",
        hsv: "hsv(120,100%,80%)",
        hsl: "hsl(120,100%,40%)",
        code: "DHG",
        name: "Dark Hard Green"
      }, {
        hex: "#669966",
        hsv: "hsv(120%,33%,60%)",
        hsl: "hsl(120%,20%,50%)",
        code: "MWG",
        name: "Medium Weak Green"
      }, {
        hex: "#339933",
        hsv: "hsv(120%,67%,60%)",
        hsl: "hsl(120%,50%,40%)",
        code: "DDG",
        name: "Dark Dull Green"
      }, {
        hex: "#009900",
        hsv: "hsv(120,100%,60%)",
        hsl: "hsl(120,100%,30%)",
        code: "DFG",
        name: "Dark Faded Green"
      }, {
        hex: "#336633",
        hsv: "hsv(120%,50%,40%)",
        hsl: "hsl(120%,33%,30%)",
        code: "DWG",
        name: "Dark Weak Green"
      }, {
        hex: "#006600",
        hsv: "hsv(120,100%,40%)",
        hsl: "hsl(120,100%,20%)",
        code: "ODG",
        name: "Obscure Dull Green"
      }, {
        hex: "#003300",
        hsv: "hsv(120,100%,20%)",
        hsl: "hsl(120,100%,100%)",
        code: "OWG",
        name: "Obscure Weak Green"
      }
    ];

    Palettes.aquasMH = [
      {
        hex: "#76eec6"
      }, {
        hex: "#6ad6b2"
      }, {
        hex: "#5ebe9e"
      }, {
        hex: "#52a68a"
      }, {
        hex: "#468e76"
      }
    ];

    Palettes.aquasMHbak = [
      {
        hex: "#d8fff2"
      }, {
        hex: "#b2ffe5"
      }, {
        hex: "#8bffd8"
      }, {
        hex: "#65cca9"
      }, {
        hex: "#4c997f"
      }
    ];

    Palettes.tealsMH = [
      {
        hex: "#b2d8d8"
      }, {
        hex: "#66b2b2"
      }, {
        hex: "#008080"
      }, {
        hex: "#006666"
      }, {
        hex: "#004c4c"
      }
    ];

    Palettes.teals = [
      {
        hex: "#00FF33",
        hsv: "hsv(132,100%,100%)",
        hsl: "hsl(132,100%,50%)",
        code: "GGT",
        name: "Green-Green-Teal"
      }, {
        hex: "#33FF66",
        hsv: "hsv(135%,8,100%)",
        hsl: "hsl(135,100%,60%)",
        code: "LGT",
        name: "Light Green-Teal"
      }, {
        hex: "#00CC33",
        hsv: "hsv(135,100%,80%)",
        hsl: "hsl(135,100%,40%)",
        code: "DGT",
        name: "Dark Green-Teal"
      }, {
        hex: "#66FF99",
        hsv: "hsv(140%,6,100%)",
        hsl: "hsl(140,100%,70%)",
        code: "LTG",
        name: "Light Teal-Green"
      }, {
        hex: "#33CC66",
        hsv: "hsv(140%,75%,80%)",
        hsl: "hsl(140%,60%,50%)",
        code: "MTG",
        name: "Medium Teal-Green"
      }, {
        hex: "#009933",
        hsv: "hsv(140,100%,60%)",
        hsl: "hsl(140,100%,30%)",
        code: "DTG",
        name: "Dark Teal-Green"
      }, {
        hex: "#00FF66",
        hsv: "hsv(144,100%,100%)",
        hsl: "hsl(144,100%,50%)",
        code: "TTG",
        name: "Teal-Teal-Green"
      }, {
        hex: "#33FF99",
        hsv: "hsv(150%,8,100%)",
        hsl: "hsl(150,100%,60%)",
        code: "LHT",
        name: "Light Hard Teal"
      }, {
        hex: "#00CC66",
        hsv: "hsv(150,100%,80%)",
        hsl: "hsl(150,100%,40%)",
        code: "DHT",
        name: "Dark Hard Teal"
      }, {
        hex: "#99FFCC",
        hsv: "hsv(150%,4,100%)",
        hsl: "hsl(150,100%,80%)",
        code: "PDT",
        name: "Pale Dull Teal"
      }, {
        hex: "#66CC99",
        hsv: "hsv(150%,50%,80%)",
        hsl: "hsl(150%,50%,60%)",
        code: "LDT",
        name: "Light Dull Teal"
      }, {
        hex: "#339966",
        hsv: "hsv(150%,67%,60%)",
        hsl: "hsl(150%,50%,40%)",
        code: "DDT",
        name: "Dark Dull Teal"
      }, {
        hex: "#00FF99",
        hsv: "hsv(156,100%,100%)",
        hsl: "hsl(156,100%,50%)",
        code: "TTC",
        name: "Teal-Teal-Cyan"
      }, {
        hex: "#66FFCC",
        hsv: "hsv(160%,6,100%)",
        hsl: "hsl(160,100%,70%)",
        code: "LTC",
        name: "Light Teal-Cyan"
      }, {
        hex: "#33CC99",
        hsv: "hsv(160%,75%,80%)",
        hsl: "hsl(160%,60%,50%)",
        code: "MTC",
        name: "Medium Teal-Cyan"
      }, {
        hex: "#009966",
        hsv: "hsv(160,100%,60%)",
        hsl: "hsl(160,100%,30%)",
        code: "DTC",
        name: "Dark Teal-Cyan"
      }, {
        hex: "#33FFCC",
        hsv: "hsv(165%,8,100%)",
        hsl: "hsl(165,100%,60%)",
        code: "LCT",
        name: "Light Cyan-Teal"
      }, {
        hex: "#00CC99",
        hsv: "hsv(165,100%,80%)",
        hsl: "hsl(165,100%,40%)",
        code: "DCT",
        name: "Dark Cyan-Teal"
      }, {
        hex: "#00FFCC",
        hsv: "hsv(168,100%,100%)",
        hsl: "hsl(168,100%,50%)",
        code: "CCT",
        name: "Cyan-Cyan-Teal"
      }, {
        hex: "#33DDAA",
        hsv: "hsv(150%,67%,60%)",
        hsl: "hsl(150%,50%,30%)",
        code: "QDT",
        name: "Q Dull Teal"
      }, {
        hex: "#006633",
        hsv: "hsv(150,100%,40%)",
        hsl: "hsl(150,100%,20%)",
        code: "ODT",
        name: "Obscure Dull Teal"
      }
    ];

    Palettes.cyansMH = [
      {
        hex: "#00ffff"
      }, {
        hex: "#00dfdf"
      }, {
        hex: "#00cccc"
      }, {
        hex: "#00b4b4"
      }, {
        hex: "#009292"
      }
    ];

    Palettes.cyans = [
      {
        hex: "#CCFFFF",
        hsv: "hsv(180%,20%,100%)",
        hsl: "hsl(180,100%,90%)",
        code: "PWC",
        name: "Pale Weak Cyan"
      }, {
        hex: "#99FFFF",
        hsv: "hsv(180%,4,100%)",
        hsl: "hsl(180,100%,80%)",
        code: "PDC",
        name: "Pale Dull Cyan"
      }, {
        hex: "#66FFFF",
        hsv: "hsv(180%,6,100%)",
        hsl: "hsl(180,100%,70%)",
        code: "LFC",
        name: "Light Faded Cyan"
      }, {
        hex: "#33FFFF",
        hsv: "hsv(180%,8,100%)",
        hsl: "hsl(180,100%,60%)",
        code: "LHC",
        name: "Light Hard Cyan"
      }, {
        hex: "#00FFFF",
        hsv: "hsv(180,100%,100%)",
        hsl: "hsl(180,100%,50%)",
        code: "C",
        name: "Cyan"
      }, {
        hex: "#99CCCC",
        hsv: "hsv(180%,25%,80%)",
        hsl: "hsl(180%,33%,70%)",
        code: "LWC",
        name: "Light Weak Cyan"
      }, {
        hex: "#66CCCC",
        hsv: "hsv(180%,50%,80%)",
        hsl: "hsl(180%,50%,60%)",
        code: "LDC",
        name: "Light Dull Cyan"
      }, {
        hex: "#33CCCC",
        hsv: "hsv(180%,75%,80%)",
        hsl: "hsl(180%,60%,50%)",
        code: "MFC",
        name: "Medium Faded Cyan"
      }, {
        hex: "#00CCCC",
        hsv: "hsv(180,100%,80%)",
        hsl: "hsl(180,100%,40%)",
        code: "DHC",
        name: "Dark Hard Cyan"
      }, {
        hex: "#669999",
        hsv: "hsv(180%,33%,60%)",
        hsl: "hsl(180%,20%,50%)",
        code: "MWC",
        name: "Medium Weak Cyan"
      }, {
        hex: "#339999",
        hsv: "hsv(180%,67%,60%)",
        hsl: "hsl(180%,50%,40%)",
        code: "DDC",
        name: "Dark Dull Cyan"
      }, {
        hex: "#009999",
        hsv: "hsv(180,100%,60%)",
        hsl: "hsl(180,100%,30%)",
        code: "DFC",
        name: "Dark Faded Cyan"
      }, {
        hex: "#336666",
        hsv: "hsv(180%,50%,40%)",
        hsl: "hsl(180%,33%,30%)",
        code: "DWC",
        name: "Dark Weak Cyan"
      }, {
        hex: "#006666",
        hsv: "hsv(180,100%,40%)",
        hsl: "hsl(180,100%,20%)",
        code: "ODC",
        name: "Obscure Dull Cyan"
      }, {
        hex: "#003333",
        hsv: "hsv(180,100%,20%)",
        hsl: "hsl(180,100%,100%)",
        code: "OWC",
        name: "Obscure Weak Cyan"
      }
    ];

    Palettes.azuresMH = [
      {
        hex: "#e2f3fb"
      }, {
        hex: "#93e1ed"
      }, {
        hex: "#02b9f3"
      }, {
        hex: "#018abd"
      }, {
        hex: "#005c9d"
      }
    ];

    Palettes.azures = [
      {
        hex: "#00CCFF",
        hsv: "hsv(192,100%,100%)",
        hsl: "hsl(192,100%,50%)",
        code: "CCA",
        name: "Cyan-Cyan-Azure"
      }, {
        hex: "#33CCFF",
        hsv: "hsv(195%,8,100%)",
        hsl: "hsl(195,100%,60%)",
        code: "LCA",
        name: "Light Cyan-Azure"
      }, {
        hex: "#0099CC",
        hsv: "hsv(195,100%,80%)",
        hsl: "hsl(195,100%,40%)",
        code: "DCA",
        name: "Dark Cyan-Azure"
      }, {
        hex: "#66CCFF",
        hsv: "hsv(200%,6,100%)",
        hsl: "hsl(200,100%,70%)",
        code: "LAC",
        name: "Light Azure-Cyan"
      }, {
        hex: "#3399CC",
        hsv: "hsv(200%,75%,80%)",
        hsl: "hsl(200%,60%,50%)",
        code: "MAC",
        name: "Medium Azure-Cyan"
      }, {
        hex: "#006699",
        hsv: "hsv(200,100%,60%)",
        hsl: "hsl(200,100%,30%)",
        code: "DAC",
        name: "Dark Azure-Cyan"
      }, {
        hex: "#0099FF",
        hsv: "hsv(204,100%,100%)",
        hsl: "hsl(204,100%,50%)",
        code: "AAC",
        name: "Azure-Azure-Cyan"
      }, {
        hex: "#3399FF",
        hsv: "hsv(210%,8,100%)",
        hsl: "hsl(210,100%,60%)",
        code: "LHA",
        name: "Light Hard Azure"
      }, {
        hex: "#0066CC",
        hsv: "hsv(210,100%,80%)",
        hsl: "hsl(210,100%,40%)",
        code: "DHA",
        name: "Dark Hard Azure"
      }, {
        hex: "#99CCFF",
        hsv: "hsv(210%,4,100%)",
        hsl: "hsl(210,100%,80%)",
        code: "PDA",
        name: "Pale Dull Azure"
      }, {
        hex: "#6699CC",
        hsv: "hsv(210%,50%,80%)",
        hsl: "hsl(210%,50%,60%)",
        code: "LDA",
        name: "Light Dull Azure"
      }, {
        hex: "#336699",
        hsv: "hsv(210%,67%,60%)",
        hsl: "hsl(210%,50%,40%)",
        code: "DDA",
        name: "Dark Dull Azure"
      }, {
        hex: "#003366",
        hsv: "hsv(210,100%,40%)",
        hsl: "hsl(210,100%,20%)",
        code: "ODA",
        name: "Obscure Dull Azure"
      }, {
        hex: "#0066FF",
        hsv: "hsv(216,100%,100%)",
        hsl: "hsl(216,100%,50%)",
        code: "AAB",
        name: "Azure-Azure-Blue"
      }, {
        hex: "#6699FF",
        hsv: "hsv(220%,6,100%)",
        hsl: "hsl(220,100%,70%)",
        code: "LAB",
        name: "Light Azure-Blue"
      }, {
        hex: "#3366CC",
        hsv: "hsv(220%,75%,80%)",
        hsl: "hsl(220%,60%,50%)",
        code: "MAB",
        name: "Medium Azure-Blue"
      }, {
        hex: "#003399",
        hsv: "hsv(220,100%,60%)",
        hsl: "hsl(220,100%,30%)",
        code: "DAB",
        name: "Dark Azure-Blue"
      }, {
        hex: "#3366FF",
        hsv: "hsv(225%,8,100%)",
        hsl: "hsl(225,100%,60%)",
        code: "LBA",
        name: "Light Blue-Azure"
      }, {
        hex: "#0033CC",
        hsv: "hsv(225,100%,80%)",
        hsl: "hsl(225,100%,40%)",
        code: "DBA",
        name: "Dark Blue-Azure"
      }, {
        hex: "#0033FF",
        hsv: "hsv(228,100%,100%)",
        hsl: "hsl(228,100%,50%)",
        code: "BBA",
        name: "Blue-Blue-Azure"
      }
    ];

    Palettes.bluesMH = [
      {
        hex: "#b2d8ff"
      }, {
        hex: "#66b2ff"
      }, {
        hex: "#0080ff"
      }, {
        hex: "#0066cc"
      }, {
        hex: "#004c99"
      }
    ];

    Palettes.blues = [
      {
        hex: "#b2d8ff"
      }, {
        hex: "#66b2ff"
      }, {
        hex: "#0080ff"
      }, {
        hex: "#0066cc"
      }, {
        hex: "#004c99"
      }, {
        hex: "#CCCCFF",
        hsv: "hsv(240%,20%,100%)",
        hsl: "hsl(240,100%,90%)",
        code: "PWB",
        name: "Pale Weak Blue"
      }, {
        hex: "#9999FF",
        hsv: "hsv(240%,4,100%)",
        hsl: "hsl(240,100%,80%)",
        code: "PDB",
        name: "Pale Dull Blue"
      }, {
        hex: "#6666FF",
        hsv: "hsv(240%,6,100%)",
        hsl: "hsl(240,100%,70%)",
        code: "LFB",
        name: "Light Faded Blue"
      }, {
        hex: "#3333FF",
        hsv: "hsv(240%,8,100%)",
        hsl: "hsl(240,100%,60%)",
        code: "LHB",
        name: "Light Hard Blue"
      }, {
        hex: "#0000FF",
        hsv: "hsv(240,100%,100%)",
        hsl: "hsl(240,100%,50%)",
        code: "B",
        name: "Blue"
      }, {
        hex: "#9999CC",
        hsv: "hsv(240%,25%,80%)",
        hsl: "hsl(240%,33%,70%)",
        code: "LWB",
        name: "Light Weak Blue"
      }, {
        hex: "#6666CC",
        hsv: "hsv(240%,50%,80%)",
        hsl: "hsl(240%,50%,60%)",
        code: "LDB",
        name: "Light Dull Blue"
      }, {
        hex: "#3333CC",
        hsv: "hsv(240%,75%,80%)",
        hsl: "hsl(240%,60%,50%)",
        code: "MFB",
        name: "Medium Faded Blue"
      }, {
        hex: "#0000CC",
        hsv: "hsv(240,100%,80%)",
        hsl: "hsl(240,100%,40%)",
        code: "DHB",
        name: "Dark Hard Blue"
      }, {
        hex: "#666699",
        hsv: "hsv(240%,33%,60%)",
        hsl: "hsl(240%,20%,50%)",
        code: "MWB",
        name: "Medium Weak Blue"
      }, {
        hex: "#333399",
        hsv: "hsv(240%,67%,60%)",
        hsl: "hsl(240%,50%,40%)",
        code: "DDB",
        name: "Dark Dull Blue"
      }, {
        hex: "#000099",
        hsv: "hsv(240,100%,60%)",
        hsl: "hsl(240,100%,30%)",
        code: "DFB",
        name: "Dark Faded Blue"
      }, {
        hex: "#333366",
        hsv: "hsv(240%,50%,40%)",
        hsl: "hsl(240%,33%,30%)",
        code: "DWB",
        name: "Dark Weak Blue"
      }, {
        hex: "#000066",
        hsv: "hsv(240,100%,40%)",
        hsl: "hsl(240,100%,20%)",
        code: "ODB",
        name: "Obscure Dull Blue"
      }, {
        hex: "#000033",
        hsv: "hsv(240,100%,20%)",
        hsl: "hsl(240,100%,100%)",
        code: "OWB",
        name: "Obscure Weak Blue"
      }
    ];

    Palettes.violetsMH = [
      {
        hex: "#d8b2ff"
      }, {
        hex: "#b266ff"
      }, {
        hex: "#b266ff"
      }, {
        hex: "#6600cc"
      }, {
        hex: "#4c0099"
      }
    ];

    Palettes.violets = [
      {
        hex: "#3300FF",
        hsv: "hsv(252,100%,100%)",
        hsl: "hsl(252,100%,50%)",
        code: "BBV",
        name: "Blue-Blue-Violet"
      }, {
        hex: "#6633FF",
        hsv: "hsv(255%,8,100%)",
        hsl: "hsl(255,100%,60%)",
        code: "LBV",
        name: "Light Blue-Violet"
      }, {
        hex: "#3300CC",
        hsv: "hsv(255,100%,80%)",
        hsl: "hsl(255,100%,40%)",
        code: "DBV",
        name: "Dark Blue-Violet"
      }, {
        hex: "#9966FF",
        hsv: "hsv(260%,6,100%)",
        hsl: "hsl(260,100%,70%)",
        code: "LVB",
        name: "Light Violet-Blue"
      }, {
        hex: "#6633CC",
        hsv: "hsv(260%,75%,80%)",
        hsl: "hsl(260%,60%,50%)",
        code: "MVB",
        name: "Medium Violet-Blue"
      }, {
        hex: "#330099",
        hsv: "hsv(260,100%,60%)",
        hsl: "hsl(260,100%,30%)",
        code: "DVB",
        name: "Dark Violet-Blue"
      }, {
        hex: "#6600FF",
        hsv: "hsv(264,100%,100%)",
        hsl: "hsl(264,100%,50%)",
        code: "VVB",
        name: "Violet-Violet-Blue"
      }, {
        hex: "#9933FF",
        hsv: "hsv(270%,8,100%)",
        hsl: "hsl(270,100%,60%)",
        code: "LHV",
        name: "Light Hard Violet"
      }, {
        hex: "#6600CC",
        hsv: "hsv(270,100%,80%)",
        hsl: "hsl(270,100%,40%)",
        code: "DHV",
        name: "Dark Hard Violet"
      }, {
        hex: "#CC99FF",
        hsv: "hsv(270%,4,100%)",
        hsl: "hsl(270,100%,80%)",
        code: "PDV",
        name: "Pale Dull Violet"
      }, {
        hex: "#9966CC",
        hsv: "hsv(270%,50%,80%)",
        hsl: "hsl(270%,50%,60%)",
        code: "LDV",
        name: "Light Dull Violet"
      }, {
        hex: "#663399",
        hsv: "hsv(270%,67%,60%)",
        hsl: "hsl(270%,50%,40%)",
        code: "DDV",
        name: "Dark Dull Violet"
      }, {
        hex: "#330066",
        hsv: "hsv(270,100%,40%)",
        hsl: "hsl(270,100%,20%)",
        code: "ODV",
        name: "Obscure Dull Violet"
      }, {
        hex: "#9900FF",
        hsv: "hsv(276,100%,100%)",
        hsl: "hsl(276,100%,50%)",
        code: "VVM",
        name: "Violet-Violet-Gray"
      }, {
        hex: "#CC66FF",
        hsv: "hsv(280%,6,100%)",
        hsl: "hsl(280,100%,70%)",
        code: "LVM",
        name: "Light Violet-Magenta"
      }, {
        hex: "#9933CC",
        hsv: "hsv(280%,75%,80%)",
        hsl: "hsl(280%,60%,50%)",
        code: "MVM",
        name: "Medium Violet-Magenta"
      }, {
        hex: "#660099",
        hsv: "hsv(280,100%,60%)",
        hsl: "hsl(280,100%,30%)",
        code: "DVM",
        name: "Dark Violet-Magenta"
      }, {
        hex: "#CC33FF",
        hsv: "hsv(285%,8,100%)",
        hsl: "hsl(285,100%,60%)",
        code: "LMV",
        name: "Light Magenta-Violet"
      }, {
        hex: "#9900CC",
        hsv: "hsv(285,100%,80%)",
        hsl: "hsl(285,100%,40%)",
        code: "DMV",
        name: "Dark Magenta-Violet"
      }, {
        hex: "#CC00FF",
        hsv: "hsv(288,100%,100%)",
        hsl: "hsl(288,100%,50%)",
        code: "MMV",
        name: "Magenta-Magenta-Violet"
      }
    ];

    Palettes.plumsMH = [
      {
        hex: "#4c004c"
      }, {
        hex: "#660066"
      }, {
        hex: "#800080"
      }, {
        hex: "#b266b2"
      }, {
        hex: "#d8b2d8"
      }
    ];

    Palettes.magentasMH = [
      {
        hex: "#ffb2ff"
      }, {
        hex: "#ff66ff"
      }, {
        hex: "#ff00ff"
      }, {
        hex: "#cc00cc"
      }, {
        hex: "#990099"
      }
    ];

    Palettes.magentas = [
      {
        hex: "#FFCCFF",
        hsv: "hsv(300%,20%,100%)",
        hsl: "hsl(300,100%,90%)",
        code: "PWM",
        name: "Pale Weak Magenta"
      }, {
        hex: "#FF99FF",
        hsv: "hsv(300%,4,100%)",
        hsl: "hsl(300,100%,80%)",
        code: "PDM",
        name: "Pale Dull Magenta"
      }, {
        hex: "#FF66FF",
        hsv: "hsv(300%,6,100%)",
        hsl: "hsl(300,100%,70%)",
        code: "LFM",
        name: "Light Faded Magenta"
      }, {
        hex: "#FF33FF",
        hsv: "hsv(300%,8,100%)",
        hsl: "hsl(300,100%,60%)",
        code: "LHM",
        name: "Light Hard Magenta"
      }, {
        hex: "#FF00FF",
        hsv: "hsv(300,100%,100%)",
        hsl: "hsl(300,100%,50%)",
        code: "M",
        name: "Magenta"
      }, {
        hex: "#CC99CC",
        hsv: "hsv(300%,25%,80%)",
        hsl: "hsl(300%,33%,70%)",
        code: "LWM",
        name: "Light Weak Magenta"
      }, {
        hex: "#CC66CC",
        hsv: "hsv(300%,50%,80%)",
        hsl: "hsl(300%,50%,60%)",
        code: "LDM",
        name: "Light Dull Magenta"
      }, {
        hex: "#CC33CC",
        hsv: "hsv(300%,75%,80%)",
        hsl: "hsl(300%,60%,50%)",
        code: "MFM",
        name: "Medium Faded Magenta"
      }, {
        hex: "#CC00CC",
        hsv: "hsv(300,100%,80%)",
        hsl: "hsl(300,100%,40%)",
        code: "DHM",
        name: "Dark Hard Magenta"
      }, {
        hex: "#996699",
        hsv: "hsv(300%,33%,60%)",
        hsl: "hsl(300%,20%,50%)",
        code: "MWM",
        name: "Medium Weak Magenta"
      }, {
        hex: "#993399",
        hsv: "hsv(300%,67%,60%)",
        hsl: "hsl(300%,50%,40%)",
        code: "DDM",
        name: "Dark Dull Magenta"
      }, {
        hex: "#990099",
        hsv: "hsv(300,100%,60%)",
        hsl: "hsl(300,100%,30%)",
        code: "DFM",
        name: "Dark Faded Magenta"
      }, {
        hex: "#663366",
        hsv: "hsv(300%,50%,40%)",
        hsl: "hsl(300%,33%,30%)",
        code: "DWM",
        name: "Dark Weak Magenta"
      }, {
        hex: "#660066",
        hsv: "hsv(300,100%,40%)",
        hsl: "hsl(300,100%,20%)",
        code: "ODM",
        name: "Obscure Dull Magenta"
      }, {
        hex: "#330033",
        hsv: "hsv(300,100%,20%)",
        hsl: "hsl(300,100%,100%)",
        code: "OWM",
        name: "Obscure Weak Magenta"
      }
    ];

    Palettes.pinksMH = [
      {
        hex: "#ffb2d8"
      }, {
        hex: "#ff66b2"
      }, {
        hex: "#ff0080"
      }, {
        hex: "#cc0066"
      }, {
        hex: "#99004c"
      }
    ];

    Palettes.pinks = [
      {
        hex: "#FF00CC",
        hsv: "hsv(312,100%,100%)",
        hsl: "hsl(312,100%,50%)",
        code: "MMP",
        name: "Magenta-Magenta-Pink"
      }, {
        hex: "#FF33CC",
        hsv: "hsv(315, 80%,100%)",
        hsl: "hsl(315,100%,60%)",
        code: "LMP",
        name: "Light Magenta-Pink"
      }, {
        hex: "#CC0099",
        hsv: "hsv(315,100%, 80%)",
        hsl: "hsl(315,100%,40%)",
        code: "DMP",
        name: "Dark Magenta-Pink"
      }, {
        hex: "#FF66CC",
        hsv: "hsv(320, 60%,100%)",
        hsl: "hsl(320,100%,70%)",
        code: "LPM",
        name: "Light Pink-Magenta"
      }, {
        hex: "#CC3399",
        hsv: "hsv(320, 75%, 80%)",
        hsl: "hsl(320%,60%,50%)",
        code: "MPM",
        name: "Medium Pink-Magenta"
      }, {
        hex: "#990066",
        hsv: "hsv(320,100%, 60%)",
        hsl: "hsl(320,100%,30%)",
        code: "DPM",
        name: "Dark Pink-Magenta"
      }, {
        hex: "#FF0099",
        hsv: "hsv(324,100%,100%)",
        hsl: "hsl(324,100%,50%)",
        code: "PPM",
        name: "Pink-Pink-Magenta"
      }, {
        hex: "#FF3399",
        hsv: "hsv(330, 80%,100%)",
        hsl: "hsl(330,100%,60%)",
        code: "LHP",
        name: "Light Hard Pink"
      }, {
        hex: "#CC0066",
        hsv: "hsv(330,100%, 80%)",
        hsl: "hsl(330,100%,40%)",
        code: "DHP",
        name: "Dark Hard Pink"
      }, {
        hex: "#FF99CC",
        hsv: "hsv(330, 40%,100%)",
        hsl: "hsl(330,100%,80%)",
        code: "PDP",
        name: "Pale Dull Pink"
      }, {
        hex: "#CC6699",
        hsv: "hsv(330, 50%, 80%)",
        hsl: "hsl(330%,50%,60%)",
        code: "LDP",
        name: "Light Dull Pink"
      }, {
        hex: "#993366",
        hsv: "hsv(330, 67%, 60%)",
        hsl: "hsl(330%,50%,40%)",
        code: "DDP",
        name: "Dark Dull Pink"
      }, {
        hex: "#660033",
        hsv: "hsv(330,100%, 40%)",
        hsl: "hsl(330,100%,20%)",
        code: "ODP",
        name: "Obscure Dull Pink"
      }, {
        hex: "#FF0066",
        hsv: "hsv(336,100%,100%)",
        hsl: "hsl(336,100%,50%)",
        code: "PPR",
        name: "Pink-Pink-Red"
      }, {
        hex: "#FF6699",
        hsv: "hsv(340, 60%,100%)",
        hsl: "hsl(340,100%,70%)",
        code: "LPR",
        name: "Light Pink-Red"
      }, {
        hex: "#CC3366",
        hsv: "hsv(340, 75%, 80%)",
        hsl: "hsl(340%,60%,50%)",
        code: "MPR",
        name: "Medium Pink-Red"
      }, {
        hex: "#990033",
        hsv: "hsv(340,100%, 60%)",
        hsl: "hsl(340,100%,30%)",
        code: "DPR",
        name: "Dark Pink-Red"
      }, {
        hex: "#FF3366",
        hsv: "hsv(345, 80%,100%)",
        hsl: "hsl(345,100%,60%)",
        code: "LRP",
        name: "Light Red-Pink"
      }, {
        hex: "#CC0033",
        hsv: "hsv(345,100%, 80%)",
        hsl: "hsl(345,100%,40%)",
        code: "DRP",
        name: "Dark Red-Pink"
      }, {
        hex: "#FF0033",
        hsv: "hsv(348,100%,100%)",
        hsl: "hsl(348,100%,50%)",
        code: "RRP",
        name: "Red-Red-Pink"
      }
    ];

    Palettes.gray = {
      hex: "#777777",
      hsv: "hsv(0,100%, 50%)",
      hsl: "hsl(0,100%,50%)",
      code: "G",
      name: "Gray"
    };

    Palettes.grays = [
      {
        hex: "#111111",
        hsv: "hsv(0, ,100%)",
        hsl: "hsl(0,0,100%)",
        code: "HTML",
        name: "none"
      }, {
        hex: "#FFFFFF",
        hsv: "hsv(0,0,100%)",
        hsl: "hsl(0,0,100%)",
        code: "HTML",
        name: "white"
      }, {
        hex: "#F8F8FF",
        hsv: "hsv(240%,03,100%)",
        hsl: "hsl(240,100%,99%)",
        code: "HTML",
        name: "ghostwhite"
      }, {
        hex: "#F5F5F5",
        hsv: "hsv(0,0%,96%)",
        hsl: "hsl(0,0%,96%)",
        code: "HTML",
        name: "whitesmoke"
      }, {
        hex: "#DCDCDC",
        hsv: "hsv(0,0%,86%)",
        hsl: "hsl(0,0%,86%)",
        code: "HTML",
        name: "gainsboro"
      }, {
        hex: "#D3D3D3",
        hsv: "hsv(0,0%,83%)",
        hsl: "hsl(0,0%,83%)",
        code: "HTML",
        name: "lightgray"
      }, {
        hex: "#C0C0C0",
        hsv: "hsv(0,0%,75%)",
        hsl: "hsl(0,0%,75%)",
        code: "HTML",
        name: "silver"
      }, {
        hex: "#A9A9A9",
        hsv: "hsv(0,0%,66%)",
        hsl: "hsl(0,0%,66%)",
        code: "HTML",
        name: "darkgray"
      }, {
        hex: "#808080",
        hsv: "hsv(0,0%,50%)",
        hsl: "hsl(0,0%,50%)",
        code: "HTML",
        name: "gray"
      }, {
        hex: "#696969",
        hsv: "hsv(0,0%,4100%)",
        hsl: "hsl(0,0%,4100%)",
        code: "HTML",
        name: "dimgray"
      }, {
        hex: "#000000",
        hsv: "hsv(0,0%,00%)",
        hsl: "hsl(0,0,0%)",
        code: "HTML",
        name: "black"
      }, {
        hex: "#778899",
        hsv: "hsv(210,22%,60%)",
        hsl: "hsl(210%,14%,53%)",
        code: "HTML",
        name: "lightslategray"
      }, {
        hex: "#708090",
        hsv: "hsv(210,22%,56%)",
        hsl: "hsl(210%,13%,50%)",
        code: "HTML",
        name: "slategray"
      }, {
        hex: "#2F4F4F",
        hsv: "hsv(180,41%,31%)",
        hsl: "hsl(180%,25%,25%)",
        code: "HTML",
        name: "darkslategray"
      }, {
        hex: "#FFCCFF",
        hsv: "hsv(0, 20%,100%)",
        hsl: "hsl(0,100%,90%)",
        code: "PWG",
        name: "Pale Weak Gray"
      }, {
        hex: "#FF99FF",
        hsv: "hsv(0, 40%,100%)",
        hsl: "hsl(0,100%,80%)",
        code: "PDG",
        name: "Pale Dull Gray"
      }, {
        hex: "#EEEEEE",
        hsv: "hsv(0, 25%, 80%)",
        hsl: "hsl(0, 33%,70%)",
        code: "LWG",
        name: "Light Weak Gray"
      }, {
        hex: "#DDDDDD",
        hsv: "hsv(0, 50%, 40%)",
        hsl: "hsl(0, 33%,30%)",
        code: "DWG",
        name: "Dark Weak Gray"
      }, {
        hex: "#CCCCCC",
        hsv: "hsv(0, 33%, 60%)",
        hsl: "hsl(0, 20%,50%)",
        code: "MWG",
        name: "Medium Weak Gray"
      }, {
        hex: "#BBBBBB",
        hsv: "hsv(0, 50%, 80%)",
        hsl: "hsl(0, 50%,60%)",
        code: "LDG",
        name: "Light Dull Gray"
      }, {
        hex: "#AAAAAA",
        hsv: "hsv(0, 67%, 60%)",
        hsl: "hsl(0, 50%,40%)",
        code: "DDG",
        name: "Dark Dull Gray"
      }, {
        hex: "#999999",
        hsv: "hsv(0, 60%,100%)",
        hsl: "hsl(0,100%,70%)",
        code: "LFG",
        name: "Light Faded Gray"
      }, {
        hex: "#888888",
        hsv: "hsv(0, 75%, 80%)",
        hsl: "hsl(0, 60%,50%)",
        code: "MFG",
        name: "Medium Faded Gray"
      }, {
        hex: "#666666",
        hsv: "hsv(0, 80%,100%)",
        hsl: "hsl(0,100%,60%)",
        code: "LHG",
        name: "Light Hard Gray"
      }, {
        hex: "#555555",
        hsv: "hsv(0,100%, 80%)",
        hsl: "hsl(0,100%,40%)",
        code: "DHG",
        name: "Dark Hard Gray"
      }, {
        hex: "#444444",
        hsv: "hsv(0,100%, 60%)",
        hsl: "hsl(0,100%,30%)",
        code: "DFG",
        name: "Dark Faded Gray"
      }, {
        hex: "#777777",
        hsv: "hsv(0,100%, 50%)",
        hsl: "hsl(0,100%,50%)",
        code: "G",
        name: "Gray"
      }, {
        hex: "#333333",
        hsv: "hsv(0,100%, 40%)",
        hsl: "hsl(0,100%,20%)",
        code: "ODG",
        name: "Obscure Dull Gray"
      }, {
        hex: "#222222",
        hsv: "hsv(0,100%, 20%)",
        hsl: "hsl(0,100%,10%)",
        code: "OWG",
        name: "Obscure Weak Gray"
      }
    ];

    Palettes.groups = [Palettes.reds, Palettes.browns, Palettes.tans, Palettes.oranges, Palettes.yellows, Palettes.limes, Palettes.greens, Palettes.teals, Palettes.cyans, Palettes.azures, Palettes.blues, Palettes.violets, Palettes.magentas, Palettes.pinks, Palettes.grays];

    Palettes.groupRgbs = [Palettes.redsMH, Palettes.orangesMH, Palettes.yellowsMH, Palettes.limesMH, Palettes.greensMH, Palettes.aquasMH, Palettes.cyansMH, Palettes.azuresMH, Palettes.bluesMH, Palettes.violetsMH, Palettes.magentasMH, Palettes.pinksMH];

    Palettes.groupRgbs10 = [Palettes.redsMH, Palettes.orangesMH, Palettes.yellowsMH, Palettes.limesMH, Palettes.greensMH, Palettes.aquasMH, Palettes.cyansMH, Palettes.azuresMH, Palettes.bluesMH, Palettes.violetsMH];

    Palettes.group12 = ['red', 'orange', 'yellow', 'lime', 'green', 'aqua', 'cyan', 'teal', 'blue', 'violet', 'magenta', 'pink'];

    Palettes.toGroup = function(h) {
      var group;
      group = this.reds;
      if (0 <= h && h <= 15) {
        group = this.reds;
      }
      if (15 < h && h <= 45) {
        group = this.oranges;
      }
      if (45 < h && h <= 75) {
        group = this.yellows;
      }
      if (75 < h && h <= 105) {
        group = this.limes;
      }
      if (105 < h && h <= 135) {
        group = this.greens;
      }
      if (135 < h && h <= 165) {
        group = this.teals;
      }
      if (165 < h && h <= 195) {
        group = this.cyans;
      }
      if (195 < h && h <= 225) {
        group = this.azures;
      }
      if (225 < h && h <= 255) {
        group = this.blues;
      }
      if (255 < h && h <= 285) {
        group = this.violets;
      }
      if (285 < h && h <= 315) {
        group = this.magentas;
      }
      if (315 < h && h <= 345) {
        group = this.pinks;
      }
      if (345 < h && h <= 360) {
        group = this.reds;
      }
      return group;
    };

    Palettes.toIndex = function(h) {
      var index;
      index = 0;
      if (0 <= h && h <= 15) {
        index = 0;
      }
      if (15 < h && h <= 45) {
        index = 1;
      }
      if (45 < h && h <= 75) {
        index = 2;
      }
      if (75 < h && h <= 105) {
        index = 3;
      }
      if (105 < h && h <= 135) {
        index = 4;
      }
      if (135 < h && h <= 165) {
        index = 5;
      }
      if (165 < h && h <= 195) {
        index = 6;
      }
      if (195 < h && h <= 225) {
        index = 7;
      }
      if (225 < h && h <= 255) {
        index = 8;
      }
      if (255 < h && h <= 285) {
        index = 9;
      }
      if (285 < h && h <= 315) {
        index = 10;
      }
      if (315 < h && h <= 345) {
        index = 11;
      }
      if (345 < h && h <= 360) {
        index = 0;
      }
      return index;
    };

    Palettes.scales = function() {
      var colors, group, j, k, l, len, len1, ref, ref1, scs;
      scs = [];
      ref = this.groupRgbs10;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        group = ref[k];
        colors = [];
        len = group.length;
        for (j = l = 0, ref1 = len; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          colors.push(group[len - 1 - j].hex);
        }
        scs.push(chroma.scale(colors));
      }
      return scs;
    };

    Palettes.Brewer = {
      OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
      PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
      BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
      Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
      BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
      YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
      YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
      Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
      RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
      Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
      YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
      Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
      GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
      Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
      YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
      PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
      Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
      PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
      Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
      RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
      RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
      PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
      PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
      RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
      BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
      RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
      PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
      Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
      Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
      Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
      Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
      Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
      Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
      Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
      Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
    };

    Palettes.BrewerRainbow = ['OrRd', 'Oranges', 'YlOrBr', 'YlGn', 'Greens', 'GnBu', 'BuGn', 'PuBuGn', 'Blues', 'Purples', 'RdPu', 'PuRd', 'OrRd'];

    return Palettes;

  })();

}).call(this);


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
/**
 * @license
 *
 * chroma.js - JavaScript library for color conversions
 * 
 * Copyright (c) 2011-2017, Gregor Aisch
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

(function() {
  var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma, clip_rgb, cmyk2rgb, colors, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb,
    slice = [].slice;

  type = (function() {

    /*
    for browser-safe type checking+
    ported from jQuery's $.type
     */
    var classToType, len, name, o, ref;
    classToType = {};
    ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
    for (o = 0, len = ref.length; o < len; o++) {
      name = ref[o];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    return function(obj) {
      var strType;
      strType = Object.prototype.toString.call(obj);
      return classToType[strType] || "object";
    };
  })();

  limit = function(x, min, max) {
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    if (x < min) {
      x = min;
    }
    if (x > max) {
      x = max;
    }
    return x;
  };

  unpack = function(args) {
    if (args.length >= 3) {
      return [].slice.call(args);
    } else {
      return args[0];
    }
  };

  clip_rgb = function(rgb) {
    var i, o;
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for (i = o = 0; o < 3; i = ++o) {
      if (i < 3) {
        if (rgb[i] < 0 || rgb[i] > 255) {
          rgb._clipped = true;
        }
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 255) {
          rgb[i] = 255;
        }
      } else if (i === 3) {
        if (rgb[i] < 0) {
          rgb[i] = 0;
        }
        if (rgb[i] > 1) {
          rgb[i] = 1;
        }
      }
    }
    if (!rgb._clipped) {
      delete rgb._unclipped;
    }
    return rgb;
  };

  PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;

  TWOPI = PI * 2;

  PITHIRD = PI / 3;

  DEG2RAD = PI / 180;

  RAD2DEG = 180 / PI;

  chroma = function() {
    if (arguments[0] instanceof Color) {
      return arguments[0];
    }
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, arguments, function(){});
  };

  _interpolators = [];

  if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
    module.exports = chroma;
  }

  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return chroma;
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {
    root = typeof exports !== "undefined" && exports !== null ? exports : this;
    root.chroma = chroma;
  }

  chroma.version = '1.3.4';

  _input = {};

  _guess_formats = [];

  _guess_formats_sorted = false;

  Color = (function() {
    function Color() {
      var arg, args, chk, len, len1, me, mode, o, w;
      me = this;
      args = [];
      for (o = 0, len = arguments.length; o < len; o++) {
        arg = arguments[o];
        if (arg != null) {
          args.push(arg);
        }
      }
      mode = args[args.length - 1];
      if (_input[mode] != null) {
        me._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
      } else {
        if (!_guess_formats_sorted) {
          _guess_formats = _guess_formats.sort(function(a, b) {
            return b.p - a.p;
          });
          _guess_formats_sorted = true;
        }
        for (w = 0, len1 = _guess_formats.length; w < len1; w++) {
          chk = _guess_formats[w];
          mode = chk.test.apply(chk, args);
          if (mode) {
            break;
          }
        }
        if (mode) {
          me._rgb = clip_rgb(_input[mode].apply(_input, args));
        }
      }
      if (me._rgb == null) {
        console.warn('unknown format: ' + args);
      }
      if (me._rgb == null) {
        me._rgb = [0, 0, 0];
      }
      if (me._rgb.length === 3) {
        me._rgb.push(1);
      }
    }

    Color.prototype.toString = function() {
      return this.hex();
    };

    Color.prototype.clone = function() {
      return chroma(me._rgb);
    };

    return Color;

  })();

  chroma._input = _input;


  /**
  	ColorBrewer colors for chroma.js
  
  	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
  	Pennsylvania State University.
  
  	Licensed under the Apache License, Version 2.0 (the "License"); 
  	you may not use this file except in compliance with the License.
  	You may obtain a copy of the License at	
  	http://www.apache.org/licenses/LICENSE-2.0
  
  	Unless required by applicable law or agreed to in writing, software distributed
  	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  	CONDITIONS OF ANY KIND, either express or implied. See the License for the
  	specific language governing permissions and limitations under the License.
  
      @preserve
   */

  chroma.brewer = brewer = {
    OrRd: ['#fff7ec', '#fee8c8', '#fdd49e', '#fdbb84', '#fc8d59', '#ef6548', '#d7301f', '#b30000', '#7f0000'],
    PuBu: ['#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858'],
    BuPu: ['#f7fcfd', '#e0ecf4', '#bfd3e6', '#9ebcda', '#8c96c6', '#8c6bb1', '#88419d', '#810f7c', '#4d004b'],
    Oranges: ['#fff5eb', '#fee6ce', '#fdd0a2', '#fdae6b', '#fd8d3c', '#f16913', '#d94801', '#a63603', '#7f2704'],
    BuGn: ['#f7fcfd', '#e5f5f9', '#ccece6', '#99d8c9', '#66c2a4', '#41ae76', '#238b45', '#006d2c', '#00441b'],
    YlOrBr: ['#ffffe5', '#fff7bc', '#fee391', '#fec44f', '#fe9929', '#ec7014', '#cc4c02', '#993404', '#662506'],
    YlGn: ['#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#006837', '#004529'],
    Reds: ['#fff5f0', '#fee0d2', '#fcbba1', '#fc9272', '#fb6a4a', '#ef3b2c', '#cb181d', '#a50f15', '#67000d'],
    RdPu: ['#fff7f3', '#fde0dd', '#fcc5c0', '#fa9fb5', '#f768a1', '#dd3497', '#ae017e', '#7a0177', '#49006a'],
    Greens: ['#f7fcf5', '#e5f5e0', '#c7e9c0', '#a1d99b', '#74c476', '#41ab5d', '#238b45', '#006d2c', '#00441b'],
    YlGnBu: ['#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58'],
    Purples: ['#fcfbfd', '#efedf5', '#dadaeb', '#bcbddc', '#9e9ac8', '#807dba', '#6a51a3', '#54278f', '#3f007d'],
    GnBu: ['#f7fcf0', '#e0f3db', '#ccebc5', '#a8ddb5', '#7bccc4', '#4eb3d3', '#2b8cbe', '#0868ac', '#084081'],
    Greys: ['#ffffff', '#f0f0f0', '#d9d9d9', '#bdbdbd', '#969696', '#737373', '#525252', '#252525', '#000000'],
    YlOrRd: ['#ffffcc', '#ffeda0', '#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c', '#bd0026', '#800026'],
    PuRd: ['#f7f4f9', '#e7e1ef', '#d4b9da', '#c994c7', '#df65b0', '#e7298a', '#ce1256', '#980043', '#67001f'],
    Blues: ['#f7fbff', '#deebf7', '#c6dbef', '#9ecae1', '#6baed6', '#4292c6', '#2171b5', '#08519c', '#08306b'],
    PuBuGn: ['#fff7fb', '#ece2f0', '#d0d1e6', '#a6bddb', '#67a9cf', '#3690c0', '#02818a', '#016c59', '#014636'],
    Viridis: ['#440154', '#482777', '#3f4a8a', '#31678e', '#26838f', '#1f9d8a', '#6cce5a', '#b6de2b', '#fee825'],
    Spectral: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
    RdYlGn: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    RdBu: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#f7f7f7', '#d1e5f0', '#92c5de', '#4393c3', '#2166ac', '#053061'],
    PiYG: ['#8e0152', '#c51b7d', '#de77ae', '#f1b6da', '#fde0ef', '#f7f7f7', '#e6f5d0', '#b8e186', '#7fbc41', '#4d9221', '#276419'],
    PRGn: ['#40004b', '#762a83', '#9970ab', '#c2a5cf', '#e7d4e8', '#f7f7f7', '#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'],
    RdYlBu: ['#a50026', '#d73027', '#f46d43', '#fdae61', '#fee090', '#ffffbf', '#e0f3f8', '#abd9e9', '#74add1', '#4575b4', '#313695'],
    BrBG: ['#543005', '#8c510a', '#bf812d', '#dfc27d', '#f6e8c3', '#f5f5f5', '#c7eae5', '#80cdc1', '#35978f', '#01665e', '#003c30'],
    RdGy: ['#67001f', '#b2182b', '#d6604d', '#f4a582', '#fddbc7', '#ffffff', '#e0e0e0', '#bababa', '#878787', '#4d4d4d', '#1a1a1a'],
    PuOr: ['#7f3b08', '#b35806', '#e08214', '#fdb863', '#fee0b6', '#f7f7f7', '#d8daeb', '#b2abd2', '#8073ac', '#542788', '#2d004b'],
    Set2: ['#66c2a5', '#fc8d62', '#8da0cb', '#e78ac3', '#a6d854', '#ffd92f', '#e5c494', '#b3b3b3'],
    Accent: ['#7fc97f', '#beaed4', '#fdc086', '#ffff99', '#386cb0', '#f0027f', '#bf5b17', '#666666'],
    Set1: ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999'],
    Set3: ['#8dd3c7', '#ffffb3', '#bebada', '#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#bc80bd', '#ccebc5', '#ffed6f'],
    Dark2: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02', '#a6761d', '#666666'],
    Paired: ['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928'],
    Pastel2: ['#b3e2cd', '#fdcdac', '#cbd5e8', '#f4cae4', '#e6f5c9', '#fff2ae', '#f1e2cc', '#cccccc'],
    Pastel1: ['#fbb4ae', '#b3cde3', '#ccebc5', '#decbe4', '#fed9a6', '#ffffcc', '#e5d8bd', '#fddaec', '#f2f2f2']
  };

  (function() {
    var key, results;
    results = [];
    for (key in brewer) {
      results.push(brewer[key.toLowerCase()] = brewer[key]);
    }
    return results;
  })();


  /**
  	X11 color names
  
  	http://www.w3.org/TR/css3-color/#svg-color
   */

  w3cx11 = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflower: '#6495ed',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    laserlemon: '#ffff54',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrod: '#fafad2',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    maroon2: '#7f0000',
    maroon3: '#b03060',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    purple2: '#7f007f',
    purple3: '#a020f0',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
  };

  chroma.colors = colors = w3cx11;

  lab2rgb = function() {
    var a, args, b, g, l, r, x, y, z;
    args = unpack(arguments);
    l = args[0], a = args[1], b = args[2];
    y = (l + 16) / 116;
    x = isNaN(a) ? y : y + a / 500;
    z = isNaN(b) ? y : y - b / 200;
    y = LAB_CONSTANTS.Yn * lab_xyz(y);
    x = LAB_CONSTANTS.Xn * lab_xyz(x);
    z = LAB_CONSTANTS.Zn * lab_xyz(z);
    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z);
    g = xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z);
    b = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  xyz_rgb = function(r) {
    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
  };

  lab_xyz = function(t) {
    if (t > LAB_CONSTANTS.t1) {
      return t * t * t;
    } else {
      return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
    }
  };

  LAB_CONSTANTS = {
    Kn: 18,
    Xn: 0.950470,
    Yn: 1,
    Zn: 1.088830,
    t0: 0.137931034,
    t1: 0.206896552,
    t2: 0.12841855,
    t3: 0.008856452
  };

  rgb2lab = function() {
    var b, g, r, ref, ref1, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2xyz(r, g, b), x = ref1[0], y = ref1[1], z = ref1[2];
    return [116 * y - 16, 500 * (x - y), 200 * (y - z)];
  };

  rgb_xyz = function(r) {
    if ((r /= 255) <= 0.04045) {
      return r / 12.92;
    } else {
      return pow((r + 0.055) / 1.055, 2.4);
    }
  };

  xyz_lab = function(t) {
    if (t > LAB_CONSTANTS.t3) {
      return pow(t, 1 / 3);
    } else {
      return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
    }
  };

  rgb2xyz = function() {
    var b, g, r, ref, x, y, z;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = rgb_xyz(r);
    g = rgb_xyz(g);
    b = rgb_xyz(b);
    x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / LAB_CONSTANTS.Xn);
    y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / LAB_CONSTANTS.Yn);
    z = xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / LAB_CONSTANTS.Zn);
    return [x, y, z];
  };

  chroma.lab = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['lab']), function(){});
  };

  _input.lab = lab2rgb;

  Color.prototype.lab = function() {
    return rgb2lab(this._rgb);
  };

  bezier = function(colors) {
    var I, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
    colors = (function() {
      var len, o, results;
      results = [];
      for (o = 0, len = colors.length; o < len; o++) {
        c = colors[o];
        results.push(chroma(c));
      }
      return results;
    })();
    if (colors.length === 2) {
      ref = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref[0], lab1 = ref[1];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push(lab0[i] + t * (lab1[i] - lab0[i]));
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 3) {
      ref1 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 4) {
      ref2 = (function() {
        var len, o, results;
        results = [];
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          results.push(c.lab());
        }
        return results;
      })(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
      I = function(t) {
        var i, lab;
        lab = (function() {
          var o, results;
          results = [];
          for (i = o = 0; o <= 2; i = ++o) {
            results.push((1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
          }
          return results;
        })();
        return chroma.lab.apply(chroma, lab);
      };
    } else if (colors.length === 5) {
      I0 = bezier(colors.slice(0, 3));
      I1 = bezier(colors.slice(2, 5));
      I = function(t) {
        if (t < 0.5) {
          return I0(t * 2);
        } else {
          return I1((t - 0.5) * 2);
        }
      };
    }
    return I;
  };

  chroma.bezier = function(colors) {
    var f;
    f = bezier(colors);
    f.scale = function() {
      return chroma.scale(f);
    };
    return f;
  };


  /*
      chroma.js
  
      Copyright (c) 2011-2013, Gregor Aisch
      All rights reserved.
  
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:
  
      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.
  
      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.
  
      * The name Gregor Aisch may not be used to endorse or promote products
        derived from this software without specific prior written permission.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  
      @source: https://github.com/gka/chroma.js
   */

  chroma.cubehelix = function(start, rotations, hue, gamma, lightness) {
    var dh, dl, f;
    if (start == null) {
      start = 300;
    }
    if (rotations == null) {
      rotations = -1.5;
    }
    if (hue == null) {
      hue = 1;
    }
    if (gamma == null) {
      gamma = 1;
    }
    if (lightness == null) {
      lightness = [0, 1];
    }
    dh = 0;
    if (type(lightness) === 'array') {
      dl = lightness[1] - lightness[0];
    } else {
      dl = 0;
      lightness = [lightness, lightness];
    }
    f = function(fract) {
      var a, amp, b, cos_a, g, h, l, r, sin_a;
      a = TWOPI * ((start + 120) / 360 + rotations * fract);
      l = pow(lightness[0] + dl * fract, gamma);
      h = dh !== 0 ? hue[0] + fract * dh : hue;
      amp = h * l * (1 - l) / 2;
      cos_a = cos(a);
      sin_a = sin(a);
      r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
      g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
      b = l + amp * (+1.97294 * cos_a);
      return chroma(clip_rgb([r * 255, g * 255, b * 255]));
    };
    f.start = function(s) {
      if (s == null) {
        return start;
      }
      start = s;
      return f;
    };
    f.rotations = function(r) {
      if (r == null) {
        return rotations;
      }
      rotations = r;
      return f;
    };
    f.gamma = function(g) {
      if (g == null) {
        return gamma;
      }
      gamma = g;
      return f;
    };
    f.hue = function(h) {
      if (h == null) {
        return hue;
      }
      hue = h;
      if (type(hue) === 'array') {
        dh = hue[1] - hue[0];
        if (dh === 0) {
          hue = hue[1];
        }
      } else {
        dh = 0;
      }
      return f;
    };
    f.lightness = function(h) {
      if (h == null) {
        return lightness;
      }
      if (type(h) === 'array') {
        lightness = h;
        dl = h[1] - h[0];
      } else {
        lightness = [h, h];
        dl = 0;
      }
      return f;
    };
    f.scale = function() {
      return chroma.scale(f);
    };
    f.hue(hue);
    return f;
  };

  chroma.random = function() {
    var code, digits, i, o;
    digits = '0123456789abcdef';
    code = '#';
    for (i = o = 0; o < 6; i = ++o) {
      code += digits.charAt(floor(Math.random() * 16));
    }
    return new Color(code);
  };

  chroma.average = function(colors, mode) {
    var A, alpha, c, cnt, dx, dy, first, i, l, len, o, xyz, xyz2;
    if (mode == null) {
      mode = 'rgb';
    }
    l = colors.length;
    colors = colors.map(function(c) {
      return chroma(c);
    });
    first = colors.splice(0, 1)[0];
    xyz = first.get(mode);
    cnt = [];
    dx = 0;
    dy = 0;
    for (i in xyz) {
      xyz[i] = xyz[i] || 0;
      cnt.push(!isNaN(xyz[i]) ? 1 : 0);
      if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
        A = xyz[i] / 180 * PI;
        dx += cos(A);
        dy += sin(A);
      }
    }
    alpha = first.alpha();
    for (o = 0, len = colors.length; o < len; o++) {
      c = colors[o];
      xyz2 = c.get(mode);
      alpha += c.alpha();
      for (i in xyz) {
        if (!isNaN(xyz2[i])) {
          xyz[i] += xyz2[i];
          cnt[i] += 1;
          if (mode.charAt(i) === 'h') {
            A = xyz[i] / 180 * PI;
            dx += cos(A);
            dy += sin(A);
          }
        }
      }
    }
    for (i in xyz) {
      xyz[i] = xyz[i] / cnt[i];
      if (mode.charAt(i) === 'h') {
        A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
        while (A < 0) {
          A += 360;
        }
        while (A >= 360) {
          A -= 360;
        }
        xyz[i] = A;
      }
    }
    return chroma(xyz, mode).alpha(alpha / l);
  };

  _input.rgb = function() {
    var k, ref, results, v;
    ref = unpack(arguments);
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(v);
    }
    return results;
  };

  chroma.rgb = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['rgb']), function(){});
  };

  Color.prototype.rgb = function(round) {
    if (round == null) {
      round = true;
    }
    if (round) {
      return this._rgb.map(Math.round).slice(0, 3);
    } else {
      return this._rgb.slice(0, 3);
    }
  };

  Color.prototype.rgba = function(round) {
    if (round == null) {
      round = true;
    }
    if (!round) {
      return this._rgb.slice(0);
    }
    return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
  };

  _guess_formats.push({
    p: 3,
    test: function(n) {
      var a;
      a = unpack(arguments);
      if (type(a) === 'array' && a.length === 3) {
        return 'rgb';
      }
      if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
        return 'rgb';
      }
    }
  });

  hex2rgb = function(hex) {
    var a, b, g, r, rgb, u;
    if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
      if (hex.length === 4 || hex.length === 7) {
        hex = hex.substr(1);
      }
      if (hex.length === 3) {
        hex = hex.split("");
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
      }
      u = parseInt(hex, 16);
      r = u >> 16;
      g = u >> 8 & 0xFF;
      b = u & 0xFF;
      return [r, g, b, 1];
    }
    if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
      if (hex.length === 9) {
        hex = hex.substr(1);
      }
      u = parseInt(hex, 16);
      r = u >> 24 & 0xFF;
      g = u >> 16 & 0xFF;
      b = u >> 8 & 0xFF;
      a = round((u & 0xFF) / 0xFF * 100) / 100;
      return [r, g, b, a];
    }
    if ((_input.css != null) && (rgb = _input.css(hex))) {
      return rgb;
    }
    throw "unknown color: " + hex;
  };

  rgb2hex = function(channels, mode) {
    var a, b, g, hxa, r, str, u;
    if (mode == null) {
      mode = 'rgb';
    }
    r = channels[0], g = channels[1], b = channels[2], a = channels[3];
    r = Math.round(r);
    g = Math.round(g);
    b = Math.round(b);
    u = r << 16 | g << 8 | b;
    str = "000000" + u.toString(16);
    str = str.substr(str.length - 6);
    hxa = '0' + round(a * 255).toString(16);
    hxa = hxa.substr(hxa.length - 2);
    return "#" + (function() {
      switch (mode.toLowerCase()) {
        case 'rgba':
          return str + hxa;
        case 'argb':
          return hxa + str;
        default:
          return str;
      }
    })();
  };

  _input.hex = function(h) {
    return hex2rgb(h);
  };

  chroma.hex = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hex']), function(){});
  };

  Color.prototype.hex = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2hex(this._rgb, mode);
  };

  _guess_formats.push({
    p: 4,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "string") {
        return 'hex';
      }
    }
  });

  hsl2rgb = function() {
    var args, b, c, g, h, i, l, o, r, ref, s, t1, t2, t3;
    args = unpack(arguments);
    h = args[0], s = args[1], l = args[2];
    if (s === 0) {
      r = g = b = l * 255;
    } else {
      t3 = [0, 0, 0];
      c = [0, 0, 0];
      t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
      t1 = 2 * l - t2;
      h /= 360;
      t3[0] = h + 1 / 3;
      t3[1] = h;
      t3[2] = h - 1 / 3;
      for (i = o = 0; o <= 2; i = ++o) {
        if (t3[i] < 0) {
          t3[i] += 1;
        }
        if (t3[i] > 1) {
          t3[i] -= 1;
        }
        if (6 * t3[i] < 1) {
          c[i] = t1 + (t2 - t1) * 6 * t3[i];
        } else if (2 * t3[i] < 1) {
          c[i] = t2;
        } else if (3 * t3[i] < 2) {
          c[i] = t1 + (t2 - t1) * ((2 / 3) - t3[i]) * 6;
        } else {
          c[i] = t1;
        }
      }
      ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g = ref[1], b = ref[2];
    }
    if (args.length > 3) {
      return [r, g, b, args[3]];
    } else {
      return [r, g, b];
    }
  };

  rgb2hsl = function(r, g, b) {
    var h, l, min, ref, s;
    if (r !== void 0 && r.length >= 3) {
      ref = r, r = ref[0], g = ref[1], b = ref[2];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    l = (max + min) / 2;
    if (max === min) {
      s = 0;
      h = Number.NaN;
    } else {
      s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
    }
    if (r === max) {
      h = (g - b) / (max - min);
    } else if (g === max) {
      h = 2 + (b - r) / (max - min);
    } else if (b === max) {
      h = 4 + (r - g) / (max - min);
    }
    h *= 60;
    if (h < 0) {
      h += 360;
    }
    return [h, s, l];
  };

  chroma.hsl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsl']), function(){});
  };

  _input.hsl = hsl2rgb;

  Color.prototype.hsl = function() {
    return rgb2hsl(this._rgb);
  };

  hsv2rgb = function() {
    var args, b, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v;
    args = unpack(arguments);
    h = args[0], s = args[1], v = args[2];
    v *= 255;
    if (s === 0) {
      r = g = b = v;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = v * (1 - s);
      q = v * (1 - s * f);
      t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hsv = function() {
    var b, delta, g, h, min, r, ref, s, v;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    v = max / 255.0;
    if (max === 0) {
      h = Number.NaN;
      s = 0;
    } else {
      s = delta / max;
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, s, v];
  };

  chroma.hsv = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsv']), function(){});
  };

  _input.hsv = hsv2rgb;

  Color.prototype.hsv = function() {
    return rgb2hsv(this._rgb);
  };

  num2rgb = function(num) {
    var b, g, r;
    if (type(num) === "number" && num >= 0 && num <= 0xFFFFFF) {
      r = num >> 16;
      g = (num >> 8) & 0xFF;
      b = num & 0xFF;
      return [r, g, b, 1];
    }
    console.warn("unknown num color: " + num);
    return [0, 0, 0, 1];
  };

  rgb2num = function() {
    var b, g, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    return (r << 16) + (g << 8) + b;
  };

  chroma.num = function(num) {
    return new Color(num, 'num');
  };

  Color.prototype.num = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    return rgb2num(this._rgb, mode);
  };

  _input.num = num2rgb;

  _guess_formats.push({
    p: 1,
    test: function(n) {
      if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 0xFFFFFF) {
        return 'num';
      }
    }
  });

  hcg2rgb = function() {
    var _c, _g, args, b, c, f, g, h, i, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, t, v;
    args = unpack(arguments);
    h = args[0], c = args[1], _g = args[2];
    c = c / 100;
    g = g / 100 * 255;
    _c = c * 255;
    if (c === 0) {
      r = g = b = _g;
    } else {
      if (h === 360) {
        h = 0;
      }
      if (h > 360) {
        h -= 360;
      }
      if (h < 0) {
        h += 360;
      }
      h /= 60;
      i = floor(h);
      f = h - i;
      p = _g * (1 - c);
      q = p + _c * (1 - f);
      t = p + _c * f;
      v = p + _c;
      switch (i) {
        case 0:
          ref = [v, t, p], r = ref[0], g = ref[1], b = ref[2];
          break;
        case 1:
          ref1 = [q, v, p], r = ref1[0], g = ref1[1], b = ref1[2];
          break;
        case 2:
          ref2 = [p, v, t], r = ref2[0], g = ref2[1], b = ref2[2];
          break;
        case 3:
          ref3 = [p, q, v], r = ref3[0], g = ref3[1], b = ref3[2];
          break;
        case 4:
          ref4 = [t, p, v], r = ref4[0], g = ref4[1], b = ref4[2];
          break;
        case 5:
          ref5 = [v, p, q], r = ref5[0], g = ref5[1], b = ref5[2];
      }
    }
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  rgb2hcg = function() {
    var _g, b, c, delta, g, h, min, r, ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    min = Math.min(r, g, b);
    max = Math.max(r, g, b);
    delta = max - min;
    c = delta * 100 / 255;
    _g = min / (255 - delta) * 100;
    if (delta === 0) {
      h = Number.NaN;
    } else {
      if (r === max) {
        h = (g - b) / delta;
      }
      if (g === max) {
        h = 2 + (b - r) / delta;
      }
      if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h *= 60;
      if (h < 0) {
        h += 360;
      }
    }
    return [h, c, _g];
  };

  chroma.hcg = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hcg']), function(){});
  };

  _input.hcg = hcg2rgb;

  Color.prototype.hcg = function() {
    return rgb2hcg(this._rgb);
  };

  css2rgb = function(css) {
    var aa, ab, hsl, i, m, o, rgb, w;
    css = css.toLowerCase();
    if ((chroma.colors != null) && chroma.colors[css]) {
      return hex2rgb(chroma.colors[css]);
    }
    if (m = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = o = 0; o <= 2; i = ++o) {
        rgb[i] = +rgb[i];
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = w = 0; w <= 3; i = ++w) {
        rgb[i] = +rgb[i];
      }
    } else if (m = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      rgb = m.slice(1, 4);
      for (i = aa = 0; aa <= 2; i = ++aa) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = 1;
    } else if (m = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      rgb = m.slice(1, 5);
      for (i = ab = 0; ab <= 2; i = ++ab) {
        rgb[i] = round(rgb[i] * 2.55);
      }
      rgb[3] = +rgb[3];
    } else if (m = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = 1;
    } else if (m = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
      hsl = m.slice(1, 4);
      hsl[1] *= 0.01;
      hsl[2] *= 0.01;
      rgb = hsl2rgb(hsl);
      rgb[3] = +m[4];
    }
    return rgb;
  };

  rgb2css = function(rgba) {
    var mode;
    mode = rgba[3] < 1 ? 'rgba' : 'rgb';
    if (mode === 'rgb') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ')';
    } else if (mode === 'rgba') {
      return mode + '(' + rgba.slice(0, 3).map(round).join(',') + ',' + rgba[3] + ')';
    } else {

    }
  };

  rnd = function(a) {
    return round(a * 100) / 100;
  };

  hsl2css = function(hsl, alpha) {
    var mode;
    mode = alpha < 1 ? 'hsla' : 'hsl';
    hsl[0] = rnd(hsl[0] || 0);
    hsl[1] = rnd(hsl[1] * 100) + '%';
    hsl[2] = rnd(hsl[2] * 100) + '%';
    if (mode === 'hsla') {
      hsl[3] = alpha;
    }
    return mode + '(' + hsl.join(',') + ')';
  };

  _input.css = function(h) {
    return css2rgb(h);
  };

  chroma.css = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['css']), function(){});
  };

  Color.prototype.css = function(mode) {
    if (mode == null) {
      mode = 'rgb';
    }
    if (mode.slice(0, 3) === 'rgb') {
      return rgb2css(this._rgb);
    } else if (mode.slice(0, 3) === 'hsl') {
      return hsl2css(this.hsl(), this.alpha());
    }
  };

  _input.named = function(name) {
    return hex2rgb(w3cx11[name]);
  };

  _guess_formats.push({
    p: 5,
    test: function(n) {
      if (arguments.length === 1 && (w3cx11[n] != null)) {
        return 'named';
      }
    }
  });

  Color.prototype.name = function(n) {
    var h, k;
    if (arguments.length) {
      if (w3cx11[n]) {
        this._rgb = hex2rgb(w3cx11[n]);
      }
      this._rgb[3] = 1;
      this;
    }
    h = this.hex();
    for (k in w3cx11) {
      if (h === w3cx11[k]) {
        return k;
      }
    }
    return h;
  };

  lch2lab = function() {

    /*
    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
    These formulas were invented by David Dalrymple to obtain maximum contrast without going
    out of gamut if the parameters are in the range 0-1.
    
    A saturation multiplier was added by Gregor Aisch
     */
    var c, h, l, ref;
    ref = unpack(arguments), l = ref[0], c = ref[1], h = ref[2];
    h = h * DEG2RAD;
    return [l, cos(h) * c, sin(h) * c];
  };

  lch2rgb = function() {
    var L, a, args, b, c, g, h, l, r, ref, ref1;
    args = unpack(arguments);
    l = args[0], c = args[1], h = args[2];
    ref = lch2lab(l, c, h), L = ref[0], a = ref[1], b = ref[2];
    ref1 = lab2rgb(L, a, b), r = ref1[0], g = ref1[1], b = ref1[2];
    return [r, g, b, args.length > 3 ? args[3] : 1];
  };

  lab2lch = function() {
    var a, b, c, h, l, ref;
    ref = unpack(arguments), l = ref[0], a = ref[1], b = ref[2];
    c = sqrt(a * a + b * b);
    h = (atan2(b, a) * RAD2DEG + 360) % 360;
    if (round(c * 10000) === 0) {
      h = Number.NaN;
    }
    return [l, c, h];
  };

  rgb2lch = function() {
    var a, b, g, l, r, ref, ref1;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    ref1 = rgb2lab(r, g, b), l = ref1[0], a = ref1[1], b = ref1[2];
    return lab2lch(l, a, b);
  };

  chroma.lch = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'lch');
  };

  chroma.hcl = function() {
    var args;
    args = unpack(arguments);
    return new Color(args, 'hcl');
  };

  _input.lch = lch2rgb;

  _input.hcl = function() {
    var c, h, l, ref;
    ref = unpack(arguments), h = ref[0], c = ref[1], l = ref[2];
    return lch2rgb([l, c, h]);
  };

  Color.prototype.lch = function() {
    return rgb2lch(this._rgb);
  };

  Color.prototype.hcl = function() {
    return rgb2lch(this._rgb).reverse();
  };

  rgb2cmyk = function(mode) {
    var b, c, f, g, k, m, r, ref, y;
    if (mode == null) {
      mode = 'rgb';
    }
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = r / 255;
    g = g / 255;
    b = b / 255;
    k = 1 - Math.max(r, Math.max(g, b));
    f = k < 1 ? 1 / (1 - k) : 0;
    c = (1 - r - k) * f;
    m = (1 - g - k) * f;
    y = (1 - b - k) * f;
    return [c, m, y, k];
  };

  cmyk2rgb = function() {
    var alpha, args, b, c, g, k, m, r, y;
    args = unpack(arguments);
    c = args[0], m = args[1], y = args[2], k = args[3];
    alpha = args.length > 4 ? args[4] : 1;
    if (k === 1) {
      return [0, 0, 0, alpha];
    }
    r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k);
    g = m >= 1 ? 0 : 255 * (1 - m) * (1 - k);
    b = y >= 1 ? 0 : 255 * (1 - y) * (1 - k);
    return [r, g, b, alpha];
  };

  _input.cmyk = function() {
    return cmyk2rgb(unpack(arguments));
  };

  chroma.cmyk = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['cmyk']), function(){});
  };

  Color.prototype.cmyk = function() {
    return rgb2cmyk(this._rgb);
  };

  _input.gl = function() {
    var i, k, o, rgb, v;
    rgb = (function() {
      var ref, results;
      ref = unpack(arguments);
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push(v);
      }
      return results;
    }).apply(this, arguments);
    for (i = o = 0; o <= 2; i = ++o) {
      rgb[i] *= 255;
    }
    return rgb;
  };

  chroma.gl = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['gl']), function(){});
  };

  Color.prototype.gl = function() {
    var rgb;
    rgb = this._rgb;
    return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
  };

  rgb2luminance = function(r, g, b) {
    var ref;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    r = luminance_x(r);
    g = luminance_x(g);
    b = luminance_x(b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
  };

  luminance_x = function(x) {
    x /= 255;
    if (x <= 0.03928) {
      return x / 12.92;
    } else {
      return pow((x + 0.055) / 1.055, 2.4);
    }
  };

  _interpolators = [];

  interpolate = function(col1, col2, f, m) {
    var interpol, len, o, res;
    if (f == null) {
      f = 0.5;
    }
    if (m == null) {
      m = 'rgb';
    }

    /*
    interpolates between colors
    f = 0 --> me
    f = 1 --> col
     */
    if (type(col1) !== 'object') {
      col1 = chroma(col1);
    }
    if (type(col2) !== 'object') {
      col2 = chroma(col2);
    }
    for (o = 0, len = _interpolators.length; o < len; o++) {
      interpol = _interpolators[o];
      if (m === interpol[0]) {
        res = interpol[1](col1, col2, f, m);
        break;
      }
    }
    if (res == null) {
      throw "color mode " + m + " is not supported";
    }
    return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
  };

  chroma.interpolate = interpolate;

  Color.prototype.interpolate = function(col2, f, m) {
    return interpolate(this, col2, f, m);
  };

  chroma.mix = interpolate;

  Color.prototype.mix = Color.prototype.interpolate;

  interpolate_rgb = function(col1, col2, f, m) {
    var xyz0, xyz1;
    xyz0 = col1._rgb;
    xyz1 = col2._rgb;
    return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['rgb', interpolate_rgb]);

  Color.prototype.luminance = function(lum, mode) {
    var cur_lum, eps, max_iter, test;
    if (mode == null) {
      mode = 'rgb';
    }
    if (!arguments.length) {
      return rgb2luminance(this._rgb);
    }
    if (lum === 0) {
      this._rgb = [0, 0, 0, this._rgb[3]];
    } else if (lum === 1) {
      this._rgb = [255, 255, 255, this._rgb[3]];
    } else {
      eps = 1e-7;
      max_iter = 20;
      test = function(l, h) {
        var lm, m;
        m = l.interpolate(h, 0.5, mode);
        lm = m.luminance();
        if (Math.abs(lum - lm) < eps || !max_iter--) {
          return m;
        }
        if (lm > lum) {
          return test(l, m);
        }
        return test(m, h);
      };
      cur_lum = rgb2luminance(this._rgb);
      this._rgb = (cur_lum > lum ? test(chroma('black'), this) : test(this, chroma('white'))).rgba();
    }
    return this;
  };

  temperature2rgb = function(kelvin) {
    var b, g, r, temp;
    temp = kelvin / 100;
    if (temp < 66) {
      r = 255;
      g = -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
      b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
    } else {
      r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
      g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
      b = 255;
    }
    return [r, g, b];
  };

  rgb2temperature = function() {
    var b, eps, g, maxTemp, minTemp, r, ref, rgb, temp;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    minTemp = 1000;
    maxTemp = 40000;
    eps = 0.4;
    while (maxTemp - minTemp > eps) {
      temp = (maxTemp + minTemp) * 0.5;
      rgb = temperature2rgb(temp);
      if ((rgb[2] / rgb[0]) >= (b / r)) {
        maxTemp = temp;
      } else {
        minTemp = temp;
      }
    }
    return round(temp);
  };

  chroma.temperature = chroma.kelvin = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['temperature']), function(){});
  };

  _input.temperature = _input.kelvin = _input.K = temperature2rgb;

  Color.prototype.temperature = function() {
    return rgb2temperature(this._rgb);
  };

  Color.prototype.kelvin = Color.prototype.temperature;

  chroma.contrast = function(a, b) {
    var l1, l2, ref, ref1;
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.luminance();
    l2 = b.luminance();
    if (l1 > l2) {
      return (l1 + 0.05) / (l2 + 0.05);
    } else {
      return (l2 + 0.05) / (l1 + 0.05);
    }
  };

  chroma.distance = function(a, b, mode) {
    var d, i, l1, l2, ref, ref1, sum_sq;
    if (mode == null) {
      mode = 'lab';
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    l1 = a.get(mode);
    l2 = b.get(mode);
    sum_sq = 0;
    for (i in l1) {
      d = (l1[i] || 0) - (l2[i] || 0);
      sum_sq += d * d;
    }
    return Math.sqrt(sum_sq);
  };

  chroma.deltaE = function(a, b, L, C) {
    var L1, L2, a1, a2, b1, b2, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc, sh, sl, t, v1, v2, v3;
    if (L == null) {
      L = 1;
    }
    if (C == null) {
      C = 1;
    }
    if ((ref = type(a)) === 'string' || ref === 'number') {
      a = new Color(a);
    }
    if ((ref1 = type(b)) === 'string' || ref1 === 'number') {
      b = new Color(b);
    }
    ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
    ref3 = b.lab(), L2 = ref3[0], a2 = ref3[1], b2 = ref3[2];
    c1 = sqrt(a1 * a1 + b1 * b1);
    c2 = sqrt(a2 * a2 + b2 * b2);
    sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1);
    sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638;
    h1 = c1 < 0.000001 ? 0.0 : (atan2(b1, a1) * 180.0) / PI;
    while (h1 < 0) {
      h1 += 360;
    }
    while (h1 >= 360) {
      h1 -= 360;
    }
    t = (h1 >= 164.0) && (h1 <= 345.0) ? 0.56 + abs(0.2 * cos((PI * (h1 + 168.0)) / 180.0)) : 0.36 + abs(0.4 * cos((PI * (h1 + 35.0)) / 180.0));
    c4 = c1 * c1 * c1 * c1;
    f = sqrt(c4 / (c4 + 1900.0));
    sh = sc * (f * t + 1.0 - f);
    delL = L1 - L2;
    delC = c1 - c2;
    delA = a1 - a2;
    delB = b1 - b2;
    dH2 = delA * delA + delB * delB - delC * delC;
    v1 = delL / (L * sl);
    v2 = delC / (C * sc);
    v3 = sh;
    return sqrt(v1 * v1 + v2 * v2 + (dH2 / (v3 * v3)));
  };

  Color.prototype.get = function(modechan) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    src = me[mode]();
    if (channel) {
      i = mode.indexOf(channel);
      if (i > -1) {
        return src[i];
      } else {
        return console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      return src;
    }
  };

  Color.prototype.set = function(modechan, value) {
    var channel, i, me, mode, ref, src;
    me = this;
    ref = modechan.split('.'), mode = ref[0], channel = ref[1];
    if (channel) {
      src = me[mode]();
      i = mode.indexOf(channel);
      if (i > -1) {
        if (type(value) === 'string') {
          switch (value.charAt(0)) {
            case '+':
              src[i] += +value;
              break;
            case '-':
              src[i] += +value;
              break;
            case '*':
              src[i] *= +(value.substr(1));
              break;
            case '/':
              src[i] /= +(value.substr(1));
              break;
            default:
              src[i] = +value;
          }
        } else {
          src[i] = value;
        }
      } else {
        console.warn('unknown channel ' + channel + ' in mode ' + mode);
      }
    } else {
      src = value;
    }
    return chroma(src, mode).alpha(me.alpha());
  };

  Color.prototype.clipped = function() {
    return this._rgb._clipped || false;
  };

  Color.prototype.alpha = function(a) {
    if (arguments.length) {
      return chroma.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
    }
    return this._rgb[3];
  };

  Color.prototype.darken = function(amount) {
    var lab, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lab = me.lab();
    lab[0] -= LAB_CONSTANTS.Kn * amount;
    return chroma.lab(lab).alpha(me.alpha());
  };

  Color.prototype.brighten = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.darken(-amount);
  };

  Color.prototype.darker = Color.prototype.darken;

  Color.prototype.brighter = Color.prototype.brighten;

  Color.prototype.saturate = function(amount) {
    var lch, me;
    if (amount == null) {
      amount = 1;
    }
    me = this;
    lch = me.lch();
    lch[1] += amount * LAB_CONSTANTS.Kn;
    if (lch[1] < 0) {
      lch[1] = 0;
    }
    return chroma.lch(lch).alpha(me.alpha());
  };

  Color.prototype.desaturate = function(amount) {
    if (amount == null) {
      amount = 1;
    }
    return this.saturate(-amount);
  };

  Color.prototype.premultiply = function() {
    var a, rgb;
    rgb = this.rgb();
    a = this.alpha();
    return chroma(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
  };

  blend = function(bottom, top, mode) {
    if (!blend[mode]) {
      throw 'unknown blend mode ' + mode;
    }
    return blend[mode](bottom, top);
  };

  blend_f = function(f) {
    return function(bottom, top) {
      var c0, c1;
      c0 = chroma(top).rgb();
      c1 = chroma(bottom).rgb();
      return chroma(f(c0, c1), 'rgb');
    };
  };

  each = function(f) {
    return function(c0, c1) {
      var i, o, out;
      out = [];
      for (i = o = 0; o <= 3; i = ++o) {
        out[i] = f(c0[i], c1[i]);
      }
      return out;
    };
  };

  normal = function(a, b) {
    return a;
  };

  multiply = function(a, b) {
    return a * b / 255;
  };

  darken = function(a, b) {
    if (a > b) {
      return b;
    } else {
      return a;
    }
  };

  lighten = function(a, b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  };

  screen = function(a, b) {
    return 255 * (1 - (1 - a / 255) * (1 - b / 255));
  };

  overlay = function(a, b) {
    if (b < 128) {
      return 2 * a * b / 255;
    } else {
      return 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
    }
  };

  burn = function(a, b) {
    return 255 * (1 - (1 - b / 255) / (a / 255));
  };

  dodge = function(a, b) {
    if (a === 255) {
      return 255;
    }
    a = 255 * (b / 255) / (1 - a / 255);
    if (a > 255) {
      return 255;
    } else {
      return a;
    }
  };

  blend.normal = blend_f(each(normal));

  blend.multiply = blend_f(each(multiply));

  blend.screen = blend_f(each(screen));

  blend.overlay = blend_f(each(overlay));

  blend.darken = blend_f(each(darken));

  blend.lighten = blend_f(each(lighten));

  blend.dodge = blend_f(each(dodge));

  blend.burn = blend_f(each(burn));

  chroma.blend = blend;

  chroma.analyze = function(data) {
    var len, o, r, val;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    for (o = 0, len = data.length; o < len; o++) {
      val = data[o];
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.scale = function(colors, positions) {
    var _classes, _colorCache, _colors, _correctLightness, _domain, _fixed, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, classifyValue, f, getClass, getColor, resetCache, setColors, tmap;
    _mode = 'rgb';
    _nacol = chroma('#ccc');
    _spread = 0;
    _fixed = false;
    _domain = [0, 1];
    _pos = [];
    _padding = [0, 0];
    _classes = false;
    _colors = [];
    _out = false;
    _min = 0;
    _max = 1;
    _correctLightness = false;
    _colorCache = {};
    _useCache = true;
    setColors = function(colors) {
      var c, col, o, ref, ref1, w;
      if (colors == null) {
        colors = ['#fff', '#000'];
      }
      if ((colors != null) && type(colors) === 'string' && (chroma.brewer != null)) {
        colors = chroma.brewer[colors] || chroma.brewer[colors.toLowerCase()] || colors;
      }
      if (type(colors) === 'array') {
        colors = colors.slice(0);
        for (c = o = 0, ref = colors.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
          col = colors[c];
          if (type(col) === "string") {
            colors[c] = chroma(col);
          }
        }
        _pos.length = 0;
        for (c = w = 0, ref1 = colors.length - 1; 0 <= ref1 ? w <= ref1 : w >= ref1; c = 0 <= ref1 ? ++w : --w) {
          _pos.push(c / (colors.length - 1));
        }
      }
      resetCache();
      return _colors = colors;
    };
    getClass = function(value) {
      var i, n;
      if (_classes != null) {
        n = _classes.length - 1;
        i = 0;
        while (i < n && value >= _classes[i]) {
          i++;
        }
        return i - 1;
      }
      return 0;
    };
    tmap = function(t) {
      return t;
    };
    classifyValue = function(value) {
      var i, maxc, minc, n, val;
      val = value;
      if (_classes.length > 2) {
        n = _classes.length - 1;
        i = getClass(value);
        minc = _classes[0] + (_classes[1] - _classes[0]) * (0 + _spread * 0.5);
        maxc = _classes[n - 1] + (_classes[n] - _classes[n - 1]) * (1 - _spread * 0.5);
        val = _min + ((_classes[i] + (_classes[i + 1] - _classes[i]) * 0.5 - minc) / (maxc - minc)) * (_max - _min);
      }
      return val;
    };
    getColor = function(val, bypassMap) {
      var c, col, i, k, o, p, ref, t;
      if (bypassMap == null) {
        bypassMap = false;
      }
      if (isNaN(val)) {
        return _nacol;
      }
      if (!bypassMap) {
        if (_classes && _classes.length > 2) {
          c = getClass(val);
          t = c / (_classes.length - 2);
          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
        } else if (_max !== _min) {
          t = (val - _min) / (_max - _min);
          t = _padding[0] + (t * (1 - _padding[0] - _padding[1]));
          t = Math.min(1, Math.max(0, t));
        } else {
          t = 1;
        }
      } else {
        t = val;
      }
      if (!bypassMap) {
        t = tmap(t);
      }
      k = Math.floor(t * 10000);
      if (_useCache && _colorCache[k]) {
        col = _colorCache[k];
      } else {
        if (type(_colors) === 'array') {
          for (i = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {
            p = _pos[i];
            if (t <= p) {
              col = _colors[i];
              break;
            }
            if (t >= p && i === _pos.length - 1) {
              col = _colors[i];
              break;
            }
            if (t > p && t < _pos[i + 1]) {
              t = (t - p) / (_pos[i + 1] - p);
              col = chroma.interpolate(_colors[i], _colors[i + 1], t, _mode);
              break;
            }
          }
        } else if (type(_colors) === 'function') {
          col = _colors(t);
        }
        if (_useCache) {
          _colorCache[k] = col;
        }
      }
      return col;
    };
    resetCache = function() {
      return _colorCache = {};
    };
    setColors(colors);
    f = function(v) {
      var c;
      c = chroma(getColor(v));
      if (_out && c[_out]) {
        return c[_out]();
      } else {
        return c;
      }
    };
    f.classes = function(classes) {
      var d;
      if (classes != null) {
        if (type(classes) === 'array') {
          _classes = classes;
          _domain = [classes[0], classes[classes.length - 1]];
        } else {
          d = chroma.analyze(_domain);
          if (classes === 0) {
            _classes = [d.min, d.max];
          } else {
            _classes = chroma.limits(d, 'e', classes);
          }
        }
        return f;
      }
      return _classes;
    };
    f.domain = function(domain) {
      var c, d, k, len, o, ref, w;
      if (!arguments.length) {
        return _domain;
      }
      _min = domain[0];
      _max = domain[domain.length - 1];
      _pos = [];
      k = _colors.length;
      if (domain.length === k && _min !== _max) {
        for (o = 0, len = domain.length; o < len; o++) {
          d = domain[o];
          _pos.push((d - _min) / (_max - _min));
        }
      } else {
        for (c = w = 0, ref = k - 1; 0 <= ref ? w <= ref : w >= ref; c = 0 <= ref ? ++w : --w) {
          _pos.push(c / (k - 1));
        }
      }
      _domain = [_min, _max];
      return f;
    };
    f.mode = function(_m) {
      if (!arguments.length) {
        return _mode;
      }
      _mode = _m;
      resetCache();
      return f;
    };
    f.range = function(colors, _pos) {
      setColors(colors, _pos);
      return f;
    };
    f.out = function(_o) {
      _out = _o;
      return f;
    };
    f.spread = function(val) {
      if (!arguments.length) {
        return _spread;
      }
      _spread = val;
      return f;
    };
    f.correctLightness = function(v) {
      if (v == null) {
        v = true;
      }
      _correctLightness = v;
      resetCache();
      if (_correctLightness) {
        tmap = function(t) {
          var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
          L0 = getColor(0, true).lab()[0];
          L1 = getColor(1, true).lab()[0];
          pol = L0 > L1;
          L_actual = getColor(t, true).lab()[0];
          L_ideal = L0 + (L1 - L0) * t;
          L_diff = L_actual - L_ideal;
          t0 = 0;
          t1 = 1;
          max_iter = 20;
          while (Math.abs(L_diff) > 1e-2 && max_iter-- > 0) {
            (function() {
              if (pol) {
                L_diff *= -1;
              }
              if (L_diff < 0) {
                t0 = t;
                t += (t1 - t) * 0.5;
              } else {
                t1 = t;
                t += (t0 - t) * 0.5;
              }
              L_actual = getColor(t, true).lab()[0];
              return L_diff = L_actual - L_ideal;
            })();
          }
          return t;
        };
      } else {
        tmap = function(t) {
          return t;
        };
      }
      return f;
    };
    f.padding = function(p) {
      if (p != null) {
        if (type(p) === 'number') {
          p = [p, p];
        }
        _padding = p;
        return f;
      } else {
        return _padding;
      }
    };
    f.colors = function(numColors, out) {
      var dd, dm, i, o, ref, result, results, samples, w;
      if (arguments.length < 2) {
        out = 'hex';
      }
      result = [];
      if (arguments.length === 0) {
        result = _colors.slice(0);
      } else if (numColors === 1) {
        result = [f(0.5)];
      } else if (numColors > 1) {
        dm = _domain[0];
        dd = _domain[1] - dm;
        result = (function() {
          results = [];
          for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--){ results.push(o); }
          return results;
        }).apply(this).map(function(i) {
          return f(dm + i / (numColors - 1) * dd);
        });
      } else {
        colors = [];
        samples = [];
        if (_classes && _classes.length > 2) {
          for (i = w = 1, ref = _classes.length; 1 <= ref ? w < ref : w > ref; i = 1 <= ref ? ++w : --w) {
            samples.push((_classes[i - 1] + _classes[i]) * 0.5);
          }
        } else {
          samples = _domain;
        }
        result = samples.map(function(v) {
          return f(v);
        });
      }
      if (chroma[out]) {
        result = result.map(function(c) {
          return c[out]();
        });
      }
      return result;
    };
    f.cache = function(c) {
      if (c != null) {
        return _useCache = c;
      } else {
        return _useCache;
      }
    };
    return f;
  };

  if (chroma.scales == null) {
    chroma.scales = {};
  }

  chroma.scales.cool = function() {
    return chroma.scale([chroma.hsl(180, 1, .9), chroma.hsl(250, .7, .4)]);
  };

  chroma.scales.hot = function() {
    return chroma.scale(['#000', '#f00', '#ff0', '#fff'], [0, .25, .75, 1]).mode('rgb');
  };

  chroma.analyze = function(data, key, filter) {
    var add, k, len, o, r, val, visit;
    r = {
      min: Number.MAX_VALUE,
      max: Number.MAX_VALUE * -1,
      sum: 0,
      values: [],
      count: 0
    };
    if (filter == null) {
      filter = function() {
        return true;
      };
    }
    add = function(val) {
      if ((val != null) && !isNaN(val)) {
        r.values.push(val);
        r.sum += val;
        if (val < r.min) {
          r.min = val;
        }
        if (val > r.max) {
          r.max = val;
        }
        r.count += 1;
      }
    };
    visit = function(val, k) {
      if (filter(val, k)) {
        if ((key != null) && type(key) === 'function') {
          return add(key(val));
        } else if ((key != null) && type(key) === 'string' || type(key) === 'number') {
          return add(val[key]);
        } else {
          return add(val);
        }
      }
    };
    if (type(data) === 'array') {
      for (o = 0, len = data.length; o < len; o++) {
        val = data[o];
        visit(val);
      }
    } else {
      for (k in data) {
        val = data[k];
        visit(val, k);
      }
    }
    r.domain = [r.min, r.max];
    r.limits = function(mode, num) {
      return chroma.limits(r, mode, num);
    };
    return r;
  };

  chroma.limits = function(data, mode, num) {
    var aa, ab, ac, ad, ae, af, ag, ah, ai, aj, ak, al, am, assignments, best, centroids, cluster, clusterSizes, dist, i, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, sum, tmpKMeansBreaks, v, value, values, w;
    if (mode == null) {
      mode = 'equal';
    }
    if (num == null) {
      num = 7;
    }
    if (type(data) === 'array') {
      data = chroma.analyze(data);
    }
    min = data.min;
    max = data.max;
    sum = data.sum;
    values = data.values.sort(function(a, b) {
      return a - b;
    });
    if (num === 1) {
      return [min, max];
    }
    limits = [];
    if (mode.substr(0, 1) === 'c') {
      limits.push(min);
      limits.push(max);
    }
    if (mode.substr(0, 1) === 'e') {
      limits.push(min);
      for (i = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i = 1 <= ref ? ++o : --o) {
        limits.push(min + (i / num) * (max - min));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'l') {
      if (min <= 0) {
        throw 'Logarithmic scales are only possible for values > 0';
      }
      min_log = Math.LOG10E * log(min);
      max_log = Math.LOG10E * log(max);
      limits.push(min);
      for (i = w = 1, ref1 = num - 1; 1 <= ref1 ? w <= ref1 : w >= ref1; i = 1 <= ref1 ? ++w : --w) {
        limits.push(pow(10, min_log + (i / num) * (max_log - min_log)));
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'q') {
      limits.push(min);
      for (i = aa = 1, ref2 = num - 1; 1 <= ref2 ? aa <= ref2 : aa >= ref2; i = 1 <= ref2 ? ++aa : --aa) {
        p = (values.length - 1) * i / num;
        pb = floor(p);
        if (pb === p) {
          limits.push(values[pb]);
        } else {
          pr = p - pb;
          limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
        }
      }
      limits.push(max);
    } else if (mode.substr(0, 1) === 'k') {

      /*
      implementation based on
      http://code.google.com/p/figue/source/browse/trunk/figue.js#336
      simplified for 1-d input values
       */
      n = values.length;
      assignments = new Array(n);
      clusterSizes = new Array(num);
      repeat = true;
      nb_iters = 0;
      centroids = null;
      centroids = [];
      centroids.push(min);
      for (i = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i = 1 <= ref3 ? ++ab : --ab) {
        centroids.push(min + (i / num) * (max - min));
      }
      centroids.push(max);
      while (repeat) {
        for (j = ac = 0, ref4 = num - 1; 0 <= ref4 ? ac <= ref4 : ac >= ref4; j = 0 <= ref4 ? ++ac : --ac) {
          clusterSizes[j] = 0;
        }
        for (i = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i = 0 <= ref5 ? ++ad : --ad) {
          value = values[i];
          mindist = Number.MAX_VALUE;
          for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
            dist = abs(centroids[j] - value);
            if (dist < mindist) {
              mindist = dist;
              best = j;
            }
          }
          clusterSizes[best]++;
          assignments[i] = best;
        }
        newCentroids = new Array(num);
        for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
          newCentroids[j] = null;
        }
        for (i = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i = 0 <= ref8 ? ++ag : --ag) {
          cluster = assignments[i];
          if (newCentroids[cluster] === null) {
            newCentroids[cluster] = values[i];
          } else {
            newCentroids[cluster] += values[i];
          }
        }
        for (j = ah = 0, ref9 = num - 1; 0 <= ref9 ? ah <= ref9 : ah >= ref9; j = 0 <= ref9 ? ++ah : --ah) {
          newCentroids[j] *= 1 / clusterSizes[j];
        }
        repeat = false;
        for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
          if (newCentroids[j] !== centroids[i]) {
            repeat = true;
            break;
          }
        }
        centroids = newCentroids;
        nb_iters++;
        if (nb_iters > 200) {
          repeat = false;
        }
      }
      kClusters = {};
      for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
        kClusters[j] = [];
      }
      for (i = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i = 0 <= ref12 ? ++ak : --ak) {
        cluster = assignments[i];
        kClusters[cluster].push(values[i]);
      }
      tmpKMeansBreaks = [];
      for (j = al = 0, ref13 = num - 1; 0 <= ref13 ? al <= ref13 : al >= ref13; j = 0 <= ref13 ? ++al : --al) {
        tmpKMeansBreaks.push(kClusters[j][0]);
        tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
      }
      tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b) {
        return a - b;
      });
      limits.push(tmpKMeansBreaks[0]);
      for (i = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i = am += 2) {
        v = tmpKMeansBreaks[i];
        if (!isNaN(v) && limits.indexOf(v) === -1) {
          limits.push(v);
        }
      }
    }
    return limits;
  };

  hsi2rgb = function(h, s, i) {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
     */
    var args, b, g, r;
    args = unpack(arguments);
    h = args[0], s = args[1], i = args[2];
    if (isNaN(h)) {
      h = 0;
    }
    h /= 360;
    if (h < 1 / 3) {
      b = (1 - s) / 3;
      r = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      g = 1 - (b + r);
    } else if (h < 2 / 3) {
      h -= 1 / 3;
      r = (1 - s) / 3;
      g = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      b = 1 - (r + g);
    } else {
      h -= 2 / 3;
      g = (1 - s) / 3;
      b = (1 + s * cos(TWOPI * h) / cos(PITHIRD - TWOPI * h)) / 3;
      r = 1 - (g + b);
    }
    r = limit(i * r * 3);
    g = limit(i * g * 3);
    b = limit(i * b * 3);
    return [r * 255, g * 255, b * 255, args.length > 3 ? args[3] : 1];
  };

  rgb2hsi = function() {

    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
     */
    var b, g, h, i, min, r, ref, s;
    ref = unpack(arguments), r = ref[0], g = ref[1], b = ref[2];
    TWOPI = Math.PI * 2;
    r /= 255;
    g /= 255;
    b /= 255;
    min = Math.min(r, g, b);
    i = (r + g + b) / 3;
    s = 1 - min / i;
    if (s === 0) {
      h = 0;
    } else {
      h = ((r - g) + (r - b)) / 2;
      h /= Math.sqrt((r - g) * (r - g) + (r - b) * (g - b));
      h = Math.acos(h);
      if (b > g) {
        h = TWOPI - h;
      }
      h /= TWOPI;
    }
    return [h * 360, s, i];
  };

  chroma.hsi = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Color, slice.call(arguments).concat(['hsi']), function(){});
  };

  _input.hsi = hsi2rgb;

  Color.prototype.hsi = function() {
    return rgb2hsi(this._rgb);
  };

  interpolate_hsx = function(col1, col2, f, m) {
    var dh, hue, hue0, hue1, lbv, lbv0, lbv1, res, sat, sat0, sat1, xyz0, xyz1;
    if (m === 'hsl') {
      xyz0 = col1.hsl();
      xyz1 = col2.hsl();
    } else if (m === 'hsv') {
      xyz0 = col1.hsv();
      xyz1 = col2.hsv();
    } else if (m === 'hcg') {
      xyz0 = col1.hcg();
      xyz1 = col2.hcg();
    } else if (m === 'hsi') {
      xyz0 = col1.hsi();
      xyz1 = col2.hsi();
    } else if (m === 'lch' || m === 'hcl') {
      m = 'hcl';
      xyz0 = col1.hcl();
      xyz1 = col2.hcl();
    }
    if (m.substr(0, 1) === 'h') {
      hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
      hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
    }
    if (!isNaN(hue0) && !isNaN(hue1)) {
      if (hue1 > hue0 && hue1 - hue0 > 180) {
        dh = hue1 - (hue0 + 360);
      } else if (hue1 < hue0 && hue0 - hue1 > 180) {
        dh = hue1 + 360 - hue0;
      } else {
        dh = hue1 - hue0;
      }
      hue = hue0 + f * dh;
    } else if (!isNaN(hue0)) {
      hue = hue0;
      if ((lbv1 === 1 || lbv1 === 0) && m !== 'hsv') {
        sat = sat0;
      }
    } else if (!isNaN(hue1)) {
      hue = hue1;
      if ((lbv0 === 1 || lbv0 === 0) && m !== 'hsv') {
        sat = sat1;
      }
    } else {
      hue = Number.NaN;
    }
    if (sat == null) {
      sat = sat0 + f * (sat1 - sat0);
    }
    lbv = lbv0 + f * (lbv1 - lbv0);
    return res = chroma[m](hue, sat, lbv);
  };

  _interpolators = _interpolators.concat((function() {
    var len, o, ref, results;
    ref = ['hsv', 'hsl', 'hsi', 'hcl', 'lch', 'hcg'];
    results = [];
    for (o = 0, len = ref.length; o < len; o++) {
      m = ref[o];
      results.push([m, interpolate_hsx]);
    }
    return results;
  })());

  interpolate_num = function(col1, col2, f, m) {
    var n1, n2;
    n1 = col1.num();
    n2 = col2.num();
    return chroma.num(n1 + (n2 - n1) * f, 'num');
  };

  _interpolators.push(['num', interpolate_num]);

  interpolate_lab = function(col1, col2, f, m) {
    var res, xyz0, xyz1;
    xyz0 = col1.lab();
    xyz1 = col2.lab();
    return res = new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m);
  };

  _interpolators.push(['lab', interpolate_lab]);

}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)(module)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = {
	"Margin": {
		"width": 1,
		"height": 1,
		"west": 5,
		"north": 5,
		"east": 2,
		"south": 2,
		"wStudy": 0.5,
		"hStudy": 0.5
	},
	"Planes": {
		"Information": {
			"spec": "Info",
			"intent": "SelectPlane",
			"nrow": 36,
			"ncol": 36,
			"groups": {},
			"book": "doc/book/muse/4.Information/",
			"prev": "",
			"next": "Augment",
			"cube": {
				"z": 105,
				"zc": 90
			},
			"prac": {
				"faces": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"pracs": []
			},
			"tier": {
				"hexes": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"studies": []
			},
			"convey": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"flow": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"conduit": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"icon": "fa-link",
			"matter": "Solid",
			"water": "Ice",
			"cynefin": "Simple"
		},
		"Augment": {
			"spec": "Augm",
			"intent": "SelectPlane",
			"nrow": 36,
			"ncol": 36,
			"groups": {},
			"book": "doc/book/muse/4.Augment/",
			"prev": "Information",
			"next": "Knowledge",
			"cube": {
				"z": 105,
				"zc": 90
			},
			"prac": {
				"faces": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"pracs": []
			},
			"tier": {
				"hexes": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"studies": []
			},
			"convey": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"flow": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"conduit": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"icon": "fa-link",
			"matter": "Solid",
			"water": "Ice",
			"cynefin": "Simple"
		},
		"DataScience": {
			"spec": "Data",
			"intent": "SelectPlane",
			"nrow": 48,
			"ncol": 36,
			"book": "doc/book/mach/",
			"outline": "Desc",
			"groupsx": {
				"Technique": {
					"name": "Technique",
					"icon": "fa-bar-chart",
					"css": "ikw-group",
					"gells": [
						1,
						36,
						1,
						48
					],
					"intent": "SelectGroup"
				}
			},
			"prev": "Augment",
			"next": "Knowledge",
			"cube": {
				"z": 75,
				"zc": 60
			},
			"prac": {
				"faces": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"pracs": []
			},
			"tier": {
				"hexes": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"studies": []
			},
			"convey": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"flow": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"conduit": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"icon": "fa-link",
			"matter": "SolidLiquidPhase",
			"water": "IceCubes",
			"cynefin": "Elaborate"
		},
		"Knowledge": {
			"spec": "Know",
			"intent": "SelectPlane",
			"nrow": 36,
			"ncol": 36,
			"groups": {},
			"book": "doc/book/muse/6.Knowledge/",
			"prev": "Augment",
			"next": "Wisdom",
			"cube": {
				"z": 45,
				"zc": 30
			},
			"prac": {
				"faces": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"pracs": []
			},
			"tier": {
				"hexes": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"studies": []
			},
			"convey": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"flow": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"conduit": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"icon": "fa-link",
			"matter": "Liquid",
			"water": "Water",
			"cynefin": "Complicated"
		},
		"Wisdom": {
			"spec": "Wise",
			"intent": "SelectPlane",
			"nrow": 36,
			"ncol": 36,
			"groups": {},
			"book": "doc/book/muse/7.Wisdom/",
			"prev": "Knowledge",
			"next": "",
			"cube": {
				"z": 15,
				"zc": 0
			},
			"prac": {
				"faces": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"pracs": []
			},
			"tier": {
				"hexes": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"studies": []
			},
			"convey": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"flow": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"conduit": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"icon": "fa-link",
			"matter": "Crystal",
			"water": "Snowflake",
			"cynefin": "Complex"
		},
		"Hues": {
			"spec": "Hues",
			"intent": "SelectPlane",
			"nrow": 36,
			"ncol": 36,
			"book": "",
			"prev": "Wisdom",
			"next": "",
			"cube": {
				"z": 0,
				"zc": 0
			},
			"prac": {
				"faces": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"pracs": []
			},
			"tier": {
				"hexes": [],
				"rgbs": [],
				"centers": [],
				"icons": [],
				"studies": []
			},
			"convey": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"flow": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"conduit": {
				"rects": [],
				"rgbs": [],
				"centers": [],
				"begs": [],
				"ends": []
			},
			"icon": "fa-link",
			"matter": "Gas",
			"water": "Vapor",
			"cynefin": "Chaotic"
		}
	},
	"Rows": {
		"Learn": {
			"name": "Learn",
			"book": "doc/book/muse/1.Concepts/",
			"north": "",
			"south": "Do",
			"icon": "fa-book",
			"css": "ikw-row",
			"cells": [
				1,
				36,
				1,
				12
			],
			"dells": [
				1,
				36,
				1,
				12
			],
			"intent": "SelectRow",
			"perspectives": [
				"Context",
				"Concept"
			],
			"cube": {
				"y": 100,
				"flow": "north",
				"yc": 80
			}
		},
		"Do": {
			"name": "Do",
			"book": "doc/book/muse/1.Concepts/",
			"north": "Learn",
			"south": "Share",
			"icon": "fa-list",
			"css": "ikw-row",
			"cells": [
				1,
				36,
				13,
				12
			],
			"dells": [
				1,
				36,
				13,
				24
			],
			"intent": "SelectRow",
			"perspectives": [
				"Architect",
				"Engineer",
				"Construct"
			],
			"cube": {
				"y": 60,
				"flow": "south",
				"yc": 40
			}
		},
		"Share": {
			"name": "Share",
			"book": "doc/book/muse/1.Concepts/",
			"north": "Do",
			"south": "",
			"icon": "fa-share-alt",
			"css": "ikw-row",
			"cells": [
				1,
				36,
				25,
				12
			],
			"dells": [
				1,
				36,
				37,
				12
			],
			"intent": "SelectRow",
			"perspectives": [
				"Transition",
				"Adminstrate"
			],
			"cube": {
				"y": 20,
				"flow": "none",
				"yc": 0
			}
		}
	},
	"Columns": {
		"Embrace": {
			"name": "Embrace",
			"book": "doc/book/muse/1.Concepts/",
			"west": "",
			"east": "Innovate",
			"icon": "fa-link",
			"css": "ikw-col",
			"cells": [
				1,
				12,
				1,
				36
			],
			"dells": [
				1,
				12,
				1,
				48
			],
			"intent": "SelectCol",
			"w": 107,
			"fab": "Feature",
			"plan": "Tactics",
			"dimensions": [
				"Behavior"
			],
			"cube": {
				"x": 20,
				"convey": "west",
				"xc": 40,
				"hsc": {
					"h": 90,
					"s": 60,
					"v": 90
				}
			}
		},
		"Innovate": {
			"name": "Innovate",
			"book": "doc/book/muse/1.Concepts/",
			"west": "Embrace",
			"east": "Encourage",
			"icon": "fa-bolt",
			"css": "ikw-col",
			"cells": [
				13,
				12,
				1,
				36
			],
			"dells": [
				13,
				12,
				1,
				48
			],
			"intent": "SelectCol",
			"w": 96,
			"fab": "Advantage",
			"plan": "Execute",
			"dimensions": [
				"People",
				"Service",
				"Data",
				"Network"
			],
			"cube": {
				"x": 60,
				"convey": "east",
				"xc": 80,
				"hsc": {
					"h": 0,
					"s": 60,
					"v": 90
				}
			}
		},
		"Encourage": {
			"name": "Encourage",
			"book": "doc/book/muse/1.Concepts/",
			"west": "Innovate",
			"east": "",
			"icon": "fa-music",
			"css": "ikw-col",
			"cells": [
				25,
				12,
				1,
				36
			],
			"dells": [
				25,
				12,
				1,
				48
			],
			"intent": "SelectCol",
			"w": 122,
			"fab": "Benefit",
			"plan": "Strategy",
			"dimensions": [
				"Motivation"
			],
			"cube": {
				"x": 100,
				"convey": "none",
				"xc": 0,
				"hsc": {
					"h": 0,
					"s": 0,
					"v": 0
				}
			}
		}
	},
	"None": {
		"name": "None",
		"hsv": [
			210,
			60,
			90
		],
		"column": "Embrace",
		"row": "Learn",
		"plane": "Information",
		"icon": "fa-group",
		"cells": [
			1,
			12,
			1,
			12
		]
	},
	"NoneStudy": {
		"name": "None",
		"practice": "None",
		"dir": "west",
		"hsv": [
			93,
			57,
			80
		],
		"icon": "fa-circle"
	},
	"Concerns": {
		"Internal": {
			"hsv": [
				210,
				70,
				70
			],
			"dir": "north",
			"dimension": "Behavior",
			"zachman": "Time",
			"muse": "Embrace"
		},
		"Activity": {
			"hsv": [
				210,
				90,
				90
			],
			"dir": "west",
			"dimension": "Behavior",
			"zachman": "Time",
			"muse": "Embrace"
		},
		"External": {
			"hsv": [
				210,
				80,
				80
			],
			"dir": "south",
			"dimension": "Behavior",
			"zachman": "Time",
			"muse": "Embrace"
		},
		"Refine": {
			"hsv": [
				220,
				90,
				70
			],
			"dir": "east",
			"dimension": "Behavior",
			"zachman": "Time",
			"muse": "Embrace"
		},
		"People": {
			"hsv": [
				180,
				60,
				90
			],
			"dir": "west",
			"dimension": "People",
			"zachman": "People",
			"muse": "Innovate"
		},
		"Service": {
			"hsv": [
				90,
				60,
				90
			],
			"dir": "north",
			"dimension": "Service",
			"zachman": "Function",
			"muse": "Innovate"
		},
		"Data": {
			"hsv": [
				45,
				60,
				90
			],
			"dir": "east",
			"dimension": "Data",
			"zachman": "Data",
			"muse": "Innovate"
		},
		"Network": {
			"hsv": [
				60,
				60,
				90
			],
			"dir": "south",
			"dimension": "Network",
			"zachman": "Network",
			"muse": "Innovate"
		},
		"Vision": {
			"hsv": [
				255,
				70,
				70
			],
			"dir": "north",
			"dimension": "Motivation",
			"zachman": "Motivation",
			"muse": "Encourage"
		},
		"Method": {
			"hsv": [
				255,
				70,
				90
			],
			"dir": "east",
			"dimension": "Motivation",
			"zachman": "Motivation",
			"muse": "Encourage"
		},
		"Mission": {
			"hsv": [
				255,
				70,
				80
			],
			"dir": "south",
			"dimension": "Motivation",
			"zachman": "Motivation",
			"muse": "Encourage"
		},
		"Result": {
			"hsv": [
				265,
				70,
				90
			],
			"dir": "west",
			"dimension": "Motivation",
			"zachman": "Motivation",
			"muse": "Encourage"
		}
	},
	"Dimensions": {
		"Behavior": {
			"inquisitive": "When",
			"zachman": "Time",
			"muse": "Embrace"
		},
		"People": {
			"inquisitive": "Who",
			"zachman": "People",
			"muse": "Innovate"
		},
		"Service": {
			"inquisitive": "How",
			"zachman": "Function",
			"muse": "Innovate"
		},
		"Data": {
			"inquisitive": "What",
			"zachman": "Data",
			"muse": "Innovate"
		},
		"Network": {
			"inquisitive": "Where",
			"zachman": "Network",
			"muse": "Innovate"
		},
		"Motivation": {
			"inquisitive": "Why",
			"zachman": "Motivation",
			"muse": "Encourage"
		}
	},
	"Perspectivess": {
		"Context": {
			"zachman": "Planner",
			"muse": "Learn"
		},
		"Concept": {
			"zachman": "Owner",
			"muse": "Learn"
		},
		"Architect": {
			"zachman": "System",
			"muse": "Do"
		},
		"Engineer": {
			"zachman": "Designer",
			"muse": "Do"
		},
		"Construct": {
			"zachman": "Contractor",
			"muse": "Do"
		},
		"Transition": {
			"zachman": "none",
			"muse": "Share"
		},
		"Adminstrate": {
			"zachman": "Function",
			"muse": "Share"
		}
	}
};

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = {
	"Collaborate": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Learn",
		"plane": "Information",
		"icon": "fa-group",
		"cells": [
			1,
			12,
			1,
			12
		],
		"Request": {
			"dir": "west",
			"icon": "fa-envelope-square",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Charter": {
			"dir": "north",
			"icon": "fa-link",
			"hsv": [
				195,
				90,
				90
			],
			"ref": "BMG"
		},
		"Team": {
			"dir": "east",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-users",
			"ref": "MTG",
			"bmg": "Resources",
			"Expert": {
				"icon": "fa-link"
			},
			"Product": {
				"icon": "fa-link"
			},
			"Partner": {
				"icon": "fa-link"
			}
		},
		"Kanban": {
			"dir": "south",
			"icon": "fa-tasks",
			"hsv": [
				90,
				90,
				90
			],
			"ref": "BMG"
		}
	},
	"Product": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Learn",
		"plane": "Information",
		"icon": "fa-empire",
		"cells": [
			13,
			12,
			1,
			12
		],
		"Entitlement": {
			"dir": "west",
			"icon": "fa-child",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Proposition": {
			"dir": "north",
			"icon": "fa-lightbulb-o",
			"hsv": [
				75,
				90,
				90
			]
		},
		"Portfolio": {
			"dir": "south",
			"icon": "fa-briefcase",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Document": {
			"dir": "east",
			"icon": "fa-dropbox",
			"hsv": [
				30,
				90,
				90
			]
		}
	},
	"Discover": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Learn",
		"plane": "Information",
		"icon": "fa-sun-o",
		"cells": [
			25,
			12,
			1,
			12
		],
		"Community": {
			"dir": "west",
			"icon": "fa-user",
			"hsv": [
				195,
				90,
				90
			],
			"ref": "BMG",
			"Customer": {
				"icon": "fa-link",
				"ref": "BMG"
			},
			"Channel": {
				"icon": "fa-link",
				"ref": "BMG"
			},
			"Relate": {
				"icon": "fa-heart",
				"ref": "BMG"
			},
			"Market": {
				"icon": "fa-heart"
			}
		},
		"Vision": {
			"dir": "north",
			"icon": "fa-heart",
			"hsv": [
				75,
				90,
				90
			],
			"ref": "BMG",
			"Culture": {
				"icon": "fa-link",
				"Norms": {
					"icon": "fa-link"
				},
				"Traditions": {
					"icon": "fa-link"
				},
				"Behaviors": {
					"icon": "fa-link"
				}
			},
			"Values": {
				"icon": "fa-link",
				"Principles": {
					"icon": "fa-link"
				}
			},
			"Mission": {
				"icon": "fa-link",
				"Charters": {
					"icon": "fa-link"
				}
			}
		},
		"Connect": {
			"dir": "east",
			"icon": "fa-link",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Assume": {
			"dir": "south",
			"icon": "fa-list-alt",
			"hsv": [
				90,
				90,
				90
			],
			"ref": "BMG"
		}
	},
	"Adapt": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Do",
		"plane": "Information",
		"icon": "fa-spinner",
		"cells": [
			1,
			12,
			13,
			12
		],
		"Feature": {
			"dir": "west",
			"icon": "fa-star",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Status": {
			"dir": "north",
			"icon": "fa-sitemap",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Component": {
			"dir": "east",
			"icon": "fa-cube",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Acceptance": {
			"dir": "south",
			"icon": "fa-trophy",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"OpenSource": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Do",
		"plane": "Information",
		"icon": "fa-gears",
		"cells": [
			13,
			12,
			13,
			12
		],
		"UI": {
			"dir": "west",
			"icon": "fa-desktop",
			"hsv": [
				195,
				90,
				90
			],
			"rm": "ARM_Apps"
		},
		"Service": {
			"dir": "north",
			"icon": "fa-bars",
			"hsv": [
				90,
				90,
				90
			],
			"rm": "ARM_Systems"
		},
		"Cloud": {
			"dir": "south",
			"icon": "fa-cloud",
			"hsv": [
				60,
				90,
				90
			],
			"rm": "DRM"
		},
		"Database": {
			"dir": "east",
			"icon": "fa-database",
			"hsv": [
				30,
				90,
				90
			],
			"rm": "IRM"
		}
	},
	"Benefit": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Do",
		"plane": "Information",
		"icon": "fa-bar-chart-o",
		"cells": [
			25,
			12,
			13,
			12
		],
		"Patterns": {
			"dir": "west",
			"icon": "fa-align-left",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Quantify": {
			"dir": "north",
			"icon": "fa-bar-chart",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Risk": {
			"dir": "east",
			"icon": "fa-wheelchair-alt",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Review": {
			"dir": "south",
			"icon": "fa-thumbs-up",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Change": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Share",
		"plane": "Information",
		"icon": "fa-refresh",
		"cells": [
			1,
			12,
			25,
			12
		],
		"Transition": {
			"dir": "west",
			"icon": "fa-random",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Test": {
			"dir": "north",
			"icon": "fa-stethoscope",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Deploy": {
			"dir": "east",
			"icon": "fa-server",
			"hsv": [
				45,
				90,
				90
			],
			"System": {
				"icon": "fa-server"
			},
			"Config": {
				"icon": "fa-cogs"
			}
		},
		"Maintain": {
			"dir": "south",
			"icon": "fa-cogs",
			"hsv": [
				90,
				90,
				90
			]
		}
	},
	"Deliver": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Share",
		"plane": "Information",
		"icon": "fa-truck",
		"cells": [
			13,
			12,
			25,
			12
		],
		"Support": {
			"dir": "west",
			"icon": "fa-life-ring",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Network": {
			"dir": "north",
			"icon": "fa-globe",
			"hsv": [
				60,
				90,
				90
			],
			"rm": "SRM"
		},
		"Warehouse": {
			"dir": "east",
			"icon": "fa-cubes",
			"hsv": [
				30,
				90,
				90
			]
		},
		"Security": {
			"dir": "south",
			"icon": "fa-lock",
			"hsv": [
				0,
				90,
				90
			],
			"rm": "IRM"
		}
	},
	"Govern": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Share",
		"plane": "Information",
		"icon": "fa-compass",
		"cells": [
			25,
			12,
			25,
			12
		],
		"Asset": {
			"dir": "west",
			"icon": "fa-money",
			"hsv": [
				30,
				90,
				90
			]
		},
		"Maturity": {
			"dir": "north",
			"icon": "fa-anchor",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Comply": {
			"dir": "east",
			"icon": "fa-legal",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Consider": {
			"dir": "south",
			"icon": "fa-headphones",
			"hsv": [
				195,
				90,
				90
			]
		}
	}
};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = {
	"Engage": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Learn",
		"plane": "Augment",
		"icon": "fa-handshake-o",
		"cells": [
			1,
			12,
			1,
			12
		],
		"Scenario": {
			"dir": "west",
			"icon": "fa-refresh",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Ethics": {
			"dir": "north",
			"icon": "fa-legal",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Group": {
			"dir": "east",
			"icon": "fa-users",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Purpose": {
			"dir": "south",
			"icon": "fa-snowflake-o",
			"hsv": [
				90,
				90,
				90
			]
		}
	},
	"Domain": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Learn",
		"plane": "Augment",
		"icon": "fa-flask",
		"cells": [
			13,
			12,
			1,
			12
		],
		"Tools": {
			"dir": "west",
			"icon": "fa-wrench",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Inquiry": {
			"dir": "north",
			"icon": "fa-question-circle",
			"hsv": [
				75,
				90,
				90
			]
		},
		"Schema": {
			"dir": "east",
			"icon": "fa-sitemap",
			"hsv": [
				30,
				90,
				90
			]
		},
		"Pipeline": {
			"dir": "south",
			"icon": "fa-sliders",
			"hsv": [
				90,
				90,
				90
			]
		}
	},
	"Insight": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Learn",
		"plane": "Augment",
		"icon": "fa-sun-o",
		"cells": [
			25,
			12,
			1,
			12
		],
		"Intuition": {
			"dir": "west",
			"icon": "fa-lightbulb-o",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Theorize": {
			"dir": "north",
			"icon": "fa-graduation-cap",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Choose": {
			"dir": "east",
			"icon": "fa-code-fork",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Uncertainty": {
			"dir": "south",
			"icon": "fa-low-vision",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Guide": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Do",
		"plane": "Augment",
		"icon": "fa-road",
		"cells": [
			1,
			12,
			13,
			12
		],
		"Momentum": {
			"dir": "north",
			"icon": "fa-magnet",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Acquire": {
			"dir": "west",
			"icon": "fa-cloud-download",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Direct": {
			"dir": "east",
			"icon": "fa-compass",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Complete": {
			"dir": "south",
			"icon": "fa-stop-circle-o",
			"hsv": [
				45,
				90,
				90
			]
		}
	},
	"Machine": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Do",
		"plane": "Augment",
		"icon": "fa-gears",
		"cells": [
			13,
			12,
			13,
			12
		],
		"Feedback": {
			"dir": "west",
			"icon": "fa-refresh",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Technique": {
			"dir": "north",
			"icon": "fa-sliders",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Cultivate": {
			"dir": "east",
			"icon": "fa-shower",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Assess": {
			"dir": "south",
			"icon": "fa-balance-scale",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Advise": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Do",
		"plane": "Augment",
		"icon": "fa-tripadvisor",
		"cells": [
			25,
			12,
			13,
			12
		],
		"Rationale": {
			"dir": "north",
			"icon": "fa-balance-scale",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Finding": {
			"dir": "west",
			"icon": "fa-leanpub",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Consequence": {
			"dir": "east",
			"icon": "fa-legal",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Context": {
			"dir": "south",
			"icon": "fa-picture-o",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Prove": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Share",
		"plane": "Augment",
		"icon": "fa-thumbs-up",
		"cells": [
			1,
			12,
			25,
			12
		],
		"Evaluate": {
			"dir": "north",
			"icon": "fa-balance-scale",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Diagnose": {
			"dir": "west",
			"icon": "fa-stethoscope",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Reproduce": {
			"dir": "east",
			"icon": "fa-universal-access",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Protect": {
			"dir": "south",
			"icon": "fa-github",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Interpret": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Share",
		"plane": "Augment",
		"icon": "fa-graduation-cap",
		"cells": [
			13,
			12,
			25,
			12
		],
		"Signal": {
			"dir": "west",
			"icon": "fa-signal",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Process": {
			"dir": "north",
			"icon": "fa-sliders",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Enrich": {
			"dir": "east",
			"icon": "fa-cubes",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Summarize": {
			"dir": "south",
			"icon": "fa-cloud",
			"hsv": [
				0,
				90,
				90
			]
		}
	},
	"Explain": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Share",
		"plane": "Augment",
		"icon": "fa-user-plus",
		"cells": [
			25,
			12,
			25,
			12
		],
		"Situation": {
			"dir": "north",
			"icon": "fa-picture-o",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Harvest": {
			"dir": "west",
			"icon": "fa-graduation-cap",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Decision": {
			"dir": "east",
			"icon": "fa-code-fork",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Publish": {
			"dir": "south",
			"icon": "fa-medium",
			"hsv": [
				60,
				90,
				90
			]
		}
	}
};

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = {
	"Acquire": {
		"purpose": "None",
		"ref": "TEF",
		"hsv": [
			195,
			90,
			70
		],
		"icon": "fa-cloud-download",
		"cells": [
			1,
			12,
			1,
			12
		],
		"outline": "2",
		"groups": [],
		"column": "Embrace",
		"row": "Learn",
		"plane": "DataScience",
		"svg": "FourTier",
		"inquiry": "",
		"sight": "",
		"Collect": {
			"purpose": "None",
			"ref": "KF_",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-arrow-circle-right",
			"dir": "west",
			"outline": "A",
			"Plan": {
				"purpose": "None",
				"ref": "KF_",
				"icon": "fa-circle",
				"VelVarVol": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle",
					"title": "Velocity Variety Volumn"
				},
				"Context": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Connect": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				}
			},
			"Sources": {
				"purpose": "None",
				"ref": "KF_",
				"icon": "fa-circle",
				"Raw": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Structured": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Spatial": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Sensor": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				}
			},
			"Qualify": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Observation": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Survey": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Interview": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"Manage": {
				"purpose": "None",
				"ref": "KF_",
				"icon": "fa-circle",
				"OriginalData": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"FormatData": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"DescribeData": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"UseTheData": {
					"purpose": "None",
					"ref": "KF_"
				}
			}
		},
		"Refine": {
			"purpose": "None",
			"ref": "KF_",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-retweet",
			"dir": "north",
			"outline": "B",
			"Enrich": {
				"purpose": "None",
				"ref": "KF_",
				"icon": "fa-circle",
				"CleanSource": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-retweet"
				},
				"Indicator": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"CrowdSource": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Automate": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				}
			},
			"Quality": {
				"purpose": "None",
				"ref": "KF_",
				"icon": "fa-circle",
				"Assurance": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Control": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-plus-circle"
				},
				"Profile": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-list-alt"
				}
			},
			"Track": {
				"purpose": "None",
				"ref": "KF_",
				"Defect": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"Usage": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-refresh"
				},
				"Audit": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-check-square"
				}
			},
			"Normalize": {
				"purpose": "None",
				"ref": "",
				"icon": "fa-bell"
			}
		},
		"Schema": {
			"purpose": "None",
			"ref": "TEF",
			"icon": "fa-sitemap",
			"hsv": [
				30,
				60,
				90
			],
			"dir": "east",
			"outline": "C",
			"Domain": {
				"purpose": "Conduit from Info Product",
				"ref": "TEF",
				"icon": "fa-building-o",
				"Entitlement": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-child"
				},
				"Proposition": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-lightbulb-o"
				},
				"Portfolio": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-briefcase"
				},
				"Intelligence": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-dropbox",
					"title": "Intelligence"
				}
			},
			"Document": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Dictionary": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Catalog": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				}
			},
			"Model": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"title": "EntityRelation",
				"Experimental": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Conceptual": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Logical": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Physical": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"Deploy": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"MapSources": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				},
				"RestURLs": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle"
				}
			}
		},
		"Prepare": {
			"purpose": "Clean and separate data",
			"ref": "BAH",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-check-square",
			"dir": "south",
			"outline": "D",
			"Filter": {
				"purpose": "Identify data based on its absolute or relative values",
				"ref": "BAH",
				"Relational": {
					"purpose": "Declarative add or remove data",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"TagOutliers": {
					"purpose": "When early results are unimformative remove outlies if necessary",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Outlier Tagging"
				}
			},
			"Imputate": {
				"purpose": "Fill in missing values in my data",
				"ref": "BAH",
				"RandomSampling": {
					"purpose": "Generate values from other observations",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"MonteCarlo": {
					"purpose": "Generate values from other observations",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Mean": {
					"purpose": "Generate values without any other observations",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Distributions": {
					"purpose": "Generate values without any other observations",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"Transform": {
				"purpose": "Reconcile duplicate representations",
				"ref": "BAH",
				"Deduplication": {
					"purpose": "Suspect duplicate data",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Normalization": {
					"purpose": "Want data to remain in range",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Conversion": {
					"purpose": "Convert binary data",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Fourier": {
					"purpose": "Data in frequency domain",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Wavelet": {
					"purpose": "Data in frequency domain",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Coordinate": {
					"purpose": "In Euclidian space",
					"ref": "BAH"
				}
			},
			"Select": {
				"purpose": "None",
				"ref": "KF_",
				"icon": "fa-circle",
				"Sampling": {
					"purpose": "None",
					"ref": "KF_",
					"icon": "fa-circle",
					"title": "Sample Population"
				},
				"Region": {
					"purpose": "None",
					"ref": "JG_",
					"icon": "fa-circle",
					"title": "Region Of Interest"
				}
			}
		}
	},
	"Tools": {
		"purpose": "None",
		"ref": "BAH",
		"hsv": [
			195,
			90,
			70
		],
		"icon": "fa-desktop",
		"cells": [
			13,
			12,
			1,
			12
		],
		"groups": [],
		"column": "Innovate",
		"row": "Learn",
		"plane": "DataScience",
		"svg": "Tier",
		"inquiry": "",
		"sight": "",
		"Visualize": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-area-chart",
			"dir": "west",
			"Plotly": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-area-chart"
			},
			"D3": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-area-chart"
			},
			"Leaflet": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-area-chart"
			},
			"MathBox": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-area-chart"
			}
		},
		"Explore": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-search",
			"dir": "north",
			"Access": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-database"
			},
			"Search": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-search"
			},
			"PivotTable": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-table"
			}
		},
		"DataSet": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-codepen",
			"dir": "east",
			"Docs": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-codepen"
			},
			"JSON": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-codepen"
			}
		},
		"Notebook": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-leanpub",
			"dir": "south",
			"Browser": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-codepen"
			},
			"Scala": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-codepen"
			},
			"Python": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-codepen"
			},
			"Jupyter": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-codepen"
			}
		}
	},
	"Insight": {
		"purpose": "None",
		"ref": "TEF",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-lightbulb-o",
		"cells": [
			25,
			12,
			1,
			12
		],
		"groups": [],
		"column": "Encourage",
		"row": "Learn",
		"plane": "DataScience",
		"svg": "Tier",
		"inquiry": "",
		"sight": "",
		"Theorize": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				70
			],
			"icon": "fa-question-circle",
			"dir": "west",
			"Principles": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-thumbs-up"
			},
			"Proposition": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-thumbs-up"
			},
			"Bias": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-address-card"
			},
			"Signifcance": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell"
			}
		},
		"Statistics": {
			"purpose": "Derive overall parameters",
			"ref": "BAH",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-bell",
			"dir": "north",
			"outline": "E",
			"Measures": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"CentralTendency": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": ""
				},
				"Dispersion": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"ANOVA": {
					"purpose": "Compare multiple groups",
					"ref": "BAH",
					"icon": "fa-bell"
				}
			},
			"Probability": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"title": "Probability Calibration",
				"SampleSpace": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"SetTheory": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"RandomVariables": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"MeasureTheory": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			},
			"Uncertainty": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"title": "",
				"UncertainRisk": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"FuzzySets": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"FuzzyMeasure": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			},
			"Distribution": {
				"purpose": "Data follows a distribution",
				"ref": "BAH",
				"icon": "fa-bell",
				"Characteristics": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Probability Distribution Characteristics"
				},
				"subs": [
					"random variable",
					"characteristic",
					"density",
					"cumulative",
					"hazard"
				],
				"Univariate": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Multivariate": {
					"purpose": "Vector Space",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			}
		},
		"Ontology": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-tripadvisor",
			"dir": "east",
			"Semantics": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-tripadvisor"
			},
			"OWL": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-tripadvisor"
			},
			"JSON-LD": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-tripadvisor"
			},
			"SPARQL": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-tripadvisor"
			}
		},
		"Choose": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-code-fork",
			"dir": "south",
			"Samples": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-table"
			},
			"Schemas": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-sitemap"
			},
			"Alogrithms": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-calculator"
			},
			"Learning": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-calculator"
			}
		}
	},
	"Describe": {
		"purpose": "What is Happening?",
		"ref": "BAH",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-modx",
		"cells": [
			1,
			12,
			13,
			12
		],
		"learn": "Unsupervise",
		"groups": [
			"Technique"
		],
		"column": "Embrace",
		"row": "Do",
		"plane": "DataScience",
		"svg": "Data",
		"outline": "3",
		"inquiry": "What is Happening",
		"sight": "Hindsight",
		"Unsupervise": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-book",
			"dir": "westd",
			"outline": "A",
			"CollectData": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-table",
				"ImplicitCollect": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-table"
				},
				"EmotionalSpaces": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-table"
				},
				"Density": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "DensityEstimation"
				},
				"TextRank": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"FeatureExtract": {
				"purpose": "",
				"ref": "BAH",
				"icon": "fa-circle",
				"title": "",
				"tools": [
					"SciKitLearn"
				],
				"Hashing": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Term Frequency": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"LatentVariable": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-dropbox",
				"ExpectationMax": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-briefcase",
					"acronym": "EM",
					"title": "Expectation Maximumization"
				},
				"MethodOfMoments": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-briefcase"
				},
				"Dirichlet": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-briefcase"
				}
			},
			"Neural": {
				"purpose": "",
				"ref": " ",
				"icon": "fa-connectdevelop",
				"title": "Neural Nets Unsuperised",
				"Boltzman": {
					"purpose": " ",
					"ref": "TEF",
					"icon": "fa-connectdevelop",
					"title": "Restricted Boltzman Machine",
					"tools": [
						"SciKitLearn"
					]
				},
				"Stocastic": {
					"purpose": " ",
					"ref": "TEF",
					"icon": "fa-connectdevelop"
				}
			}
		},
		"Cluster": {
			"purpose": "Segment data to find natural groupings",
			"ref": "BAH",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-object-group",
			"dir": "nwd",
			"outline": "B",
			"Centroid": {
				"purpose": "Known number of clusters, very large samples",
				"ref": "BAH",
				"icon": "fa-circle",
				"KMeans": {
					"purpose": "Known number of clusters",
					"measure": "centroid",
					"ref": "BAH",
					"icon": "fa-circle",
					"xmember": "ten",
					"tools": [
						"SciKitLearn",
						"Spark"
					]
				},
				"SOM": {
					"purpose": "",
					"ref": "TEF",
					"icon": "fa-circle",
					"xmember": "ten",
					"title": "SelfOrganizingMaps"
				},
				"Affinity": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"tools": [
						"SciKitLearn"
					]
				},
				"FuzzyCMeans": {
					"purpose": "None",
					"ref": "WIK",
					"icon": "fa-circle"
				}
			},
			"Hierarchial": {
				"purpose": "Derive an ordered set of cluster with varialbe precision",
				"ref": "BAH",
				"icon": "fa-circle",
				"Agglomerative": {
					"purpose": "Includes Ward",
					"ref": "WIK",
					"icon": "fa-circle",
					"tools": [
						"SciKitLearn"
					]
				},
				"Birch": {
					"purpose": "None",
					"ref": "WIK",
					"icon": "fa-circle",
					"tools": [
						"SciKitLearn"
					],
					"acronym": "BIRCH",
					"title": "Balanced Iterative Reducing and Clustering using Hierarchies"
				},
				"Canopy": {
					"purpose": "Observations by group membership",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Fractal": {
					"purpose": "Non-Elliptical clusters",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"Distribution": {
				"purpose": "None",
				"ref": "WIK",
				"icon": "fa-bell",
				"ExpectationMax": {
					"purpose": "Soft membership in clusters",
					"ref": "BAH",
					"icon": "fa-bell",
					"tools": [
						"SciKitLearn:GausianMixture"
					],
					"subs": [
						"Dirichlet",
						"Variaional"
					]
				},
				"Spectral": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"tools": [
						"SciKitLearn"
					]
				},
				"Correllation": {
					"purpose": "None",
					"ref": "WIK",
					"icon": "fa-bell"
				}
			},
			"Density": {
				"purpose": "None",
				"ref": "WIK",
				"DBSCAN": {
					"purpose": "Non-Elliptical clusters extended by OOPTIKS",
					"ref": "BAH",
					"icon": "fa-circle",
					"tools": [
						"SciKitLearn"
					]
				},
				"MeanShift": {
					"purpose": "None",
					"ref": "WIK",
					"icon": "fa-circle",
					"tools": [
						"SciKitLearn"
					]
				}
			}
		},
		"Dimension": {
			"purpose": "Reduce the number of dimensions",
			"ref": "BAH",
			"hsv": [
				90,
				50,
				75
			],
			"icon": "fa-cubes",
			"dir": "ned",
			"outline": "C",
			"Eigen": {
				"purpose": "Characterize",
				"ref": "TEF",
				"icon": "fa-cubes",
				"title": "Eigenvalues and Eigenvectors",
				"BlindSignal": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-dropbox",
					"title": "Blind Signal Separation"
				}
			},
			"Principal": {
				"purpose": "Determine multi-dimensional correlation",
				"ref": "BAH",
				"icon": "fa-cubes",
				"acronym": "PCA",
				"title": "Principal Component Analysis",
				"tools": [
					"SciKitLearn"
				],
				"Independent": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"acronym": "ICA",
					"title": "Independent Component Analysis"
				},
				"Correspondence": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Correspondence Analysis"
				},
				"FactorAnalysis": {
					"purpose": "Determine multi-dimensional correlation",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"Discriminant": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"tools": [
					"SciKitLearn"
				],
				"acronym": "LDA",
				"title": "Linear Discriminant Analysis",
				"Linear": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"tools": [
						"SciKitLearn"
					]
				},
				"Quadratic": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Regularized": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Cross": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			},
			"Manifold": {
				"purpose": "NonLinear",
				"ref": "TEF",
				"icon": "fa-bell",
				"tools": [
					"SciKitLearn"
				],
				"subs": [
					"ElasticMap",
					"SpectralEmbedding",
					"LocalTangent",
					"MultiDimen"
				],
				"Isomap": {
					"purpose": "None",
					"ref": "TEF",
					"tools": [
						"SciKitLearn"
					]
				},
				"LocallyLinear": {
					"purpose": "None",
					"ref": "TEF",
					"tools": [
						"SciKitLearn"
					],
					"title": "Locally Linear Embedding"
				},
				"Laplacian": {
					"purpose": "None",
					"ref": "TEF",
					"tools": [
						"SciKitLearn"
					],
					"title": "Hessian Eigenmapping"
				}
			}
		},
		"Metadata": {
			"purpose": "Add new informatuon",
			"ref": "BAH",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-table",
			"dir": "eastd",
			"outline": "D",
			"AssociationRule": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"title": "Association Rule",
				"Apriori": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-table",
					"xmember": "ten"
				},
				"Dictionary": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"FeatureSelect": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Genetic": {
					"purpose": "Track source information and user defined parameters",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Ensemble": {
					"purpose": "Varible to fixed features",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Feature Hashing"
				},
				"SignalNoise": {
					"purpose": "Unstructured text data",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Sum Squares": {
					"purpose": "Determine feature importance",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"Search": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Grid": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Exhaustive": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Feature Hashing"
				},
				"BestFirst": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Annealing": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"Anomaly": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Outlier": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Outlier Significans"
				},
				"LocalOutlier": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Local Outlier Factor"
				},
				"ModelBased": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "ExponentialSmoothing"
				},
				"Smoothing": {
					"purpose": "When early results are unimformative",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "ExponentialSmoothing"
				}
			}
		},
		"Investigate": {
			"purpose": "A look at past performance to determine what happened and why.",
			"ref": "TEF",
			"hsv": [
				65,
				90,
				90
			],
			"icon": "fa-table",
			"dir": "swd",
			"outline": "F",
			"Monitor": {
				"purpose": "",
				"ref": "TEF",
				"icon": "fa-stethoscope",
				"Detect": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Diagnose": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"Pivot": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"DrillDown": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"RollUp": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			}
		},
		"Report": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				55,
				90,
				90
			],
			"icon": "fa-table",
			"dir": "sed",
			"outline": "E",
			"Profile": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Baseline": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Detail": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Relate": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Difference": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"Summarize": {
				"purpose": "Understand all information available on an entity",
				"ref": "BAH",
				"icon": "fa-circle",
				"Relational": {
					"purpose": "Process data fields together",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Extraction": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Abstraction": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			}
		}
	},
	"Model": {
		"purpose": "Mathematical Elegance",
		"ref": "BAH",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-line-chart",
		"cells": [
			13,
			12,
			13,
			12
		],
		"outline": "4",
		"learn": "SemiSupervise",
		"groups": [
			"Technique"
		],
		"column": "Innovate",
		"row": "Do",
		"plane": "DataScience",
		"svg": "Data",
		"inquiry": "Why is somehting happening",
		"sight": "Insight",
		"SemiSuper": {
			"purpose": "Some of the samples are not labeled.",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-book",
			"dir": "westd",
			"title": "Semi Supervised",
			"outline": "A",
			"TrainData": {
				"purpose": "None",
				"ref": "TEF",
				"Transducive": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Inductive": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Assumptions": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Smoothness": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"Methods": {
				"purpose": "None",
				"ref": "TEF",
				"LowDensity": {
					"purpose": "None",
					"ref": "TEF"
				},
				"GraphBased": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Heuristics": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Redundancy": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"Label": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"learn": "SemiSupervise",
				"Propagate": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Label Propagation"
				},
				"Spreading": {
					"purpose": "None",
					"ref": "c",
					"icon": "fa-circle"
				}
			},
			"DeepLearning": {
				"purpose": "None",
				"ref": " ",
				"icon": "fa-connectdevelop",
				"BackPropagation": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-connectdevelop"
				},
				"Convolutional": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-connectdevelop"
				},
				"Deep Boltzmann": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-connectdevelop",
					"title": "Deep Boltzmann Machine"
				},
				"Deep Belief ": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-connectdevelop",
					"title": "Deep Belief Networks"
				}
			}
		},
		"Regress": {
			"purpose": "Determines which continuous variables are important",
			"ref": "BAH",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-line-chart",
			"dir": "nwd",
			"outline": "B",
			"Linear": {
				"purpose": " ",
				"ref": "BAH",
				"icon": "fa-line-chart",
				"xmember": "ten",
				"Linear": {
					"purpose": " ",
					"ref": "BAH",
					"icon": "fa-line-chart",
					"xmember": "ten",
					"tools": [
						"SciKitLearn"
					]
				},
				"Logistic": {
					"purpose": " ",
					"ref": "BAH",
					"icon": "fa-line-chart",
					"xmember": "ten"
				}
			},
			"Regularized": {
				"purpose": " ",
				"ref": "BAH",
				"icon": "fa-line-chart",
				"Ridge": {
					"purpose": "Shrinkage Bayeian Ridge ",
					"ref": "TEF",
					"icon": "fa-line-chart",
					"tools": [
						"SciKitLearn"
					],
					"subs": [
						"Kernel"
					]
				},
				"Lasso": {
					"purpose": "estimates sparse coefficients",
					"ref": "BAH",
					"icon": "fa-line-chart",
					"tools": [
						"SciKitLearn"
					],
					"subs": [
						"MultiTask"
					]
				},
				"ElasticNet": {
					"purpose": "Combines Ridge and Lasso. Reduces to SVM",
					"ref": "TEF",
					"icon": "fa-bell",
					"tools": [
						"SciKitLearn",
						"Spark"
					],
					"subs": [
						"MultiTask"
					]
				},
				"LeastAngle": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Least Angle Regression",
					"tools": [
						"SciKitLearn"
					],
					"subs": [
						"MultiTask"
					]
				}
			},
			"Probabilistic": {
				"purpose": " ",
				"ref": "BAH",
				"icon": "fa-line-chart",
				"Bayesian": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"subs": "Ridge"
				},
				"AutoRelevance": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Automatic Relevance Determination"
				},
				"OrthogonalMatch": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-line-chart",
					"title": "Orthogonal Matching Pursuit"
				},
				"GausianProcess": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			},
			"Other": {
				"purpose": " ",
				"ref": "BAH",
				"icon": "fa-line-chart",
				"Stepwise": {
					"purpose": "Statistical measures not needed",
					"ref": "BAH"
				},
				"Isotomic": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"tools": [
						"SciKitLearn"
					]
				},
				"Robust": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-line-chart",
					"tools": [
						"SciKitLearn"
					],
					"subs": [
						"RANSAC",
						"TheilSen",
						"Huber"
					]
				}
			}
		},
		"Derivation": {
			"purpose": "Derive overall parameters",
			"ref": "ESL",
			"hsv": [
				90,
				50,
				75
			],
			"icon": "fa-bell",
			"dir": "ned",
			"outline": "C",
			"Representation": {
				"purpose": "None",
				"ref": "ESL",
				"icon": "fa-bell",
				"Smoothing": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Regularization": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Wavelet": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Kernel": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				}
			},
			"Assessment": {
				"purpose": "None",
				"ref": "ESL",
				"icon": "fa-bell",
				"BiasVariance": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"CrossValidation": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Bootstrap": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				}
			},
			"Selection": {
				"purpose": "None",
				"ref": "ESL",
				"icon": "fa-bell",
				"title": "",
				"Estimates": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Errors": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"FuzzyMeasure": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				}
			},
			"Inference": {
				"purpose": "None",
				"ref": "ESL",
				"icon": "fa-bell",
				"Likelyhood": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell",
					"title": "Probability Distribution Characteristics"
				},
				"subs": [
					"random variable",
					"characteristic",
					"density",
					"cumulative",
					"hazard"
				],
				"Bayesian": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"ExpectationMax": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Bagging": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell"
				},
				"Stochastic": {
					"purpose": "None",
					"ref": "ESL",
					"icon": "fa-bell",
					"title": "Stochastic Search Bumping"
				}
			}
		},
		"Distill": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-modx",
			"dir": "eastd",
			"outline": "D",
			"Hypothesis": {
				"purpose": "Test ideas",
				"ref": "BAH",
				"icon": "fa-question-circle",
				"title": "Hypothesis",
				"TTest": {
					"purpose": "Compare two groups",
					"ref": "BAH"
				},
				"Topic": {
					"purpose": "Text data",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Topic Modeling"
				},
				"ChiSquared": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"CoVariance": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"title": "CoVariance",
				"Empirical": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Shrunk": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"SparseInv": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "SparseInverse"
				},
				"Robust": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			},
			"CurveFits": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-line-chart"
			},
			"Distributions": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell"
			}
		},
		"Discover": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				55,
				90,
				90
			],
			"icon": "fa-table",
			"dir": "swd",
			"outline": "E",
			"Detect": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-stethoscope",
				"Exceptions": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-stethoscope"
				},
				"Clusters": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-object-group"
				},
				"Trends": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-line-chart"
				}
			},
			"Calculate": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-line-chart",
				"Interpolate": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-line-chart"
				},
				"Extrapalate": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-line-chart"
				}
			}
		},
		"Math": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				65,
				90,
				90
			],
			"icon": "fa-table",
			"dir": "sed"
		}
	},
	"Interpret": {
		"purpose": "None",
		"ref": "TEF",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-thumbs-up",
		"cells": [
			25,
			12,
			13,
			12
		],
		"groups": [],
		"column": "Encourage",
		"row": "Do",
		"plane": "DataScience",
		"svg": "Tier",
		"Input": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				70
			],
			"icon": "fa-stethoscope",
			"dir": "west"
		},
		"Math": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-check-square",
			"dir": "north"
		},
		"Output": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-cubes",
			"dir": "east"
		},
		"Apply": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-lock",
			"dir": "south"
		}
	},
	"Discovery": {
		"purpose": "None",
		"ref": "TEF",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-thumbs-up",
		"cells": [
			1,
			12,
			25,
			12
		],
		"groups": [],
		"column": "Embrace",
		"row": "Do",
		"plane": "DataScience",
		"svg": "Tier",
		"Detect": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				70
			],
			"icon": "fa-stethoscope",
			"dir": "west"
		},
		"Define": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-check-square",
			"dir": "north"
		},
		"Signature": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-cubes",
			"dir": "east"
		},
		"Apply": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-lock",
			"dir": "south"
		}
	},
	"Predict": {
		"purpose": "What is likely to happen",
		"ref": "BAH",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-bar-chart-o",
		"cells": [
			13,
			12,
			25,
			12
		],
		"outline": "5",
		"learn": "Supervise",
		"groups": [
			"Technique"
		],
		"column": "Innovate",
		"row": "Do",
		"plane": "DataScience",
		"svg": "Data",
		"inquiry": "What is likely to happen",
		"sight": "Foresight",
		"Supervise": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-book",
			"dir": "westd",
			"outline": "A",
			"ReviewData": {
				"purpose": "None",
				"ref": "TEF",
				"Interface": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Intelligence": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Inference": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"Risk": {
				"purpose": "None",
				"ref": "TEF",
				"title": "Risk Minimumization",
				"Empirical": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Structural": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Noise": {
					"purpose": "None",
					"ref": "TEF"
				},
				"NonLinearity": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"Attribute": {
				"purpose": "None",
				"ref": "TEF",
				"Represent": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Dimensionality": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Heterogeneity": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Redundancy": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Concept": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"Neural": {
				"purpose": "",
				"ref": " ",
				"icon": "fa-connectdevelop",
				"title": "Neural Nets Superised",
				"Perceptron": {
					"purpose": " ",
					"ref": "TEF",
					"icon": "fa-connectdevelop",
					"title": "Multi-layer Perceptron",
					"tools": [
						"SciKitLearn"
					]
				},
				"Propagation": {
					"purpose": " ",
					"ref": "TEF",
					"icon": "fa-connectdevelop",
					"title": "Back Propagation"
				}
			}
		},
		"Classify": {
			"purpose": "Predict group membership with categorical variables",
			"ref": "BAH",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-sitemap",
			"dir": "nwd",
			"outline": "C",
			"NaiveBayes": {
				"purpose": "Less than 20 dimensions",
				"ref": "BAH",
				"icon": "fa-circle",
				"xmember": "ten",
				"tools": [
					"SciKitLearn",
					"ML"
				],
				"classifiers": [
					"Gaussian",
					"Multinomial",
					"Bernoulli",
					"OutOfCore",
					"Hierarchial"
				],
				"NBGaussian": {
					"purpose": "None",
					"ref": "TEF",
					"tools": [
						"SciKitLearn"
					]
				},
				"NBMultinomial": {
					"purpose": "None",
					"ref": "TEF",
					"tools": [
						"SciKitLearn"
					]
				},
				"NBBernoulli": {
					"purpose": "None",
					"ref": "TEF",
					"tools": [
						"SciKitLearn"
					]
				}
			},
			"SupportVector": {
				"purpose": "Don't know where to begin",
				"ref": "BAH",
				"icon": "fa-circle",
				"xmember": "ten",
				"title": "Support Vector Machines",
				"tools": [
					"SciKitLearn"
				],
				"classifiers": [
					"linear",
					"kernel.trick"
				],
				"subs": [
					"classify",
					"regress"
				],
				"Hyperplane": {
					"purpose": "None",
					"ref": "TEF"
				},
				"Kernel": {
					"purpose": "None",
					"ref": "TEF"
				}
			},
			"NearestNeighbor": {
				"purpose": "Less than 20 dimensions",
				"ref": "BAH",
				"icon": "fa-circle",
				"subs": [
					"classify",
					"regress"
				],
				"title": "Nearest Neighbor",
				"K-NN": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-sitemap",
					"tools": [
						"SciKitLearn"
					]
				}
			},
			"Classifiers": {
				"purpose": "",
				"ref": "TEF",
				"icon": "fa-circle",
				"subs": [
					"classify",
					"regress"
				],
				"Multi-Class": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"tools": [
						"SciKitLearn"
					]
				},
				"Multi-Label": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"tools": [
						"SciKitLearn"
					]
				}
			}
		},
		"Structure": {
			"purpose": "Future value",
			"ref": "BAH",
			"hsv": [
				90,
				50,
				75
			],
			"icon": "fa-sitemap",
			"dir": "ned",
			"outline": "C",
			"DecisionTree": {
				"purpose": "Require highly tranparent model",
				"ref": "BAH",
				"icon": "fa-circle",
				"xmember": "ten",
				"CART": {
					"purpose": "Two  Categories PRIK NARS MHE",
					"ref": "TEF",
					"icon": "fa-sitemap",
					"xmember": "ten",
					"tools": [
						"SciKitLearn"
					],
					"classify": "Two  Catagories",
					"regress": "Linear",
					"title": "CART Classification and Regression Trees"
				},
				"C4.5": {
					"purpose": "Many Categories",
					"ref": "TEF",
					"icon": "fa-sitemap",
					"xmember": "ten",
					"classify": "Many Catagories",
					"regress": "NonLinear",
					"title": "C.4.5"
				}
			},
			"RandomForest": {
				"purpose": "Builds large collection of de-correlated trees & averages them. Esemble Bagging, Boosting and Desision Tree",
				"xmember": "ten",
				"inceptive": "Unsure of feature importance or where to begin",
				"ref": "BAH",
				"icon": "fa-circle",
				"tools": [
					"SciKitLearn",
					"ML"
				]
			},
			"Ensemble": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"classifiers": [
					"RandomForest",
					"ExtraTree",
					"Voting"
				],
				"Bagging": {
					"purpose": "Independent Trees     for bias, variance, model complexity, over fitting",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"AdaptiveBoost": {
					"purpose": "Successfully Weighted for bias, variance, model complexity, over fitting",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"GradientBoost": {
					"purpose": "Bias, variance, model complexity, over fitting",
					"ref": "TEF",
					"title": "Gradient Tree Boosting",
					"tools": [
						"SciKitLearn"
					]
				}
			},
			"Markov": {
				"purpose": "",
				"ref": "TEF",
				"icon": "fa-table",
				"HiddenMarkov": {
					"purpose": "Estimate an observable state based observable variables",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Hidden Markov"
				}
			}
		},
		"Confidence": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-bell",
			"dir": "eastd",
			"outline": "D",
			"Interval": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"title": "Confidence Interval and Regions",
				"ErrorBounds": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Crediable": {
					"purpose": "Bayesian",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Crediable Interval"
				},
				"Probability": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Model Evaluation"
				},
				"Contraints": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			},
			"Evaluation": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"title": "Receiver Operating Characteristics",
				"ConfusionMatrix": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"F-Measure": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"ROCGraph": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Receiver Operating Characteristics"
				}
			},
			"Uncertainty": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bell",
				"title": "Uncertainty Interval",
				"Catagories": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Catagories of Uncertainty",
					"subs": [
						"Parameter",
						"Parametric",
						"Structural",
						"Algorithmic",
						"Experimental",
						"Interpolation"
					]
				},
				"Assumptions": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				},
				"Propagation": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell",
					"title": "Propagation of Uncertainty"
				}
			},
			"Historical": {
				"purpose": "None",
				"ref": "TEF",
				"hsv": [
					55,
					90,
					90
				],
				"icon": "fa-thumbs-up",
				"Explain": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-thumbs-up"
				},
				"Sentiment": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-bell"
				}
			}
		},
		"Recommend": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				65,
				90,
				90
			],
			"icon": "fa-table",
			"dir": "swd",
			"outline": "E",
			"Ratings": {
				"purpose": "",
				"ref": "TEF",
				"icon": "fa-circle"
			},
			"Context": {
				"purpose": "Have feature vector of item characteritics",
				"ref": "BAH",
				"icon": "fa-circle",
				"CollabFilter": {
					"purpose": "Only know how people interact with items",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Collaborative Filtering"
				},
				"ContentBased": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Content Based"
				},
				"KnowledgeBased": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Knowledge Based"
				},
				"GraphBased": {
					"purpose": "Only know connection between items",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			}
		},
		"Forecast": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				65,
				90,
				90
			],
			"icon": "fa-thumbs-up",
			"dir": "sed",
			"outline": "F",
			"Qualitative": {
				"purpose": "Opinion and judgment",
				"ref": "TEF",
				"icon": "fa-circle"
			},
			"Quanitative": {
				"purpose": "Function of past data",
				"ref": "TEF",
				"icon": "fa-circle"
			}
		}
	},
	"Advise": {
		"purpose": "What should I do about it",
		"ref": "BAH",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-code-fork",
		"cells": [
			25,
			12,
			25,
			12
		],
		"outline": "6",
		"learn": "Reinforce",
		"groups": [
			"Technique"
		],
		"column": "Encourage",
		"row": "Do",
		"plane": "DataScience",
		"svg": "Data",
		"inquiry": "What should I do about it",
		"sight": "Foresight",
		"Reinforce": {
			"purpose": "Agent take action to max rewards",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-book",
			"dir": "westd",
			"outline": "A",
			"Explore Data": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"title": "",
				"EpsilonGreedy": {
					"purpose": "discrete",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Epsilon-Greedy Exploration"
				},
				"Boltzmann": {
					"purpose": "discrete",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "BoltzmannExploration"
				},
				"Gaussian": {
					"purpose": "continuous",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Gaussian Exploration"
				},
				"StateDependent": {
					"purpose": "continuous",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "State Dependent Exploration"
				}
			},
			"ValueFunction": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"title": "",
				"QLearning": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				},
				"SARSA": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				},
				"FittedQ": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Neural Fitted Q-iteration"
				}
			},
			"BlackBox": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"title": "Black Box Optimization",
				"StochasticHill": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Stochastic Hill Climbingg"
				},
				"Swarm": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Particle Swarm Optimization"
				},
				"NaturalEvolution": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Natural Evolution"
				},
				"FitnessExpect": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Fitness Expectation"
				}
			},
			"Neural": {
				"purpose": "None",
				"ref": " ",
				"icon": "fa-connectdevelop",
				"title": "Neural Nets Reinforce",
				"Deep": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-connectdevelop",
					"title": "Deep Reinforcement"
				},
				"Y": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-connectdevelop"
				}
			}
		},
		"Optimize": {
			"purpose": "Determine best course of action",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-trophy",
			"dir": "nwd",
			"outline": "B",
			"Operation": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-bar-chart",
				"title": "Operations Research",
				"LinearAlgebra": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-table"
				},
				"Scheduling": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-calendar-o",
					"title": ""
				},
				"Routing": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				},
				"Allocation": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				}
			},
			"Approximate": {
				"purpose": "Approximate solutuons acceptable",
				"ref": "BAH",
				"icon": "fa-circle",
				"Anealing": {
					"purpose": "Approximate solutuons acceptable",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Simulated Anealing"
				},
				"Gradient": {
					"purpose": "Approximate solutuons acceptable",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "GradientSearch"
				}
			},
			"Objective": {
				"purpose": "Objective function defined",
				"ref": "BAH",
				"icon": "fa-circle",
				"ConstraintLogic": {
					"purpose": "Objective function defined",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Constraint Logic Programming"
				},
				"LinearProg": {
					"purpose": "Objective function defined",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Linear Programming"
				},
				"NonLinearProg": {
					"purpose": "Objective function defined",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Non Linear Programming"
				},
				"IntegerProg": {
					"purpose": "Objective function defined",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Integer Programming"
				}
			},
			"Genetic": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"title": "Genetic Algorithm"
			}
		},
		"Simulate": {
			"purpose": "Characterize open systems",
			"ref": "BAH",
			"hsv": [
				90,
				50,
				75
			],
			"icon": "fa-area-chart",
			"dir": "ned",
			"outline": "C",
			"Event": {
				"purpose": "Inject events and observe influence",
				"ref": "BAH",
				"icon": "fa-circle",
				"Discrete": {
					"purpose": "Model discrete entities",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Discrete Event"
				},
				"Markov": {
					"purpose": "Have discrete set of possible states",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"MonteCarlo": {
					"purpose": "Do not need to model discrete entities",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"SelfOrganized": {
				"purpose": "None",
				"ref": "BAH",
				"icon": "fa-circle",
				"OrgMaps": {
					"purpose": "Understand probablitity distribution",
					"ref": "BAH",
					"title": "Self Organizing Maps"
				},
				"Swarm": {
					"purpose": "None",
					"ref": "BAH",
					"icon": "fa-circle"
				},
				"Agent": {
					"purpose": "Autonomous actions and interactions",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Agent Based"
				}
			},
			"PhasePlanes": {
				"purpose": "Model entire systems",
				"ref": "TEF",
				"icon": "fa-circle",
				"Dynamics": {
					"purpose": "Model a comples system with feedback",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "System Dynamics"
				},
				"Activity": {
					"purpose": "Require contiuous tracking of system behavior",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Activity Based"
				},
				"Differential": {
					"purpose": "Understand governing factors",
					"ref": "BAH",
					"icon": "fa-circle"
				}
			},
			"MonteCarlo": {
				"purpose": "Controlled generation of Random Data",
				"ref": "TEF",
				"icon": "fa-circle"
			}
		},
		"Feedback": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-code-fork",
			"dir": "eastd",
			"outline": "D",
			"Learning": {
				"purpose": "Search resources limited",
				"ref": "BAH",
				"icon": "fa-circle",
				"ActiveLearning": {
					"purpose": "Search resources limited",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Active Learning"
				},
				"Ensemble": {
					"purpose": "Want to try multiple models",
					"ref": "BAH",
					"icon": "fa-circle",
					"title": "Ensemble Learning"
				}
			},
			"Reason": {
				"purpose": "None",
				"ref": "BAH",
				"icon": "fa-circle",
				"Inductive": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Inductive Reasoning"
				},
				"Transductive": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Transductive Reasoning"
				},
				"Deductive": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Deductive Reasoning"
				}
			},
			"Optimality": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Constraints": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Constraint Distance"
				},
				"Sensitivity": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Sensitivity To Initial Conditions"
				},
				"Sparsity": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				}
			},
			"Suitablity": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle",
				"Linearity": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				},
				"Constantability": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				},
				"Comprehensive": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": "Sensitivity Analysis"
				},
				"Separatrix": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle",
					"title": ""
				}
			}
		},
		"Relevance": {
			"purpose": "",
			"ref": "BAH",
			"hsv": [
				55,
				90,
				90
			],
			"icon": "fa-lightbulb-o",
			"dir": "swd",
			"outline": "E",
			"Improve": {
				"purpose": "None",
				"ref": "TEF",
				"Construcual": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Nutrients": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Flow": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			},
			"Extent": {
				"purpose": "None",
				"ref": "TEF",
				"Change": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Evolve": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				},
				"Emerge": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-circle"
				}
			}
		},
		"Inference": {
			"purpose": "Sort through evidence",
			"ref": "BAH",
			"hsv": [
				65,
				90,
				90
			],
			"icon": "fa-lightbulb-o",
			"dir": "sed",
			"outline": "F",
			"Logical": {
				"purpose": "Looking for basics facts",
				"ref": "TEF",
				"icon": "fa-circle"
			},
			"Fuzzy": {
				"purpose": "Have imprecise catagories",
				"ref": "TEF",
				"icon": "fa-circle"
			}
		}
	},
	"Prove": {
		"purpose": "None",
		"ref": "TEF",
		"hsv": [
			45,
			90,
			90
		],
		"icon": "fa-thumbs-up",
		"cells": [
			1,
			12,
			37,
			12
		],
		"groups": [],
		"column": "Embrace",
		"row": "Share",
		"plane": "DataScience",
		"svg": "Tier",
		"Diagnose": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				70
			],
			"icon": "fa-stethoscope",
			"dir": "west"
		},
		"Bench": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-check-square",
			"dir": "north"
		},
		"Repeat": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-cubes",
			"dir": "east"
		},
		"Protect": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-lock",
			"dir": "south"
		}
	},
	"Process": {
		"purpose": "None",
		"ref": "BAH",
		"hsv": [
			195,
			90,
			70
		],
		"icon": "fa-sliders",
		"cells": [
			13,
			12,
			37,
			12
		],
		"groups": [],
		"column": "Innovate",
		"row": "Share",
		"plane": "DataScience",
		"svg": "Tier",
		"inquiry": "",
		"sight": "",
		"Stream": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-arrow-circle-right",
			"dir": "west",
			"Kafka": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-arrow-circle-right"
			},
			"Storm": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-arrow-circle-right"
			}
		},
		"Pipeline": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-sliders",
			"dir": "north",
			"Spark": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-star",
				"DataFrame": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-star"
				},
				"RDD": {
					"purpose": "None",
					"ref": "TEF",
					"icon": "fa-database"
				}
			}
		},
		"Ware": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-database",
			"dir": "east",
			"Cassandra": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-eye"
			},
			"CouchDB": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-database"
			},
			"MongoDB": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-database"
			},
			"Relational": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-database"
			}
		},
		"Deploy": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-cloud",
			"dir": "south",
			"Akka": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-area-chart"
			},
			"Mesos": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle"
			},
			"NodeJS": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-circle"
			}
		}
	},
	"Explain": {
		"purpose": "None",
		"ref": "TEF",
		"hsv": [
			30,
			50,
			75
		],
		"icon": "fa-slideshare",
		"cells": [
			25,
			12,
			37,
			12
		],
		"groups": [],
		"column": "Encourage",
		"row": "Share",
		"plane": "DataScience",
		"svg": "Tier",
		"inquiry": "",
		"sight": "",
		"Asset": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				195,
				90,
				90
			],
			"icon": "fa-money",
			"dir": "west"
		},
		"Decision": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				90,
				90,
				90
			],
			"icon": "fa-code-fork",
			"dir": "north"
		},
		"Publish": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				30,
				60,
				90
			],
			"icon": "fa-leanpub",
			"dir": "east",
			"AsciiDoctor": {
				"purpose": "None",
				"ref": "TEF",
				"icon": "fa-leanpub"
			}
		},
		"Teach": {
			"purpose": "None",
			"ref": "TEF",
			"hsv": [
				60,
				90,
				90
			],
			"icon": "fa-university",
			"dir": "south"
		}
	}
};

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = {
	"Expertise": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Learn",
		"plane": "Knowledge",
		"icon": "fa-asl-interpreting",
		"cells": [
			1,
			12,
			1,
			12
		],
		"Practice": {
			"dir": "west",
			"icon": "fa-balance-scale",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Reputation": {
			"dir": "north",
			"icon": "fa-wechat",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Experience": {
			"dir": "east",
			"icon": "fa-child",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Extend": {
			"dir": "south",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Science": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Learn",
		"plane": "Knowledge",
		"icon": "fa-flask",
		"cells": [
			13,
			12,
			1,
			12
		],
		"Observe": {
			"dir": "west",
			"icon": "fa-question",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Deduce": {
			"dir": "north",
			"icon": "fa-signal",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Formulate": {
			"dir": "east",
			"icon": "fa-dropbox",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Causality": {
			"dir": "south",
			"icon": "fa-thumbs-up",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Understand": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Learn",
		"plane": "Knowledge",
		"icon": "fa-tripadvisor",
		"cells": [
			25,
			12,
			1,
			12
		],
		"Sympathy": {
			"dir": "west",
			"icon": "fa-heart",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Meaning": {
			"dir": "north",
			"icon": "fa-leanpub",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Concept": {
			"dir": "east",
			"icon": "fa-heart",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Comprehend": {
			"dir": "south",
			"icon": "fa-empire",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Orchestrate": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Do",
		"plane": "Knowledge",
		"icon": "fa-magic",
		"cells": [
			1,
			12,
			13,
			12
		],
		"Arrange": {
			"dir": "west",
			"icon": "fa-sitemap",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Listen": {
			"dir": "north",
			"icon": "fa-star",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Conduct": {
			"dir": "east",
			"icon": "fa-cube",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Perform": {
			"dir": "south",
			"icon": "fa-cube",
			"hsv": [
				45,
				90,
				90
			]
		}
	},
	"Cognition": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Do",
		"plane": "Knowledge",
		"icon": "fa-language",
		"cells": [
			13,
			12,
			13,
			12
		],
		"Express": {
			"dir": "west",
			"icon": "fa-desktop",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Transform": {
			"dir": "north",
			"icon": "fa-bars",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Compose": {
			"dir": "east",
			"icon": "fa-database",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Distribute": {
			"dir": "south",
			"icon": "fa-cloud",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Reason": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Do",
		"plane": "Knowledge",
		"icon": "fa-object-group",
		"cells": [
			25,
			12,
			13,
			12
		],
		"Interpret": {
			"dir": "west",
			"icon": "fa-desktop",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Logic": {
			"dir": "north",
			"icon": "fa-codepen",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Represent": {
			"dir": "east",
			"icon": "fa-database",
			"hsv": [
				15,
				90,
				90
			],
			"Procedural": {
				"icon": "fa-circle"
			},
			"Semantics": {
				"icon": "fa-circle"
			},
			"Episodic": {
				"icon": "fa-circle"
			},
			"Symbolic": {
				"icon": "fa-circle"
			},
			"Visuals": {
				"icon": "fa-circle"
			}
		},
		"Category": {
			"dir": "south",
			"icon": "fa-share-alt",
			"hsv": [
				45,
				90,
				90
			],
			"Objects": {
				"icon": "fa-object-group"
			},
			"Morphisms": {
				"icon": "fa-arrows-h"
			}
		}
	},
	"Evolve": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Share",
		"plane": "Knowledge",
		"icon": "fa-road",
		"cells": [
			1,
			12,
			25,
			12
		],
		"Diversity": {
			"dir": "west",
			"icon": "fa-stethoscope",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Fitness": {
			"dir": "north",
			"icon": "fa-balance-scale",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Transmit": {
			"dir": "east",
			"icon": "fa-circle",
			"hsv": [
				45,
				90,
				90
			]
		},
		"Survive": {
			"dir": "south",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Educate": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Share",
		"plane": "Knowledge",
		"icon": "fa-graduation-cap",
		"cells": [
			13,
			12,
			25,
			12
		],
		"Teach": {
			"dir": "west",
			"icon": "fa-life-ring",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Campus": {
			"dir": "north",
			"icon": "fa-university",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Library": {
			"dir": "east",
			"icon": "fa-cubes",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Preserve": {
			"dir": "south",
			"icon": "fa-shield",
			"hsv": [
				0,
				90,
				90
			]
		}
	},
	"Profess": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Share",
		"plane": "Knowledge",
		"icon": "fa-user-plus",
		"cells": [
			25,
			12,
			25,
			12
		],
		"Mentor": {
			"dir": "west",
			"icon": "fa-child",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Manifest": {
			"dir": "north",
			"icon": "fa-codiepie",
			"hsv": [
				90,
				90,
				90
			],
			"Exemplify": {
				"icon": "fa-circle"
			}
		},
		"Learned": {
			"dir": "east",
			"icon": "fa-graduation-cap",
			"hsv": [
				195,
				90,
				90
			],
			"Original": {
				"icon": "fa-circle"
			}
		},
		"Seek": {
			"dir": "south",
			"icon": "fa-search",
			"hsv": [
				195,
				90,
				90
			],
			"Accompany": {
				"icon": "fa-circle"
			},
			"Sow": {
				"icon": "fa-circle"
			},
			"Catalyze": {
				"icon": "fa-circle"
			},
			"Demonstrate": {
				"icon": "fa-circle"
			},
			"Harvest": {
				"icon": "fa-circle"
			}
		}
	}
};

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = {
	"Trust": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Learn",
		"plane": "Wisdom",
		"icon": "fa-universal-access",
		"cells": [
			1,
			12,
			1,
			12
		],
		"fill": "LDT",
		"Intent": {
			"dir": "west",
			"icon": "fa-circle",
			"hsv": [
				93,
				57,
				80
			]
		},
		"Reflect": {
			"dir": "north",
			"icon": "fa-circle",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Belief": {
			"dir": "east",
			"icon": "fa-child",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Chain": {
			"dir": "south",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Creativity": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Learn",
		"plane": "Wisdom",
		"icon": "fa-paint-brush",
		"cells": [
			13,
			12,
			1,
			12
		],
		"fill": "PWY",
		"Humanize": {
			"dir": "west",
			"icon": "fa-child",
			"hsv": [
				93,
				57,
				80
			],
			"Incubate": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Diverge": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Exploratory": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Originality": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		},
		"Shape": {
			"dir": "north",
			"icon": "fa-steam",
			"hsv": [
				90,
				90,
				90
			],
			"Flexible": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Blending": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Fluidity": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Letting": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		},
		"Medium": {
			"dir": "east",
			"icon": "fa-dropbox",
			"hsv": [
				15,
				90,
				90
			],
			"Consistency": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Honing": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Mending": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Elaboration": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		},
		"Art": {
			"dir": "south",
			"icon": "fa-dropbox",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Truth": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Learn",
		"plane": "Wisdom",
		"icon": "fa-gift",
		"cells": [
			25,
			12,
			1,
			12
		],
		"fill": "MWM",
		"Grounding": {
			"dir": "west",
			"icon": "fa-globe",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Authentic": {
			"dir": "north",
			"icon": "fa-heart",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Empathy": {
			"dir": "east",
			"icon": "fa-truck",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Substance": {
			"dir": "south",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			],
			"Correspondence": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Coherence": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Constructivist": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Consensus": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Pragmatic": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		}
	},
	"Awareness": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Do",
		"plane": "Wisdom",
		"icon": "fa-blind",
		"cells": [
			1,
			12,
			13,
			12
		],
		"fill": "LDT",
		"Perceive": {
			"dir": "west",
			"icon": "fa-circle",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Concern": {
			"dir": "north",
			"icon": "fa-star",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Conceive": {
			"dir": "east",
			"icon": "fa-cube",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Achieve": {
			"dir": "south",
			"icon": "fa-cube",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Conscience": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Do",
		"plane": "Wisdom",
		"icon": "fa-eye",
		"cells": [
			13,
			12,
			13,
			12
		],
		"fill": "PWY",
		"Emotion": {
			"dir": "west",
			"icon": "fa-desktop",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Transcend": {
			"dir": "north",
			"icon": "fa-bars",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Memory": {
			"dir": "east",
			"icon": "fa-database",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Expand": {
			"dir": "south",
			"icon": "fa-cloud",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Complexity": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Do",
		"plane": "Wisdom",
		"icon": "fa-connectdevelop",
		"cells": [
			25,
			12,
			13,
			12
		],
		"fill": "MWM",
		"Biology": {
			"dir": "west",
			"icon": "fa-leaf",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Constructal": {
			"dir": "north",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			]
		},
		"Brain": {
			"dir": "east",
			"icon": "fa-circle",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Nature": {
			"dir": "south",
			"icon": "fa-leaf",
			"hsv": [
				90,
				90,
				90
			]
		}
	},
	"Emerge": {
		"hsv": [
			195,
			90,
			70
		],
		"column": "Embrace",
		"row": "Share",
		"plane": "Wisdom",
		"icon": "fa-dropbox",
		"cells": [
			1,
			12,
			25,
			12
		],
		"fill": "LDT",
		"Novel": {
			"dir": "west",
			"icon": "fa-circle",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Wholeness": {
			"dir": "north",
			"icon": "fa-circle",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Supervenient": {
			"dir": "east",
			"icon": "fa-circle",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Coherent": {
			"dir": "south",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Inspire": {
		"hsv": [
			45,
			90,
			90
		],
		"column": "Innovate",
		"row": "Share",
		"plane": "Wisdom",
		"icon": "fa-fire",
		"cells": [
			13,
			12,
			25,
			12
		],
		"fill": "PWY",
		"Connect": {
			"dir": "west",
			"icon": "fa-life-ring",
			"hsv": [
				195,
				90,
				90
			]
		},
		"Illuminate": {
			"dir": "north",
			"icon": "fa-globe",
			"hsv": [
				90,
				90,
				90
			]
		},
		"Energize": {
			"dir": "east",
			"icon": "fa-circle",
			"hsv": [
				15,
				90,
				90
			]
		},
		"Nurture": {
			"dir": "south",
			"icon": "fa-lock",
			"hsv": [
				60,
				90,
				90
			]
		}
	},
	"Actualize": {
		"hsv": [
			0,
			20,
			90
		],
		"column": "Encourage",
		"row": "Share",
		"plane": "Wisdom",
		"icon": "fa-pied-piper-alt",
		"cells": [
			25,
			12,
			25,
			12
		],
		"fill": "MWM",
		"Humanistic": {
			"dir": "west",
			"icon": "fa-circle",
			"hsv": [
				195,
				90,
				90
			],
			"Sensitive": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Intimate": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Interpersonal": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Solitude": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Appreciative": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		},
		"Peaks": {
			"dir": "north",
			"icon": "fa-circle",
			"hsv": [
				195,
				90,
				90
			],
			"Ecstasy": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Harmony": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Depth": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Calm": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Humorous": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		},
		"Realistic": {
			"dir": "east",
			"icon": "fa-circle",
			"hsv": [
				60,
				90,
				90
			],
			"Honest": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Acceptance": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Reliant": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Spontaneous": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Autonomous": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		},
		"Myth": {
			"dir": "south",
			"icon": "fa-child",
			"hsv": [
				195,
				90,
				90
			],
			"Story": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Spirit": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Journey": {
				"icon": "fa-circle",
				"fill": "MTG"
			},
			"Affirm": {
				"icon": "fa-circle",
				"fill": "MTG"
			}
		}
	}
};

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = {
	"Red": {
		"parts": {
			"hsv": [
				0,
				90,
				90
			],
			"hue": 0,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Embrace",
		"row": "Learn",
		"plane": "Hues",
		"icon": "fa-circle",
		"cells": [
			1,
			12,
			1,
			12
		]
	},
	"Orange": {
		"parts": {
			"hsv": [
				30,
				90,
				90
			],
			"hue": 30,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Innovate",
		"row": "Learn",
		"plane": "Hues",
		"icon": "fa-flask",
		"cells": [
			13,
			12,
			1,
			12
		]
	},
	"Tan": {
		"parts": {
			"hsv": [
				60,
				90,
				90
			],
			"hue": 60,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Encourage",
		"row": "Learn",
		"plane": "Hues",
		"icon": "fa-tripadvisor",
		"cells": [
			25,
			12,
			1,
			12
		]
	},
	"Yellow": {
		"parts": {
			"hsv": [
				90,
				90,
				90
			],
			"hue": 90,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Embrace",
		"row": "Do",
		"plane": "Hues",
		"icon": "fa-magic",
		"cells": [
			1,
			12,
			13,
			12
		]
	},
	"Green": {
		"parts": {
			"hsv": [
				180,
				90,
				90
			],
			"hue": 180,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Innovate",
		"row": "Do",
		"plane": "Hues",
		"icon": "fa-object-group",
		"cells": [
			13,
			12,
			13,
			12
		]
	},
	"Aqua": {
		"parts": {
			"hsv": [
				210,
				90,
				90
			],
			"hue": 210,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Encourage",
		"row": "Do",
		"plane": "Hues",
		"icon": "fa-circle",
		"cells": [
			25,
			12,
			13,
			12
		]
	},
	"Blue": {
		"parts": {
			"hsv": [
				270,
				90,
				90
			],
			"hue": 270,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Embrace",
		"row": "Share",
		"plane": "Hues",
		"icon": "fa-language",
		"cells": [
			1,
			12,
			25,
			12
		]
	},
	"Violet": {
		"parts": {
			"hsv": [
				300,
				90,
				90
			],
			"hue": 300,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Innovate",
		"row": "Share",
		"plane": "Hues",
		"icon": "fa-graduation-cap",
		"cells": [
			13,
			12,
			25,
			12
		]
	},
	"Magenta": {
		"parts": {
			"hsv": [
				330,
				90,
				90
			],
			"hue": 330,
			"mcol": 20,
			"nrow": 20
		},
		"column": "Encourage",
		"row": "Share",
		"plane": "Hues",
		"icon": "fa-user-plus",
		"cells": [
			25,
			12,
			25,
			12
		]
	}
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.10.0
(function() {
  var Color, Vis,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Vis = __webpack_require__(0);

  Color = (function() {
    var MBox;

    module.exports = Color;

    MBox = __webpack_require__(1);

    MBox.Color = Color;

    function Color(mbox) {
      this.mbox = mbox;
      this.genPolarSurf = bind(this.genPolarSurf, this);
      this.genPolarRgbs = bind(this.genPolarRgbs, this);
      this.genWithVecsRgb = bind(this.genWithVecsRgb, this);
      this.genWithVecs = bind(this.genWithVecs, this);
      this.toRgbFromHue = bind(this.toRgbFromHue, this);
      this.toRygbFromHue = bind(this.toRygbFromHue, this);
      this.spaces = ['hci', 'rgb', 'hsi', 'hsl', 'hsv', 'lab', 'lch', 'hcl', 'cmyk', 'gl'];
      this.Vis = this.mbox.Vis;
    }

    Color.prototype.addARgb = function(a, r, g, b) {
      return [r + a, g + a, b + a];
    };

    Color.prototype.mulSRgb = function(s, r, g, b) {
      return [r * s, g * s, b * s];
    };

    Color.prototype.addARygb = function(a, r, y, g, b) {
      return [r + a, y + a, g + a, b + a];
    };

    Color.prototype.mulSRygb = function(s, r, y, g, b) {
      return [r * s, y * s, g * s, b * s];
    };

    Color.prototype.addRygbs = function(rygb1, rygb2) {
      var i, j, rygb3;
      rygb3 = [0, 0, 0, 0];
      for (i = j = 0; j < 4; i = ++j) {
        rygb3[i] = rygb1[i] + rygb2[i];
      }
      return rygb3;
    };

    Color.prototype.toRygbFromHue = function(hue) {
      var b, cos, g, r, ref, rygb, sin, y;
      cos = Math.abs(Vis.cos(hue));
      sin = Math.abs(Vis.sin(hue));
      ref = [cos, sin, cos, sin], r = ref[0], y = ref[1], g = ref[2], b = ref[3];
      rygb = [0, 0, 0, 0];
      if (0 <= hue && hue < 90) {
        rygb = [r, y, 0, 0];
      } else if (90 <= hue && hue < 180) {
        rygb = [0, y, g, 0];
      } else if (180 <= hue && hue < 270) {
        rygb = [0, 0, g, b];
      } else if (270 <= hue && hue < 360) {
        rygb = [r, 0, 0, b];
      }
      return rygb;
    };

    Color.prototype.toRgbFromHue = function(hue) {
      var B, G, R, cos, ref, rgb;
      cos = function(h) {
        return Math.abs(Vis.cos(h * 90 / 120));
      };
      ref = [cos(hue), cos(hue - 120), cos(hue - 240), 1], R = ref[0], G = ref[1], B = ref[2];
      rgb = [0, 0, 0];
      if (0 <= hue && hue < 120) {
        rgb = [R, G, 0];
      } else if (120 <= hue && hue < 240) {
        rgb = [0, G, B];
      } else if (240 <= hue && hue < 360) {
        rgb = [R, 0, B];
      }
      return rgb;
    };

    Color.prototype.genWithVecs = function(coord, view) {
      var hcss, ref, rgbs;
      ref = this.genVecs(), hcss = ref[0], rgbs = ref[1];
      return coord.cylLookup(view, hcss, rgbs);
    };

    Color.prototype.genWithVecsRgb = function(coord, view, see) {
      var hcss, ref, rgbs;
      ref = this.genVecsRgb(see), hcss = ref[0], rgbs = ref[1];
      return coord.cylLookup(view, hcss, rgbs);
    };

    Color.prototype.genPolarRgbs = function(coord, view, scale) {
      var hcss, ref, rgbs;
      ref = this.genPolarRgb(scale), hcss = ref[0], rgbs = ref[1];
      Util.log('genPolarRgbs', hcss.length, rgbs.length);
      return coord.cylLookup(view, hcss, rgbs);
    };

    Color.prototype.genPolarSurf = function(view, hcss, rgbs) {
      var colors, i, j, k, len, points, pts, ref, ref1, results, rgs, s, sh;
      ref = [90];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        s = ref[j];
        points = [];
        colors = [];
        for (i = k = 0, ref1 = hcss.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
          sh = hcss[i][2];
          if (s <= sh && sh < s + 10) {
            points.push(hcss[i]);
            colors.push(rgbs[i]);
          }
        }
        pts = view.area({
          data: points,
          width: points.length,
          height: 1,
          axes: [1, 2],
          channels: 3
        });
        rgs = view.area({
          data: colors,
          width: colors.length,
          height: 1,
          axes: [1, 2],
          channels: 3
        });
        results.push(view.surface({
          points: pts,
          colors: rgs,
          color: 0xffffff,
          shaded: false,
          opacity: 1.0,
          lineX: true,
          lineY: true,
          width: 5
        }));
      }
      return results;
    };

    Color.prototype.toHue = function(C1, N, C2) {
      var hue, n;
      n = 100 - N;
      hue = n;
      if (C1 === 'Y') {
        hue = n;
      } else if (C1 === 'G') {
        hue = n + 100;
      } else if (C1 === 'B') {
        hue = n + 200;
      } else if (C1 === 'R') {
        hue = n + 300;
      } else if (C1 === ' ') {
        hue = 0;
      }
      hue = hue * 0.9;
      if (hue === 360) {
        hue = 0;
      }
      return hue;
    };

    Color.prototype.scsPts = function(colors) {
      var color, key, pts;
      pts = [];
      for (key in colors) {
        color = colors[key];
        pts.push([Vis.toRadian(color.hue - 2), color.c, 100 - color.s, 1]);
        pts.push([Vis.toRadian(color.hue + 2), color.c, 100 - color.s, 1]);
      }
      return pts;
    };

    Color.prototype.scsRgbs = function(colors) {
      var color, key, rgbs, s;
      rgbs = [];
      s = 1 / 255;
      for (key in colors) {
        color = colors[key];
        rgbs.push([color.r * s, color.g * s, color.b * s, 1]);
        rgbs.push([color.R * s, color.G * s, color.B * s, 1]);
      }
      return rgbs;
    };

    Color.prototype.genVecsCompare = function() {
      var c, hcss, hue, j, k, l, len, len1, ref, ref1, rgbs, s;
      hcss = [];
      rgbs = [];
      for (hue = j = 0; j < 360; hue = j += 15) {
        ref = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
        for (k = 0, len = ref.length; k < len; k++) {
          c = ref[k];
          ref1 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            s = ref1[l];
            hcss.push([Vis.toRadian(hue - 3), c, s, 1]);
            hcss.push([Vis.toRadian(hue), c, s, 1]);
            hcss.push([Vis.toRadian(hue + 3), c, s, 1]);
            rgbs.push(Vis.toRgbHcs(hue, c, s, true));
            rgbs.push(Vis.toRgbHcs2(hue, c, s, true));
            rgbs.push(Vis.toRgbHsv(hue, c, s, true));
          }
        }
      }
      return [hcss, rgbs];
    };

    Color.prototype.genVecs = function() {
      var c, hcss, hue, j, k, l, len, len1, ref, ref1, rgbs, s;
      hcss = [];
      rgbs = [];
      for (hue = j = 0; j < 360; hue = j += 15) {
        ref = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
        for (k = 0, len = ref.length; k < len; k++) {
          c = ref[k];
          ref1 = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            s = ref1[l];
            hcss.push([Vis.toRadian(hue), c, s, 1]);
            rgbs.push(Vis.toRgbHsv(hue, c, s, true));
          }
        }
      }
      return [hcss, rgbs];
    };

    Color.prototype.genVecsRgb = function(see) {
      var b, c, g, h, hcss, hue, j, k, l, len, len1, m, o, p, r, ref, ref1, ref2, rgbs, s, sf, ss;
      hcss = [];
      rgbs = [];
      sf = 1 / 255;
      if (see === 'two' || see === 'rgb') {
        for (r = j = 0; j <= 255; r = j += 15) {
          for (g = k = 0; k <= 255; g = k += 15) {
            for (b = l = 0; l <= 255; b = l += 15) {
              ref = Vis.toHcsRgb(r, g, b), h = ref[0], c = ref[1], s = ref[2];
              if (h % 15 <= 2 || h % 15 >= 13) {
                ss = Vis.sScale(h, c, s);
                hcss.push([Vis.toRadian(h - 2, false), c, ss, 1]);
                rgbs.push([r * sf, g * sf, b * sf, 1]);
              }
            }
          }
        }
      }
      if (see === 'two' || see === 'hsv') {
        for (hue = m = 0; m < 360; hue = m += 15) {
          ref1 = [0, 16, 32, 48, 64, 80, 100];
          for (o = 0, len = ref1.length; o < len; o++) {
            c = ref1[o];
            ref2 = [0, 16, 32, 48, 64, 80, 100];
            for (p = 0, len1 = ref2.length; p < len1; p++) {
              s = ref2[p];
              hcss.push([Vis.toRadian(hue + 2), c, s, 1]);
              rgbs.push(Vis.toRgbHsvSigmoidal(hue, c, s, false));
            }
          }
        }
      }
      return [hcss, rgbs];
    };

    Color.prototype.genPolarRgb = function(scale) {
      var b, c, g, h, hcss, j, k, l, r, ref, rgbs, s, sf, ss;
      if (scale == null) {
        scale = false;
      }
      hcss = [];
      rgbs = [];
      sf = 1 / 255;
      for (r = j = 0; j <= 255; r = j += 15) {
        for (g = k = 0; k <= 255; g = k += 15) {
          for (b = l = 0; l <= 255; b = l += 15) {
            ref = Vis.toHcsRgb(r, g, b), h = ref[0], c = ref[1], s = ref[2];
            ss = scale ? Vis.sScale(h, c, s) : s;
            hcss.push([Vis.toRadian(h, false), c, ss, 1]);
            rgbs.push([r * sf, g * sf, b * sf, 1]);
          }
        }
      }
      return [hcss, rgbs];
    };

    Color.prototype.vecs = function(hue) {
      var c, s, v1, v2, y;
      v1 = [1, 1, 1];
      v2 = [1, 1, 1];
      c = Math.abs(this.Vis.cos(hue));
      s = Math.abs(this.Vis.sin(hue));
      y = Math.max(c, s);
      if (0 <= hue && hue < 90) {
        v2 = [y, s, 0];
      } else if (90 <= hue && hue < 180) {
        v2 = [c, y, 0];
      } else if (180 <= hue && hue < 270) {
        v2 = [0, c, s];
      } else if (270 <= hue && hue < 360) {
        v2 = [c, 0, s];
      }
      return [v1, v2];
    };

    Color.prototype.csvec = function(c, s, v1, v2) {
      var c1, c2, i, j, v3;
      c1 = 0.0001 * s * (100 - c);
      c2 = 0.0001 * s * c;
      v3 = [0, 0, 0, 1];
      for (i = j = 0; j < 3; i = ++j) {
        v3[i] = v1[i] * c1 + v2[i] * c2;
      }
      return v3;
    };

    Color.prototype.rgbPc = function(r, g, b, R, G, B) {
      var bd, gd, pc, rd;
      pc = function(f) {
        return Util.toInt(f * 100);
      };
      rd = r !== 0 ? r : -R;
      gd = g !== 0 ? g : -G;
      bd = b !== 0 ? b : -B;
      return [pc(R / rd), pc(G / gd), pc(B / bd)];
    };

    return Color;

  })();

}).call(this);


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.6.3
(function() {
  var Build, IKW, Vis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty;

  Vis = __webpack_require__(0);

  Build = __webpack_require__(2);

  IKW = (function() {
    var MBox;

    module.exports = IKW;

    MBox = __webpack_require__(1);

    MBox.IKW = IKW;

    function IKW(mbox, coord, color, width, height, depth) {
      this.mbox = mbox;
      this.coord = coord;
      this.color = color;
      this.width = width;
      this.height = height;
      this.depth = depth;
      this.viewPlanes = __bind(this.viewPlanes, this);
      this.viewXyzsRgbs = __bind(this.viewXyzsRgbs, this);
      this.flotExpr = __bind(this.flotExpr, this);
      this.mathbox = this.mbox.mathbox;
      this.build = this.createBuild();
      this.ni = 0;
      this.nt = 4;
    }

    IKW.prototype.createBuild = function() {
      var args, build;
      args = {
        name: 'Muse',
        plane: 'Information',
        op: ''
      };
      build = new Build(args);
      return build;
    };

    IKW.prototype.canvasContext = function() {
      var canvas, ctx;
      canvas = document.querySelector('canvas');
      ctx = canvas.getContext('2d');
      if (ctx == null) {
        ctx = canvas.getContext('webgl');
      }
      if (ctx == null) {
        Util.log('MBox.IKW.canvasContext() null');
      }
      return ctx;
    };

    IKW.prototype.canvasText = function(icon, x, y) {
      var ctx, uc;
      uc = Vis.unicode(icon);
      ctx = this.canvasContext();
      ctx.font = 'bold 24px FontAwesome';
      ctx.fillText(uc, x, y);
    };

    IKW.prototype.contextFont = function(fontSpec) {
      var ctx;
      if (fontSpec == null) {
        fontSpec = '36px FontAwesome';
      }
      ctx = this.canvasContext();
      ctx.font = fontSpec;
      Util.log('MBox.IKW.contextFont()', fontSpec);
    };

    IKW.prototype.logContextFont = function(msg) {
      var ctx;
      ctx = this.canvasContext();
      Util.log('MBox.IKW().logContextFont', msg, ctx.font);
    };

    IKW.prototype.museCartesian = function(range, scale, divide) {
      var view;
      if (range == null) {
        range = [[0, 120], [0, 120], [0, 120]];
      }
      if (scale == null) {
        scale = [2, 2, 2];
      }
      if (divide == null) {
        divide = [12, 12];
      }
      this.mathbox.camera({
        position: [3, 3, 3],
        proxy: true
      });
      view = this.mathbox.cartesian({
        range: range,
        scale: scale
      });
      this.coord.axesXYZ(view, 8, 0xFFFFFF);
      this.coord.gridXYZ(view, 4, 0xFFFFFF, divide[1], 0.7, '10');
      this.coord.tickXYZ(view, 64, 0xFFFFFF, divide[2], 2);
      return view;
    };

    IKW.prototype.createArrays = function() {
      var c, col, con, conb, conc, cone, conp, conv, cubc, cubp, flo, flob, floc, floe, flop, flow, h, hexc, hexi, hexp, hexq, hext, i, key, pipb, pipc, pipe, pipp, pipv, pla, plane, practice, prci, prcp, prct, row, sprac, studies, study, v, x, xyzs, y, z, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      xyzs = [];
      cubp = [];
      cubc = [];
      hexp = [];
      hexc = [];
      hexq = [];
      hext = [];
      hexi = [];
      prcp = [];
      prct = [];
      prci = [];
      conv = [];
      conc = [];
      conb = [];
      cone = [];
      conp = [];
      flow = [];
      floc = [];
      flob = [];
      floe = [];
      flop = [];
      pipv = [];
      pipc = [];
      pipb = [];
      pipe = [];
      pipp = [];
      sprac = 10;
      _ref = [
        {
          name: 'Information',
          z: 105
        }, {
          name: 'Augment',
          z: 75
        }, {
          name: 'Knowledge',
          z: 45
        }, {
          name: 'Wisdom',
          z: 15
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        plane = _ref[_i];
        _ref1 = [
          {
            name: 'Learn',
            y: 100
          }, {
            name: 'Do',
            y: 60
          }, {
            name: 'Share',
            y: 20
          }
        ];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          row = _ref1[_j];
          _ref2 = [
            {
              name: 'Embrace',
              x: 20
            }, {
              name: 'Innovate',
              x: 60
            }, {
              name: 'Encourage',
              x: 100
            }
          ];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            col = _ref2[_k];
            x = col.x;
            y = row.y;
            z = plane.z;
            xyzs.push([x, y, z, 1]);
            this.cubeFaces(x, y, z, sprac, cubp);
            practice = this.build.getPractice(plane.name, row.name, col.name);
            studies = this.build.getStudies(plane.name, practice.name);
            for (key in studies) {
              study = studies[key];
              this.fourTier(x, y, z, 4, study, hexp, hexc, hexq, hext, hexi);
            }
            _ref3 = practice.hsv, h = _ref3[0], c = _ref3[1], v = _ref3[2];
            for (i = _l = 0; _l < 6; i = ++_l) {
              cubc.push(Vis.toRgbHsv(h, c, v, true));
            }
            prcp.push([x, y - sprac + 2, z, 1]);
            prct.push(practice.name);
            prci.push("" + (Vis.unicode(practice.icon)));
          }
          _ref4 = [
            {
              name: 'west',
              x: 40,
              hsv: {
                h: 90,
                s: 60,
                v: 90
              },
              colName: 'Embrace'
            }, {
              name: 'east',
              x: 80,
              hsv: {
                h: 0,
                s: 60,
                v: 90
              },
              colName: 'Innovate'
            }
          ];
          for (_m = 0, _len3 = _ref4.length; _m < _len3; _m++) {
            con = _ref4[_m];
            practice = this.build.getPractice(plane.name, row.name, con.colName);
            this.convey(practice, 'east', con.x, row.y, plane.z, sprac, practice.hsv, conv, conc, conb, cone, conp);
          }
        }
        _ref5 = [
          {
            name: 'north',
            y: 80,
            rowName: 'Learn'
          }, {
            name: 'south',
            y: 40,
            rowName: 'Do'
          }
        ];
        for (_n = 0, _len4 = _ref5.length; _n < _len4; _n++) {
          flo = _ref5[_n];
          _ref6 = [
            {
              name: 'Embrace',
              x: 20,
              hsv: {
                h: 210,
                s: 60,
                v: 90
              }
            }, {
              name: 'Innovate',
              x: 60,
              hsv: {
                h: 60,
                s: 60,
                v: 90
              }
            }, {
              name: 'Encourage',
              x: 100,
              hsv: {
                h: 255,
                s: 60,
                v: 90
              }
            }
          ];
          for (_o = 0, _len5 = _ref6.length; _o < _len5; _o++) {
            col = _ref6[_o];
            practice = this.build.getPractice(plane.name, flo.rowName, col.name);
            this.flow(practice, 'south', col.x, flo.y, plane.z, sprac, practice.hsv, flow, floc, flob, floe, flop);
          }
        }
      }
      _ref7 = [
        {
          name: 'Information',
          z: 90
        }, {
          name: 'Augment',
          z: 60
        }, {
          name: 'Knowledge',
          z: 30
        }
      ];
      for (_p = 0, _len6 = _ref7.length; _p < _len6; _p++) {
        pla = _ref7[_p];
        _ref8 = [
          {
            name: 'Learn',
            y: 100
          }, {
            name: 'Do',
            y: 60
          }, {
            name: 'Share',
            y: 20
          }
        ];
        for (_q = 0, _len7 = _ref8.length; _q < _len7; _q++) {
          row = _ref8[_q];
          _ref9 = [
            {
              name: 'Embrace',
              x: 20
            }, {
              name: 'Innovate',
              x: 60
            }, {
              name: 'Encourage',
              x: 100
            }
          ];
          for (_r = 0, _len8 = _ref9.length; _r < _len8; _r++) {
            col = _ref9[_r];
            practice = this.build.getPractice(pla.name, row.name, col.name);
            this.conduit(practice, 'next', col.x, row.y, pla.z, sprac, practice.hsv, pipv, pipc, pipb, pipe, pipp);
          }
        }
      }
      return [xyzs, cubp, cubc, hexp, hexc, hexq, hext, hexi, prcp, prct, prci, conv, conc, conb, cone, conp, flow, floc, flob, floe, flop, pipv, pipc, pipb, pipe, pipp];
    };

    IKW.prototype.cubePlanes = function(build) {
      var col, colKey, conduit, convey, flow, h, i, pln, plnKey, prac, practice, row, rowKey, s, sprac, studies, study, studyKey, tier, v, x, y, z, _i, _ref, _ref1, _ref10, _ref11, _ref12, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      sprac = 10;
      _ref = build.Planes;
      for (plnKey in _ref) {
        if (!__hasProp.call(_ref, plnKey)) continue;
        pln = _ref[plnKey];
        if (plnKey !== 'Hues') {
          _ref1 = build.Rows;
          for (rowKey in _ref1) {
            if (!__hasProp.call(_ref1, rowKey)) continue;
            row = _ref1[rowKey];
            _ref2 = build.Columns;
            for (colKey in _ref2) {
              if (!__hasProp.call(_ref2, colKey)) continue;
              col = _ref2[colKey];
              x = col.cube.x;
              y = row.cube.y;
              z = pln.cube.z;
              practice = this.build.getPractice(pln.name, row.name, col.name);
              studies = this.build.getStudies(pln.name, practice.name);
              prac = pln.prac;
              tier = pln.tier;
              _ref3 = practice.hsv, h = _ref3[0], s = _ref3[1], v = _ref3[2];
              this.cubeFaces(x, y, z, sprac, prac.faces);
              for (i = _i = 0; _i < 6; i = ++_i) {
                prac.rgbs.push(Vis.toRgbHsv(h, s, v, true));
              }
              prac.centers.push([x, y - sprac + 2, z, 1]);
              prac.pracs.push(practice.name);
              prac.icons.push("" + (Vis.unicode(practice.icon)));
              for (studyKey in studies) {
                study = studies[studyKey];
                this.fourTier(x, y, z, 4, study, tier.hexes, tier.rgbs, tier.centers, tier.studies, tier.icons);
              }
            }
          }
        }
      }
      _ref4 = build.Planes;
      for (plnKey in _ref4) {
        if (!__hasProp.call(_ref4, plnKey)) continue;
        pln = _ref4[plnKey];
        if (this.inIAKW(plnKey)) {
          _ref5 = build.Rows;
          for (rowKey in _ref5) {
            if (!__hasProp.call(_ref5, rowKey)) continue;
            row = _ref5[rowKey];
            _ref6 = build.Columns;
            for (colKey in _ref6) {
              if (!__hasProp.call(_ref6, colKey)) continue;
              col = _ref6[colKey];
              if (!(colKey !== 'Encourage')) {
                continue;
              }
              practice = this.build.getPractice(pln.name, row.name, col.name);
              convey = pln.convey;
              this.convey(practice, 'east', col.cube.xc, row.cube.y, pln.cube.z, sprac, practice.hsv, convey.rects, convey.rgbs, convey.begs, convey.ends, convey.centers);
            }
          }
        }
      }
      _ref7 = build.Planes;
      for (plnKey in _ref7) {
        if (!__hasProp.call(_ref7, plnKey)) continue;
        pln = _ref7[plnKey];
        if (this.inIAKW(plnKey)) {
          _ref8 = build.Rows;
          for (rowKey in _ref8) {
            if (!__hasProp.call(_ref8, rowKey)) continue;
            row = _ref8[rowKey];
            if (rowKey !== 'Share') {
              _ref9 = build.Columns;
              for (colKey in _ref9) {
                if (!__hasProp.call(_ref9, colKey)) continue;
                col = _ref9[colKey];
                practice = this.build.getPractice(pln.name, row.name, col.name);
                flow = pln.flow;
                this.flow(practice, 'south', col.cube.x, row.cube.yc, pln.cube.z, sprac, practice.hsv, flow.rects, flow.rgbs, flow.begs, flow.ends, flow.centers);
              }
            }
          }
        }
      }
      _ref10 = build.Planes;
      for (plnKey in _ref10) {
        if (!__hasProp.call(_ref10, plnKey)) continue;
        pln = _ref10[plnKey];
        if (this.inIAK(plnKey)) {
          _ref11 = build.Rows;
          for (rowKey in _ref11) {
            if (!__hasProp.call(_ref11, rowKey)) continue;
            row = _ref11[rowKey];
            _ref12 = build.Columns;
            for (colKey in _ref12) {
              if (!__hasProp.call(_ref12, colKey)) continue;
              col = _ref12[colKey];
              practice = this.build.getPractice(pln.name, row.name, col.name);
              conduit = pln.conduit;
              this.conduit(practice, 'next', col.x, row.y, pln.z, sprac, practice.hsv, conduit.rects, conduit.rgbs, conduit.begs, conduit.ends, conduit.centers);
            }
          }
        }
      }
      return build.Planes;
    };

    IKW.prototype.inIAKW = function(plane) {
      var array;
      array = ['Information', 'Augment', 'Knowledge', 'Wisdom'];
      return Util.inArray(array, plane);
    };

    IKW.prototype.inIAK = function(plane) {
      var array;
      array = ['Information', 'Augment', 'Knowledge'];
      return Util.inArray(array, plane);
    };

    IKW.prototype.cubeFaces = function(x, y, z, s, cubp) {
      cubp.push([[x - s, y - s, z - s], [x - s, y + s, z - s], [x - s, y + s, z + s], [x - s, y - s, z + s]]);
      cubp.push([[x + s, y - s, z - s], [x + s, y + s, z - s], [x + s, y + s, z + s], [x + s, y - s, z + s]]);
      cubp.push([[x - s, y - s, z - s], [x + s, y - s, z - s], [x + s, y - s, z + s], [x - s, y - s, z + s]]);
      cubp.push([[x - s, y + s, z - s], [x + s, y + s, z - s], [x + s, y + s, z + s], [x - s, y + s, z + s]]);
      cubp.push([[x - s, y - s, z - s], [x + s, y - s, z - s], [x + s, y + s, z - s], [x - s, y + s, z - s]]);
      cubp.push([[x - s, y - s, z + s], [x + s, y - s, z + s], [x + s, y + s, z + s], [x - s, y + s, z + s]]);
    };

    IKW.prototype.convey = function(practice, dir, x, y, z, s, hsv, conv, conc, conb, cone, conp) {
      var beg, end, q, _ref;
      q = s / 2;
      _ref = this.build.connectName(practice, dir), beg = _ref[0], end = _ref[1];
      conv.push([[x - s, y - q, z], [x - s, y + q, z], [x + s, y + q, z], [x + s, y - q, z]]);
      conc.push(Vis.toRgbHsv(hsv[0], hsv[1], hsv[2], true));
      conb.push(beg);
      cone.push(end);
      conp.push([x, y, z]);
    };

    IKW.prototype.flow = function(practice, dir, x, y, z, s, hsv, flow, floc, flob, floe, flop) {
      var beg, end, q, _ref;
      q = s / 2;
      _ref = this.build.connectName(practice, dir), beg = _ref[0], end = _ref[1];
      flow.push([[x - q, y - s, z], [x - q, y + s, z], [x + q, y + s, z], [x + q, y - s, z]]);
      floc.push(Vis.toRgbHsv(hsv[0], hsv[1], hsv[2], true));
      flob.push(beg);
      floe.push(end);
      flop.push([x, y, z]);
    };

    IKW.prototype.conduit = function(practice, dir, x, y, z, s, hsv, pipv, pipc, pipb, pipe, pipp) {
      var beg, end, q, _ref;
      q = s / 2;
      _ref = this.build.connectName(practice, dir), beg = _ref[0], end = _ref[1];
      pipv.push([[x - q, y, z - q], [x + q, y, z - q], [x + q, y, z + q], [x - q, y, z + q]]);
      pipc.push(Vis.toRgbHsv(hsv[0], hsv[1], hsv[2], true));
      pipb.push(beg);
      pipe.push(end);
      pipp.push([x, y, z]);
    };

    IKW.prototype.fourTier = function(x, y, z, s, study, hexp, hexc, hexq, hext, hexi) {
      var cos30s, cos30y;
      cos30s = Vis.cos(30) * s;
      cos30y = cos30s * 2;
      switch (study.dir) {
        case 'north':
        case 'northd':
          hexp.push(this.hex(x, y + cos30s, z, s, hexq));
          break;
        case 'west':
        case 'westd':
          hexp.push(this.hex(x - 1.5 * s, y, z, s, hexq));
          break;
        case 'east':
        case 'eastd':
          hexp.push(this.hex(x + 1.5 * s, y, z, s, hexq));
          break;
        case 'south':
        case 'southd':
          hexp.push(this.hex(x, y - cos30s, z, s, hexq));
          break;
        case 'nw':
        case 'nwd':
          hexp.push(this.hex(x - 1.5 * s, y + cos30y, z, s, hexq));
          break;
        case 'ne':
        case 'ned':
          hexp.push(this.hex(x + 1.5 * s, y + cos30y, z, s, hexq));
          break;
        case 'sw':
        case 'swd':
          hexp.push(this.hex(x - 1.5 * s, y - cos30y, z, s, hexq));
          break;
        case 'se':
        case 'sed':
          hexp.push(this.hex(x + 1.5 * s, y - cos30y, z, s, hexq));
          break;
        default:
          hexp.push(this.hex(x, y + cos30s, z, s, hexq));
      }
      hexc.push(Vis.toRgba(study));
      hext.push(study.name);
      hexi.push(Vis.unicode(study.icon));
    };

    IKW.prototype.hex = function(x, y, z, s, hexq) {
      var ang, pts, _i, _len, _ref;
      hexq.push([x, y, z]);
      pts = [];
      _ref = [0, 60, 120, 180, 240, 300];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ang = _ref[_i];
        pts.push([x + s * Vis.cos(ang), y + s * Vis.sin(ang), z]);
      }
      return pts;
    };

    IKW.prototype.studySlots = function(x, y, z, sprac, subs) {
      var s, t, u, _i, _j, _len, _len1, _ref, _ref1;
      s = sprac / 3;
      _ref = [s, s * 3, s * 5];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _ref1 = [s, s * 3, s * 5];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          u = _ref1[_j];
          this.cubeFaces(x + t - sprac, y + u - sprac, z - s * 2, s, subs);
        }
      }
    };

    IKW.prototype.flotExpr = function(emit, el) {
      return emit(el('div', {}, 'Practice'));
    };

    IKW.prototype.viewXyzsRgbs = function(view) {
      var conb, conc, cone, conp, cont, conv, cubc, cubp, flob, floc, floe, flop, flow, hexc, hexi, hexp, hexq, hext, i, len, pipb, pipc, pipe, pipp, pipv, prci, prcp, prct, xyzs, _i, _ref;
      _ref = this.createArrays(), xyzs = _ref[0], cubp = _ref[1], cubc = _ref[2], hexp = _ref[3], hexc = _ref[4], hexq = _ref[5], hext = _ref[6], hexi = _ref[7], prcp = _ref[8], prct = _ref[9], prci = _ref[10], conv = _ref[11], conc = _ref[12], conb = _ref[13], cone = _ref[14], conp = _ref[15], flow = _ref[16], floc = _ref[17], flob = _ref[18], floe = _ref[19], flop = _ref[20], pipv = _ref[21], pipc = _ref[22], pipb = _ref[23], pipe = _ref[24], pipp = _ref[25];
      cont = [];
      len = conb.length;
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        cont.push(conb[i] + ' ' + cone[i]);
      }
      view.array({
        data: xyzs,
        id: "xyzs",
        items: 1,
        channels: 4,
        live: false,
        width: xyzs.length
      });
      view.array({
        data: cubp,
        id: "cubp",
        items: 4,
        channels: 3,
        live: false,
        width: cubp.length
      });
      view.array({
        data: cubc,
        id: "cubc",
        items: 1,
        channels: 4,
        live: false,
        width: cubc.length
      });
      view.array({
        data: hexp,
        id: "hexp",
        items: 6,
        channels: 3,
        live: false,
        width: hexp.length
      });
      view.array({
        data: hexc,
        id: "hexc",
        items: 1,
        channels: 4,
        live: false,
        width: hexc.length
      });
      view.array({
        data: hexq,
        id: "hexq",
        items: 1,
        channels: 3,
        live: false,
        width: hexq.length
      });
      view.array({
        data: prcp,
        id: "prcp",
        items: 1,
        channels: 4,
        live: false,
        width: prcp.length
      });
      view.array({
        data: conv,
        id: "conv",
        items: 4,
        channels: 3,
        live: false,
        width: conv.length
      });
      view.array({
        data: conc,
        id: "conc",
        items: 1,
        channels: 4,
        live: false,
        width: conc.length
      });
      view.array({
        data: conp,
        id: "conp",
        items: 1,
        channels: 3,
        live: false,
        width: conp.length
      });
      view.array({
        data: flow,
        id: "flow",
        items: 4,
        channels: 3,
        live: false,
        width: flow.length
      });
      view.array({
        data: floc,
        id: "floc",
        items: 1,
        channels: 4,
        live: false,
        width: floc.length
      });
      view.array({
        data: flop,
        id: "flop",
        items: 1,
        channels: 3,
        live: false,
        width: flop.length
      });
      view.array({
        data: pipv,
        id: "pipv",
        items: 4,
        channels: 3,
        live: false,
        width: pipv.length
      });
      view.array({
        data: pipc,
        id: "pipc",
        items: 1,
        channels: 4,
        live: false,
        width: pipc.length
      });
      view.array({
        data: pipp,
        id: "pipp",
        items: 1,
        channels: 3,
        live: false,
        width: pipp.length
      });
      view.face({
        points: "#cubp",
        colors: "#cubc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 1,
        opacity: 0.3
      });
      view.face({
        points: "#hexp",
        colors: "#hexc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 2,
        opacity: 1.0
      });
      view.face({
        points: "#conv",
        colors: "#conc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 3,
        opacity: 0.5
      });
      view.face({
        points: "#flow",
        colors: "#floc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 3,
        opacity: 0.5
      });
      view.face({
        points: "#pipv",
        colors: "#pipc",
        color: 0xffffff,
        shaded: true,
        fill: true,
        line: true,
        closed: true,
        zIndex: 3,
        opacity: 0.5
      });
      view.text({
        data: prct,
        font: 'Font Awesome',
        width: prct.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#prcp",
        color: '#ffffff',
        snap: false,
        size: 24,
        offset: [0, -72],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: prci,
        font: 'FontAwesome',
        width: prci.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#prcp",
        color: '#ffffff',
        snap: false,
        size: 72,
        offset: [0, -6],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: hext,
        font: 'Font Awesome',
        width: hext.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#hexq",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, -15],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: hexi,
        font: 'FontAwesome',
        width: hexi.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#hexq",
        color: '#000000',
        snap: false,
        size: 36,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 3,
        outline: 0
      });
      view.text({
        data: cont,
        font: 'FontAwesome',
        width: cont.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#conp",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: flob,
        font: 'FontAwesome',
        width: flob.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#flop",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: floe,
        font: 'FontAwesome',
        width: floe.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#flop",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, -15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: pipb,
        font: 'FontAwesome',
        width: pipb.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#pipp",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, -15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
      view.text({
        data: pipe,
        font: 'FontAwesome',
        width: pipe.length,
        height: 1,
        depth: 1
      });
      view.label({
        points: "#pipp",
        color: '#000000',
        snap: false,
        size: 16,
        offset: [0, 15],
        depth: 0.5,
        zIndex: 4,
        outline: 0
      });
    };

    IKW.prototype.doInfo = function() {
      return Util.log('IKW plane', 'Info');
    };

    IKW.prototype.doData = function() {
      return Util.log('IKW plane', 'Augm');
    };

    IKW.prototype.doData = function() {
      return Util.log('IKW plane', 'Data');
    };

    IKW.prototype.doKnow = function() {
      return Util.log('IKW plane', 'Know');
    };

    IKW.prototype.doWise = function() {
      return Util.log('IKW plane', 'Wise');
    };

    IKW.prototype.viewPlanes = function(view) {
      var cond, conv, flow, i, len, p, planes, pln, plnKey, prac, q, tier, _i;
      planes = this.cubePlanes(this.build);
      for (plnKey in planes) {
        if (!__hasProp.call(planes, plnKey)) continue;
        pln = planes[plnKey];
        p = plnKey.charAt(0);
        q = '#' + p;
        prac = pln.prac;
        tier = pln.tier;
        conv = pln.convey;
        flow = pln.flow;
        cond = pln.conduit;
        conv.pairs = [];
        len = conv.begs.length;
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          conv.pairs.push(conv.begs[i] + ' ' + conv.ends[i]);
        }
        view.array({
          data: prac.faces,
          id: p + "faces",
          items: 4,
          channels: 3,
          live: false,
          width: prac.faces.length
        });
        view.array({
          data: prac.rgbs,
          id: p + "frgbs",
          items: 1,
          channels: 4,
          live: false,
          width: prac.rgbs.length
        });
        view.array({
          data: prac.centers,
          id: p + "pcens",
          items: 1,
          channels: 4,
          live: false,
          width: prac.centers.length
        });
        view.array({
          data: tier.hexes,
          id: p + "hexes",
          items: 6,
          channels: 3,
          live: false,
          width: tier.hexes.length
        });
        view.array({
          data: tier.rgbs,
          id: p + "hrgbs",
          items: 1,
          channels: 4,
          live: false,
          width: tier.rgbs.length
        });
        view.array({
          data: tier.centers,
          id: p + "hcens",
          items: 1,
          channels: 3,
          live: false,
          width: tier.centers.length
        });
        view.array({
          data: conv.rects,
          id: p + "crecs",
          items: 4,
          channels: 3,
          live: false,
          width: conv.rects.length
        });
        view.array({
          data: conv.rgbs,
          id: p + "crgbs",
          items: 1,
          channels: 4,
          live: false,
          width: conv.rgbs.length
        });
        view.array({
          data: conv.centers,
          id: p + "ccens",
          items: 1,
          channels: 3,
          live: false,
          width: conv.centers.length
        });
        view.array({
          data: flow.rects,
          id: p + "frecs",
          items: 4,
          channels: 3,
          live: false,
          width: flow.rects.length
        });
        view.array({
          data: flow.rgbs,
          id: p + "frgbx",
          items: 1,
          channels: 4,
          live: false,
          width: flow.rgbs.length
        });
        view.array({
          data: flow.centers,
          id: p + "fcens",
          items: 1,
          channels: 3,
          live: false,
          width: flow.centers.length
        });
        view.array({
          data: cond.rects,
          id: p + "precs",
          items: 4,
          channels: 3,
          live: false,
          width: cond.rects.length
        });
        view.array({
          data: cond.rgbs,
          id: p + "prgbs",
          items: 1,
          channels: 4,
          live: false,
          width: cond.rgbs.length
        });
        view.array({
          data: cond.centers,
          id: p + "pcenx",
          items: 1,
          channels: 3,
          live: false,
          width: cond.centers.length
        });
        view.face({
          points: q + "faces",
          colors: q + "frgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 1,
          opacity: 0.3
        });
        view.face({
          points: q + "hexes",
          colors: q + "hrgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 2,
          opacity: 1.0
        });
        view.face({
          points: q + "crecs",
          colors: q + "crgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 3,
          opacity: 0.5
        });
        view.face({
          points: q + "frecs",
          colors: q + "frgbx",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 3,
          opacity: 0.5
        });
        view.face({
          points: q + "precs",
          colors: q + "prgbs",
          color: 0xffffff,
          shaded: true,
          fill: true,
          line: true,
          closed: true,
          zIndex: 3,
          opacity: 0.5
        });
        view.text({
          data: prac.pracs,
          font: 'Font Awesome',
          width: prac.pracs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcens",
          color: '#ffffff',
          snap: false,
          size: 24,
          offset: [0, -72],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: prac.icons,
          font: 'FontAwesome',
          width: prac.icons.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcens",
          color: '#ffffff',
          snap: false,
          size: 72,
          offset: [0, -6],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: tier.studies,
          font: 'Font Awesome',
          width: tier.studies.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "hcens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, -15],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: tier.icons,
          font: 'FontAwesome',
          width: tier.icons.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "hcens",
          color: '#000000',
          snap: false,
          size: 36,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 3,
          outline: 0
        });
        view.text({
          data: conv.pairs,
          font: 'FontAwesome',
          width: conv.pairs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "ccens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: flow.begs,
          font: 'FontAwesome',
          width: flow.begs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "fcens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: flow.ends,
          font: 'FontAwesome',
          width: flow.ends.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "fcens",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, -15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: cond.begs,
          font: 'FontAwesome',
          width: cond.begs.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcenx",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, -15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
        view.text({
          data: cond.ends,
          font: 'FontAwesome',
          width: cond.ends.length,
          height: 1,
          depth: 1
        });
        view.label({
          points: q + "pcenx",
          color: '#000000',
          snap: false,
          size: 16,
          offset: [0, 15],
          depth: 0.5,
          zIndex: 4,
          outline: 0
        });
      }
    };

    IKW.prototype.toRgbHexxFaces = function(len) {
      var prac, rgba, rgbh, _i, _j, _len, _ref;
      rgbh = [];
      for (prac = _i = 0; 0 <= len ? _i < len : _i > len; prac = 0 <= len ? ++_i : --_i) {
        _ref = [[180, 50, 90], [60, 50, 90], [90, 50, 90], [30, 50, 90]];
        for (_j = 0, _len = _ref.length; _j < _len; _j++) {
          rgba = _ref[_j];
          rgbh.push(Vis.toRgbHsv(rgba[0], rgba[1], rgba[2], true));
        }
      }
      return rgbh;
    };

    IKW.prototype.musePoints = function() {
      var obj,
        _this = this;
      obj = {
        id: 'musePoints',
        width: this.width,
        height: this.height,
        depth: this.depth,
        items: 1,
        channels: 4
      };
      obj.expr = function(emit, x, y, z) {
        return emit(_this.center(x), _this.center(y), _this.center(z), 1);
      };
      return obj;
    };

    IKW.prototype.center = function(u) {
      var v;
      v = u;
      if (0 <= u && u < 40) {
        v = 20;
      }
      if (80 <= u && u < 80) {
        v = 60;
      }
      if (80 <= u && u <= 120) {
        v = 100;
      }
      return v;
    };

    IKW.prototype.museColors = function() {
      var obj,
        _this = this;
      obj = {
        id: 'museColors',
        width: this.width,
        height: this.height,
        depth: this.depth,
        channels: 4
      };
      obj.expr = function(emit, x, y, z) {
        var a, b, g, r, _ref;
        _ref = _this.practiceColor(x, y, z, i, j, k), r = _ref[0], g = _ref[1], b = _ref[2], a = _ref[3];
        return emit(r, g, b, a);
      };
      return obj;
    };

    IKW.prototype.musePoint = function() {
      var obj;
      obj = {
        id: "musePoint",
        points: "#musePoints",
        colors: "#museColors",
        shape: "square",
        color: 0xffffff,
        size: 600
      };
      return obj;
    };

    IKW.prototype.museText = function() {
      var obj, str,
        _this = this;
      str = function(n) {
        return Util.toStr(n);
      };
      obj = {
        font: 'Helvetica',
        style: 'bold',
        width: 16,
        height: 5,
        depth: 2
      };
      obj.expr = function(emit, i, j, k, time) {
        Util.noop(time);
        if (_this.ni < _this.nt) {
          _this.ni = _this.ni + 1;
        }
        return emit("Hi " + (str(i)) + " " + (str(j)) + " " + (str(k)));
      };
      return obj;
    };

    IKW.prototype.museLabel = function() {
      return {
        points: "#musePoints",
        color: '#000000',
        snap: false,
        outline: 2,
        size: 24,
        depth: .5,
        zIndex: 5
      };
    };

    IKW.prototype.museCube = function(view) {
      view.volume(this.musePoints());
      view.volume(this.museColors());
      return view.point(this.musePoint()).text(this.museText()).label(this.museLabel());
    };

    IKW.prototype.practiceColor = function(x, y, z) {
      var c, hue, v;
      if (0 <= x && x < 40) {
        hue = 210;
      } else if (40 <= x && x < 80) {
        hue = 60;
      } else if (80 <= x && x <= 120) {
        hue = 300;
      }
      if (0 <= y && y < 40) {
        c = 40;
      } else if (40 <= y && y < 80) {
        c = 60;
      } else if (80 <= y && y <= 120) {
        c = 80;
      }
      if (0 <= z && z < 40) {
        v = 40;
      } else if (40 <= z && z < 80) {
        v = 60;
      } else if (80 <= z && z <= 120) {
        v = 80;
      }
      return Vis.toRgbHsv(hue, c, v, true);
    };

    /*
    
    #iew.html(  { width:1, height:1, depth:1, expr:@flotExpr } )
    #iew.html(  { data:flot, width:flot.length, height:1, depth:1 } )
    #iew.dom(   { points:"#flop", color:'#000000', snap:false, size:16, offset:[0, 15], depth:0.5, zIndex:4, outline:0 } )
    
    fontFace:( name, uri ) ->
      fontFace = new FontFace( name, uri ) # "url(x)"
      fontFace.load()
    
    docFonts:( fontSpec='36px FontAwesome' ) ->
      document.fonts.load( fontSpec )
        .then( Util.log( 'MBox.IKW().docFonts loaded', fontSpec), Util.error('MBox.IKW.docFonts()' ) )
      return
    */


    return IKW;

  })();

}).call(this);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// Generated by CoffeeScript 1.10.0
(function() {
  var Regress;

  Regress = (function() {
    var MBox;

    module.exports = Regress;

    MBox = __webpack_require__(1);

    MBox.Regress = Regress;

    function Regress(mbox) {
      this.mbox = mbox;
      this.width = 100;
      this.height = 100;
      this.mathbox = this.mbox.mathbox;
      this.Coord = __webpack_require__(3);
      this.coord = new this.Coord(this.mbox, this.width, this.height);
    }

    Regress.prototype.viewLinearRegress = function() {
      var points, ref, slope, yInter;
      this.x = this.toArray(this.data02(), 0);
      this.y = this.toArray(this.data02(), 1);
      this.n = Math.min(this.x.length, this.y.length);
      ref = this.slopeYInter(this.n, this.x, this.y), slope = ref[0], yInter = ref[1];
      Util.alert({
        slope: slope,
        yInter: yInter
      });
      this.view = this.coord.cartesian([[0, 4], [0, 500], [0, 4]]);
      points = this.view.area(this.areaRegress(this.n, this.x, this.y));
      return this.view.surface({
        points: points,
        color: 0x5090FF,
        shaded: true,
        opacity: 1.0,
        lineX: true,
        lineY: true,
        width: 2
      });
    };

    Regress.prototype.areaRegress = function(n, x, y) {
      var obj;
      obj = {
        id: 'areaRegress',
        width: this.width,
        height: this.height,
        axes: [1, 3],
        channels: 3
      };
      obj.expr = (function(_this) {
        return function(emit, slope, yInter, i, j) {
          Util.noop(i, j);
          return emit(slope, _this.rss(n, x, y, slope, yInter), yInter);
        };
      })(this);
      return obj;
    };

    Regress.prototype.rss = function(n, x, y, slope, yInter) {
      var i, k, ref, sum, term;
      sum = 0.0;
      for (i = k = 0, ref = n; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        term = y[i] - yInter - slope * x[i];
        sum = sum + term * term;
      }
      return sum;
    };

    Regress.prototype.data01 = function() {
      return [[0, 2], [1, 4], [2, 3], [3, 5], [4, 8], [5, 9], [6, 10], [7, 11]];
    };

    Regress.prototype.data02 = function() {
      return [[0.0, 2.1], [1.0, 3.9], [2, 5.2], [3, 7.9], [4.0, 10.3], [5, 11.7], [6, 14.1], [7, 15.9]];
    };

    Regress.prototype.toArray = function(data, index) {
      var d, k, len, x;
      x = [];
      for (k = 0, len = data.length; k < len; k++) {
        d = data[k];
        x.push(d[index]);
      }
      return x;
    };

    Regress.prototype.slopeYInter = function(n, x, y) {
      var denom, numer, slope, xmean, yInter, ymean;
      xmean = this.mean(n, x);
      ymean = this.mean(n, y);
      numer = this.sumProducts(n, x, y, xmean, ymean);
      denom = this.sumSquares(n, x, xmean);
      slope = numer / denom;
      yInter = ymean - slope * xmean;
      return [slope, yInter];
    };

    Regress.prototype.sumProducts = function(n, x, y, xmean, ymean) {
      var i, k, ref, sum;
      sum = 0.0;
      for (i = k = 0, ref = n; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        sum = sum + (x[i] - xmean) * (y[i] - ymean);
      }
      return sum;
    };

    Regress.prototype.sumSquares = function(n, x, xmean) {
      var i, k, ref, sum;
      sum = 0.0;
      for (i = k = 0, ref = n; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        sum = sum + (x[i] - xmean) * (x[i] - xmean);
      }
      return sum;
    };

    Regress.prototype.mean = function(n, x) {
      var i, k, ref, sum;
      sum = 0;
      for (i = k = 0, ref = n; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        sum = sum + x[i];
      }
      return sum / n;
    };

    return Regress;

  })();

}).call(this);


/***/ })
/******/ ]);