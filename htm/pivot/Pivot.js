// Generated by CoffeeScript 1.10.0
(function() {
  var Pivot;

  Pivot = (function() {
    function Pivot() {}

    module.exports = Pivot;

    Pivot.init = function() {
      return Util.ready(function() {
        var $UI, d3, pivottable;
        window.jQuery = require('jquery');
        Pivot.$ = window.jQuery;
        $UI = require('lib/custom/jquery-ui');
        d3 = require('d3');
        pivottable = require('pivottable');
        Pivot.Database = require('js/util/Database');
        Util.noop($UI, d3, pivottable);
        console.log('Pivot.init() ready');
        return document.getElementById('pivotfiles').addEventListener('change', Pivot.handleFileSelect, false);
      });
    };

    Pivot.handleFileSelect = function(event) {
      var files;
      event.stopPropagation();
      event.preventDefault();
      files = event.target.files;
      console.log('handleFileSelect');
      Pivot.Database.read(files[0], function(array) {
        console.log('File', {
          name: files[0].name,
          lenght: files.length,
          array: array
        });
        switch (files[0].name) {
          case 'practices.json':
            Pivot.showPractices(array);
            break;
          case 'mps.json':
            Pivot.showMps(array);
            break;
          case 'bar.json':
            Pivot.showBar(array);
            break;
          case 'tensor.json':
            Pivot.showTensor(array);
            break;
          default:
            Pivot.showArray(array);
        }
      });
    };

    Pivot.showPractices = function(practices, htmlId) {
      if (htmlId == null) {
        htmlId = "output";
      }
      Pivot.$('#' + htmlId).pivotUI(practices, {
        sorters: Pivot.practiceSort,
        rows: ['plane', 'row'],
        cols: ['column']
      });
    };

    Pivot.practiceSort = function(attr) {
      switch (attr) {
        case 'plane':
          return Pivot.$.pivotUtilities.sortAs(["Information", "DataScience", "Knowledge", "Wisdow"]);
        case 'row':
          return Pivot.$.pivotUtilities.sortAs(["Learn", "Do", "Share"]);
        case 'column':
          return Pivot.$.pivotUtilities.sortAs(["Embrace", "Innovate", "Encourage"]);
        default:
          return null;
      }
    };

    Pivot.showMps = function(mps, htmlId) {
      if (htmlId == null) {
        htmlId = "output";
      }
      Pivot.$('#' + htmlId).pivotUI(mps.array, {
        derivedAttributes: Pivot.mpsAtts(),
        rows: ['Province'],
        cols: ['Party']
      });
    };

    Pivot.showBar = function(array, htmlId) {
      var layout;
      if (htmlId == null) {
        htmlId = "output";
      }
      layout = {
        fileopt: "extend",
        filename: "nodenodenode"
      };
      return Plotly.plot(htmlId, array, layout);
    };

    Pivot.showTensor = function(tensor, htmlId) {
      if (htmlId == null) {
        htmlId = "output";
      }
      return Plotly.plot(htmlId, tensor.data, tensor.layout);
    };

    Pivot.mpsAtts = function() {
      var derivers;
      derivers = Pivot.$.pivotUtilities.derivers;
      return {
        "Age Bin": derivers.bin("Age", 10),
        "Gender Imbalance": function(mp) {
          var ref;
          return (ref = mp["Gender"] === "Male") != null ? ref : {
            1: -1
          };
        }
      };
    };

    Pivot.showArray = function(array, htmlId) {
      if (htmlId == null) {
        htmlId = "output";
      }
      Pivot.$('#' + htmlId).pivotUI(array);
    };

    Pivot.doPivotFiles = function(htmlId) {
      var url;
      if (htmlId == null) {
        htmlId = "output";
      }
      url = Pivot.Database.fileURI + "/pivot/mps.json";
      Pivot.Database.read(url, function(mps) {
        Pivot.$('#' + htmlId).pivotUI(mps.array, Pivot.mpsAtts());
      });
    };

    return Pivot;

  })();

  Pivot.init();

}).call(this);
